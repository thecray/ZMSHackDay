[
	{
		"Name": "IsleOfManBusinessObjects(net462)",
		"Classes": [
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "BankStatementFileDetail",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail"
				],
				"Properties": [
					"System.Int32 BankStatementFileHeaderID",
					"System.String Record",
					"System.Int32 RecordChecksum",
					"System.Nullable BankStatementLineTypeID",
					"System.String BankStatementLineType",
					"System.DateTime TransactionDate",
					"System.Nullable CurrencyID",
					"System.String Currency",
					"System.String Narrative1",
					"System.String Narrative2",
					"System.String Narrative3",
					"System.String Narrative4",
					"System.String Narrative5",
					"System.Decimal Amount",
					"System.String TaxpayerNumber",
					"System.Nullable TaxpayerID",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus ImportFileDetailStatus",
					"System.String ErrorMessage",
					"System.Nullable CaseID",
					"System.Nullable PaymentHeaderID",
					"System.Boolean IsDebit",
					"System.Boolean IsCredit",
					"System.Boolean IsNil"
				],
				"Methods": [
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(bankStatementFileDetailValidator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022BankStatementFileHeaderID\u0022, SqlDbType.Int, 0, BankStatementFileHeaderID);\r\n            query.AddParameter(\u0022Record\u0022, SqlDbType.NVarChar, 0, Record);\r\n            query.AddParameter(\u0022Narrative1\u0022, SqlDbType.NVarChar, 0, Narrative1);\r\n            query.AddParameter(\u0022Narrative2\u0022, SqlDbType.NVarChar, 0, Narrative2);\r\n            query.AddParameter(\u0022Narrative3\u0022, SqlDbType.NVarChar, 0, Narrative3);\r\n            query.AddParameter(\u0022Narrative4\u0022, SqlDbType.NVarChar, 0, Narrative4);\r\n            query.AddParameter(\u0022Narrative5\u0022, SqlDbType.NVarChar, 0, Narrative5);\r\n            query.AddParameter(\u0022BankStatementLineTypeID\u0022, SqlDbType.Int, 0, BankStatementLineTypeID);\r\n            query.AddParameter(\u0022BankStatementLineType\u0022, SqlDbType.NVarChar, 0, BankStatementLineType);\r\n            query.AddParameter(\u0022TransactionDate\u0022, SqlDbType.DateTime, 0, TransactionDate);\r\n            query.AddParameter(\u0022CurrencyID\u0022, SqlDbType.Int, 0, CurrencyID);\r\n            query.AddParameter(\u0022Currency\u0022, SqlDbType.NVarChar, 0, Currency);\r\n            query.AddParameter(\u0022Amount\u0022, SqlDbType.Money, 0, Amount);\r\n            query.AddParameter(\u0022TaxpayerNumber\u0022, SqlDbType.NVarChar, 0, TaxpayerNumber);\r\n            query.AddParameter(\u0022TaxpayerID\u0022, SqlDbType.Int, 0, TaxpayerID);\r\n            query.AddParameter(\u0022ImportFileDetailStatusID\u0022, SqlDbType.Int, 0, ImportFileDetailStatus);\r\n            query.AddParameter(\u0022ErrorMessage\u0022, SqlDbType.NVarChar, 0, ErrorMessage);\r\n            query.AddParameter(\u0022CaseID\u0022, SqlDbType.Int, 0, CaseID);\r\n            query.AddParameter(\u0022PaymentHeaderID\u0022, SqlDbType.Int, 0, PaymentHeaderID);\r\n\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@BankStatementFileDetailID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "AssignProperties",
						"Hash": "D21F76F571F16FF6FC17FB9D1DCD43217691B3D126C87DE5C19560716BA9C80B",
						"Parameters": [
							"System.Data.DataRow dataRow"
						],
						"Body": {
							"BodyText": "            ID = ParsingHelper.ParseInt(dataRow[\u0022BankStatementFileDetailID\u0022]);\r\n            BankStatementFileHeaderID = ParsingHelper.ParseInt(dataRow[\u0022BankStatementFileHeaderID\u0022]);\r\n            Record = ParsingHelper.ParseString(dataRow[\u0022Record\u0022]);\r\n            RecordChecksum = ParsingHelper.ParseInt(dataRow[\u0022RecordChecksum\u0022]);\r\n\r\n            BankStatementLineTypeID = ParsingHelper.ParseNullableInt(dataRow[\u0022BankStatementLineTypeID\u0022]);\r\n            BankStatementLineType = ParsingHelper.ParseString(dataRow[\u0022BankStatementLineType\u0022]);\r\n\r\n            TransactionDate = ParsingHelper.ParseDateTime(dataRow[\u0022TransactionDate\u0022]);\r\n\r\n            CurrencyID = ParsingHelper.ParseNullableInt(dataRow[\u0022CurrencyID\u0022]);\r\n            Currency = ParsingHelper.ParseString(dataRow[\u0022Currency\u0022]);\r\n\r\n            Narrative1 = ParsingHelper.ParseString(dataRow[\u0022Narrative1\u0022]);\r\n            Narrative2 = ParsingHelper.ParseString(dataRow[\u0022Narrative2\u0022]);\r\n            Narrative3 = ParsingHelper.ParseString(dataRow[\u0022Narrative3\u0022]);\r\n            Narrative4 = ParsingHelper.ParseString(dataRow[\u0022Narrative4\u0022]);\r\n            Narrative5 = ParsingHelper.ParseString(dataRow[\u0022Narrative5\u0022]);\r\n\r\n            Amount = ParsingHelper.ParseDecimal(dataRow[\u0022Amount\u0022]);\r\n\r\n            TaxpayerNumber = ParsingHelper.ParseString(dataRow[\u0022TaxpayerNumber\u0022]);\r\n            TaxpayerID = ParsingHelper.ParseNullableInt(dataRow[\u0022TaxpayerID\u0022]);\r\n\r\n            ImportFileDetailStatus = (ImportFileDetailStatus)ParsingHelper.ParseInt(dataRow[\u0022ImportFileDetailStatusID\u0022]);\r\n\r\n            CaseID = ParsingHelper.ParseNullableInt(dataRow[\u0022CaseID\u0022]);\r\n            PaymentHeaderID = ParsingHelper.ParseNullableInt(dataRow[\u0022PaymentHeaderID\u0022]);\r\n\r\n            ErrorMessage = ParsingHelper.ParseString(dataRow[\u0022ErrorMessage\u0022]);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "BankStatementFileHeader",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader"
				],
				"Properties": [
					"System.String FileName",
					"System.DateTime StatementDate",
					"System.Nullable ProcessedDate",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus ImportFileStatus",
					"System.Int32 SourceBankAccountID",
					"System.String Contents",
					"System.Int32 ContentsChecksum",
					"System.String Notes",
					"System.Int32 TotalProcessedPaymentCount",
					"System.String FinalFileName",
					"System.Collections.Generic.IList BankStatementFileDetails"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return bankStatementFileHeaderValidator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(bankStatementFileHeaderValidator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022FileName\u0022, SqlDbType.NVarChar, 0, FileName);\r\n            query.AddParameter(\u0022StatementDate\u0022, SqlDbType.DateTime, 0, StatementDate);\r\n            query.AddParameter(\u0022ProcessedDate\u0022, SqlDbType.DateTime, 0, ProcessedDate);\r\n            query.AddParameter(\u0022ImportFileStatusID\u0022, SqlDbType.Int, 0, ImportFileStatus);\r\n            query.AddParameter(\u0022SourceBankAccountID\u0022, SqlDbType.Int, 0, SourceBankAccountID);\r\n            query.AddParameter(\u0022Contents\u0022, SqlDbType.NVarChar, 0, Contents);\r\n            query.AddParameter(\u0022Notes\u0022, SqlDbType.NVarChar, 0, Notes);\r\n            query.AddParameter(\u0022TotalProcessedPaymentCount\u0022, SqlDbType.Int, 0, TotalProcessedPaymentCount);\r\n            query.AddParameter(\u0022FinalFileName\u0022, SqlDbType.NVarChar, 0, FinalFileName);\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@BankStatementFileHeaderID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "AssignProperties",
						"Hash": "D21F76F571F16FF6FC17FB9D1DCD43217691B3D126C87DE5C19560716BA9C80B",
						"Parameters": [
							"System.Data.DataRow dataRow"
						],
						"Body": {
							"BodyText": "            ID = ParsingHelper.ParseInt(dataRow[\u0022BankStatementFileHeaderID\u0022]);\r\n            FileName = ParsingHelper.ParseString(dataRow[\u0022FileName\u0022]);\r\n            StatementDate = ParsingHelper.ParseDateTime(dataRow[\u0022StatementDate\u0022]);\r\n            ProcessedDate = ParsingHelper.ParseNullableDateTime(dataRow[\u0022ProcessedDate\u0022]);\r\n            ImportFileStatus = (ImportFileStatus)ParsingHelper.ParseInt(dataRow[\u0022ImportFileStatusID\u0022]);\r\n            SourceBankAccountID = ParsingHelper.ParseInt(dataRow[\u0022SourceBankAccountID\u0022]);\r\n            Contents = ParsingHelper.ParseString(dataRow[\u0022Contents\u0022]);\r\n            Notes = ParsingHelper.ParseString(dataRow[\u0022Notes\u0022]);\r\n            TotalProcessedPaymentCount = ParsingHelper.ParseInt(dataRow[\u0022TotalProcessedPaymentCount\u0022]);\r\n            FinalFileName = ParsingHelper.ParseString(dataRow[\u0022FinalFileName\u0022]);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "AuditCalculator",
				"BaseType": "DataTorque.Iho.BusinessObjects.Calculators.AuditCalculator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Int32",
						"Name": "CalculateAuditOutcome",
						"Hash": "0ACBF0922DE496980096025EE01E569860FA0C6023045DCD7E5290E7363B637F",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICaseAuditOutcome auditOutcome",
							"System.Nullable totalAssessedDiscrepancies"
						],
						"Body": {
							"BodyText": "            string outcomeCode;\r\n            if (totalAssessedDiscrepancies != 0)\r\n            {\r\n                outcomeCode = totalAssessedDiscrepancies \u003E 0 ? \u0022ADTCOMADD\u0022 : \u0022ADTCOMRED\u0022;\r\n            }\r\n            else\r\n            {\r\n                outcomeCode = \u0022ADTACCEPT\u0022;\r\n            }\r\n            return standardLookupRepository.FindItemByCode(\u0022CaseTypeOutcome\u0022, outcomeCode)?.ID ?? auditOutcome.AuditOutcomeID ?? 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseAuditOutcome"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseAuditOutcome AuditOutcomeID"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "BankStatementFileParser",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Calculators.IBankStatementFileParser"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Nullable",
						"Name": "GetDateTime",
						"Hash": "51BED73B20DBF8C181AF523A604F0B01D1E6A9E486B71EBD251CB62DF098BA3D",
						"Parameters": [
							"System.String dateString"
						],
						"Body": {
							"BodyText": "            DateTime? dateTime = null;\r\n\r\n            bool success = DateTime.TryParseExact(dateString, \u0022d/MM/yyyy\u0022, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime returnedDateTime);\r\n\r\n            if (success)\r\n            {\r\n                dateTime = returnedDateTime;\r\n            }\r\n\r\n            return dateTime;\r\n"
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Nullable",
						"Name": "GetTaxpayerId",
						"Hash": "8987F39E51ECBF1DA0A181E47511B477CDAF7858AA1A8EFEDF01F540CF57623D",
						"Parameters": [
							"System.String taxpayerIdentifier",
							"System.Nullable vatTaxTypeId",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            int? taxpayerId = null;\r\n            vatTaxTypeId = null;\r\n            ITaxpayerSummarySearchResult searchResult = taxpayerSummarySearcher.FindByTaxpayerNumber(taxpayerIdentifier, transaction);\r\n\r\n            if (searchResult == null)\r\n            {\r\n                ITaxpayerIDSearchResult taxpayerIdSearchResult = taxpayerIdentificationRepository.GetTaxpayerIDFromVATNumber(taxpayerIdentifier, transaction);\r\n                if (taxpayerIdSearchResult != null)\r\n                {\r\n                    taxpayerId = taxpayerIdSearchResult.TaxpayerID;\r\n                    vatTaxTypeId = taxTypeRepository.GetValueAddedTaxID(transaction);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                taxpayerId = searchResult.ID;\r\n            }\r\n\r\n            return taxpayerId;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult",
								"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher FindByTaxpayerNumber",
								"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository GetTaxpayerIDFromVATNumber",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult TaxpayerID",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository GetValueAddedTaxID",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult ID"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Nullable",
						"Name": "GetBankStatementLineTypeID",
						"Hash": "DD08169AC9A013E8D25AE92B12DCB10374058B6864852ACB210D5CFD143FC040",
						"Parameters": [
							"System.String bankStatementLineTypeCode",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IStandardLookupItem result = standardLookupRepository.FindItemByCode(\u0022BankStatementLineType\u0022, bankStatementLineTypeCode, false, transaction);\r\n            if (result == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return result.ID;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem ID"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Nullable",
						"Name": "GetCurrencyID",
						"Hash": "2CAE8996441423D216DA1F0A6F84A6E913D66BDB8AA6B0959154C1F86C6E2CE0",
						"Parameters": [
							"System.String currencyCode",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IStandardLookupItem result = standardLookupRepository.FindItemByCode(\u0022Currency\u0022, currencyCode, false, transaction);\r\n            if (result == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return result.ID;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem ID"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "CaseGenerator",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Calculators.ICaseGenerator"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState",
						"Name": "GenerateCaseForTaxpayer",
						"Hash": "BA5EF1B9E7706FF710C8B9418DA0219BC27C407F5A717D4DC8A7916FD19E3D3E",
						"Parameters": [
							"System.Int32 taxpayerID",
							"System.String caseTypeCode",
							"System.String caseTypeReasonCode",
							"System.String caseTypeTaskCode",
							"System.String otherReasons",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            ICaseType caseType = caseConfigurationRepository.FindCaseTypeByCode(caseTypeCode, transaction);\r\n\r\n            if (caseType == null)\r\n            {\r\n                throw new Exception(\u0022Case type not found during case creation.\u0022);\r\n            }\r\n\r\n            ICaseTypeReason caseTypeReason = caseType.Reasons.FirstOrDefault(r =\u003E r.Code == caseTypeReasonCode);\r\n\r\n            if (caseTypeReason == null)\r\n            {\r\n                throw new Exception(\u0022Case type reason not found during case creation.\u0022);\r\n            }\r\n             \r\n            ICaseWorkflowState state = caseWorkflowRepository.CreateCaseWorkflowState(caseType, transaction);\r\n\r\n            ICaseCaseTypeReason reason = caseRepository.CreateCaseCaseTypeReason();\r\n            reason.CaseTypeReasonID = caseTypeReason.ID;\r\n            reason.IsSelected = true;\r\n\r\n            state.CurrentCase.CaseStatusID = (int)CaseStatus.New;\r\n            state.CurrentCase.CasePriorityID = state.CurrentCase.CaseProcessor.CalculatePriority(state.CurrentCase);\r\n\r\n            state.CurrentCase.TaxpayerID = taxpayerID;\r\n\r\n            state.CurrentCase.OtherReasons = otherReasons;\r\n\r\n            ICaseCaseTypeReason exisitingReason = state.CurrentCase.CaseTypeReasons.FirstOrDefault(r =\u003E r.CaseTypeReasonID == reason.CaseTypeReasonID);\r\n            if (exisitingReason == null)\r\n            {\r\n                state.CurrentCase.CaseTypeReasons.Add(reason);\r\n            }\r\n            else\r\n            {\r\n                exisitingReason.IsSelected = true;\r\n            }\r\n            foreach (ICaseCaseTypeReason caseCaseTypeReason in state.CurrentCase.CaseTypeReasons.Where(r =\u003E r.CaseTypeReasonID != reason.CaseTypeReasonID))\r\n            {\r\n                caseCaseTypeReason.IsSelected = false;\r\n            }\r\n\r\n            //Make sure CaseTypeID and TaxpayerID are set before calling SearchByCase\r\n            IList\u003CICaseManagerSearchResult\u003E managerList = caseManagerSearcher.SearchByCase(state.CurrentCase, transaction);\r\n\r\n            if (managerList.Count == 0)\r\n            {\r\n                throw new Exception(\u0022No appropriate case managers found during case creation.\u0022);\r\n            }\r\n\r\n            //Returned list ordered by number of open cases in stored proc.\r\n            ICaseManagerSearchResult manager = managerList[0];\r\n\r\n            state.CurrentCase.ManagerID = manager.ID;\r\n\r\n            state.CurrentCase.CalculateCompletionDate();\r\n\r\n            // After this call to SaveCaseWorkflow we now have the case tasks / business object etc\r\n            if (!caseWorkflowRepository.SaveCaseWorkflow(state, transaction))\r\n            {\r\n                throw new Exception(\u0022Failed to save the CaseWorkflow during case creation.\u0022);\r\n            }\r\n\r\n            return state;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseType",
								"DataTorque.Iho.Interfaces.Repositories.ICaseConfigurationRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeReason",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState",
								"DataTorque.Iho.Interfaces.Repositories.ICaseWorkflowRepository",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseCaseTypeReason",
								"DataTorque.Iho.Interfaces.Repositories.ICaseRepository",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.BusinessObjects.CaseStatus",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseProcessor",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.Search.ICaseManagerSearchResult",
								"DataTorque.Iho.Interfaces.Search.ICaseManagerSearcher"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ICaseConfigurationRepository FindCaseTypeByCode",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseType Reasons",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeReason Code",
								"DataTorque.Iho.Interfaces.Repositories.ICaseWorkflowRepository CreateCaseWorkflowState",
								"DataTorque.Iho.Interfaces.Repositories.ICaseRepository CreateCaseCaseTypeReason",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseCaseTypeReason CaseTypeReasonID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeReason ID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseCaseTypeReason IsSelected",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState CurrentCase",
								"DataTorque.Iho.BusinessObjects.CaseStatus New",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeReason CaseTypeReasonID",
								"DataTorque.Iho.Interfaces.Search.ICaseManagerSearcher SearchByCase",
								"DataTorque.Iho.Interfaces.Search.ICaseManagerSearchResult ID",
								"DataTorque.Iho.Interfaces.Repositories.ICaseWorkflowRepository SaveCaseWorkflow"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "CaseWorkflowNavigator",
				"BaseType": "DataTorque.Iho.BusinessObjects.Calculators.CaseWorkflowNavigator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "IsCaseTaskEditable",
						"Hash": "A24D3A02C38E72A7CFD45B1579D8270C1EB10AE7C40463ADCB4991BD28ACDFCD",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICase caseObject",
							"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask caseTask",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            // DO NOT USE caseObject.CurrentTask WITHIN THIS METHOD!\r\n            // Why you ask? Well there is a fabulous ELSE IF statement within the get method of Case.CurrentTask in Iho which calls...\r\n            // IsCaseTaskEditable! Yay! What a fantastic opportunity for stack overflow exceptions, so yeah please don\u0027t..\r\n\r\n            int currentTaskId = caseTask.CaseID;\r\n\r\n            bool isEditable =  base.IsCaseTaskEditable(caseObject, caseTask, transaction);\r\n\r\n            if (isEditable)\r\n            {\r\n                //the task is not editable if any registration decision task has been completed and the task is before the change registration refusal notice task.\r\n                if (caseObject.CaseTasks.Any(t =\u003E t.Configuration.Code == systemConstantRepository.GetString(\u0022ChangeRegistrationRefusalNoticeTaskCode\u0022, \u0022CHGREFNOT\u0022) \u0026\u0026 t.ID == currentTaskId))\r\n                {\r\n                    int refusalNoticeCHGTaskId = caseObject.CaseTasks.First(t =\u003E t.Configuration.Code == systemConstantRepository.GetString(\u0022ChangeRegistrationRefusalNoticeTaskCode\u0022, \u0022CHGREFNOT\u0022)).ID;\r\n                    isEditable = !(caseTask.Complete \u0026\u0026 caseTask.ID \u003C= refusalNoticeCHGTaskId);\r\n                }\r\n            }\r\n\r\n            return isEditable;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask",
								"DataTorque.Iho.BusinessObjects.Calculators.CaseWorkflowNavigator",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeTask",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask CaseID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CaseTasks",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask Configuration",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetString",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask ID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask Complete"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "System.Boolean",
						"Name": "IsConditionMet",
						"Hash": "E9C35B0FD6154549E220CE758D3AB52F941E87659CB8837F72244CDCB7BF0D03",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICase caseObject",
							"System.Nullable taskID",
							"System.Nullable caseTypeTaskID",
							"System.Nullable caseTaskQuestionID",
							"System.Nullable conditionTypeID",
							"System.Nullable conditionSourceTypeID",
							"System.Nullable conditionMetaDataTypeID",
							"System.String conditionValue"
						],
						"Body": {
							"BodyText": "            bool conditionMet = false;\r\n\r\n            if (conditionSourceTypeID.HasValue)\r\n            {\r\n                ICaseTask caseTask = caseTypeTaskID.HasValue ? GetCurrentCaseTaskByCaseTypeTask(caseObject, caseTypeTaskID) : GetCurrentCaseTaskByTask(caseObject, taskID);\r\n\r\n                //Are we checking for inequality?\r\n                bool checkingForEquality = conditionTypeID == (int)ConditionType.Equal;\r\n\r\n                // if it has a value, we have a condition to check\r\n                switch (conditionSourceTypeID)\r\n                {\r\n                    case (int)ConditionSourceType.Questions:\r\n                        conditionMet = this.IsQuestionConditionMet(caseTask, caseTaskQuestionID, checkingForEquality, conditionValue);\r\n                        break;\r\n                    case (int)ConditionSourceType.Metadata:\r\n                        conditionMet = IsMetaDataConditionMet(caseObject, conditionMetaDataTypeID, checkingForEquality, conditionValue);\r\n                        break;\r\n                    case (int)ConditionSourceType.QuestionsAndMetaData:\r\n                        //When we have both a question and metaData, the metaData value is true(Display Question) or false(Hide Question). So we only ever compare our metaData value against \u0027true\u0027\r\n                        //The question still uses the standard \u0027checkingForEquality\u0027,\u0027conditionValue\u0027 which come from the spreadsheet\r\n                        conditionMet = IsQuestionConditionMet(caseTask, caseTaskQuestionID, checkingForEquality, conditionValue);\r\n                        conditionMet = conditionMet \u0026\u0026 IsMetaDataConditionMet(caseObject, conditionMetaDataTypeID, true, true.ToString());\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return conditionMet;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.BusinessObjects.ConditionType",
								"DataTorque.Iho.BusinessObjects.ConditionSourceType",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.CaseWorkflowNavigator"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.ConditionType Equal",
								"DataTorque.Iho.BusinessObjects.ConditionSourceType Questions",
								"DataTorque.Iho.BusinessObjects.ConditionSourceType Metadata",
								"DataTorque.Iho.BusinessObjects.ConditionSourceType QuestionsAndMetaData"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsQuestionConditionMet",
						"Hash": "D14347658A19C0718DAC76272DD156ECD9A1D90AB0AB256432F83BB95AC73383",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask caseTask",
							"System.Nullable caseTaskQuestionID",
							"System.Boolean checkingForEquality",
							"System.String conditionValue"
						],
						"Body": {
							"BodyText": "            bool conditionMet = false;\r\n            ICaseTaskAnswer answer = caseTask?.Answers.FirstOrDefault(a =\u003E a.CaseTaskQuestionID == caseTaskQuestionID);\r\n            if (answer != null)\r\n            {\r\n                string answerToCompare = answer.AnswerAsText;\r\n\r\n                if (answer.CaseTaskQuestionTypeID == (int)CaseTaskQuestionType.ComboBox)\r\n                {\r\n                    answerToCompare = answer.AnswerAsInt.ToString(CultureInfo.InvariantCulture);\r\n                }\r\n\r\n                if (conditionValue.Contains(\u0022|\u0022))\r\n                {\r\n                    string[] answers = conditionValue.Split(\u0027|\u0027);\r\n\r\n                    if (checkingForEquality)\r\n                    {\r\n                        conditionMet = answers.Contains(answerToCompare);\r\n                    }\r\n                    else\r\n                    {\r\n                        conditionMet = !answers.Contains(answerToCompare);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    conditionMet = checkingForEquality\r\n                                   ? answerToCompare == conditionValue\r\n                                   : answerToCompare != conditionValue;\r\n                }\r\n            }\r\n\r\n            return conditionMet;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskAnswer",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask",
								"DataTorque.Iho.BusinessObjects.CaseTaskQuestionType"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskAnswer CaseTaskQuestionID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskAnswer AnswerAsText",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskAnswer CaseTaskQuestionTypeID",
								"DataTorque.Iho.BusinessObjects.CaseTaskQuestionType ComboBox",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskAnswer AnswerAsInt"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsMetaDataConditionMet",
						"Hash": "7277C2249BB50C46557024DAA3E3C1177AD90610E447E3C9231921CBF93B410E",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICase caseObject",
							"System.Nullable conditionMetaDataTypeID",
							"System.Boolean checkingForEquality",
							"System.String conditionValue"
						],
						"Body": {
							"BodyText": "            bool conditionMet = false;\r\n            if (conditionMetaDataTypeID.HasValue)\r\n            {\r\n                ICaseMetaData metaData = caseObject.CaseMetaData.FirstOrDefault(m =\u003E m.CaseMetaDataTypeID == conditionMetaDataTypeID);\r\n\r\n                if (metaData != null \u0026\u0026 metaData.Value != null)\r\n                {\r\n                    if (conditionValue.Contains(\u0022|\u0022))\r\n                    {\r\n                        string[] answers = conditionValue.Split(\u0027|\u0027);\r\n\r\n                        if (checkingForEquality)\r\n                        {\r\n                            conditionMet = answers.Contains(metaData.Value);\r\n                        }\r\n                        else\r\n                        {\r\n                            conditionMet = !answers.Contains(metaData.Value);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        conditionMet = checkingForEquality\r\n                                       ? metaData.Value.Equals(conditionValue, StringComparison.InvariantCultureIgnoreCase)\r\n                                       : !metaData.Value.Equals(conditionValue, StringComparison.InvariantCultureIgnoreCase);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n\r\n            return conditionMet;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CaseMetaData",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData CaseMetaDataTypeID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData Value"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "ChangeOfCompanyNameFileParser",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Calculators.IChangeOfCompanyNameFileParser"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Nullable",
						"Name": "GetTaxpayerID",
						"Hash": "338A0FB065C6C4A39E619711161F56EBCF914DB3548D14B41B8B38AD64772333",
						"Parameters": [
							"System.String companyNumber",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            int? taxpayerID = null;\r\n\r\n            ITaxpayerIDSearchResult taxpayerIDSearchResult = taxpayerIdentificationRepository.GetTaxpayerIDFromCompanyNumber(companyNumber, transaction);\r\n            if (taxpayerIDSearchResult != null)\r\n            {\r\n                taxpayerID = taxpayerIDSearchResult.TaxpayerID;\r\n            }\r\n\r\n            return taxpayerID;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult",
								"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository GetTaxpayerIDFromCompanyNumber",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult TaxpayerID"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "ChangeOfRegisteredOfficeFileParser",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Calculators.IChangeOfRegisteredOfficeFileParser"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Nullable",
						"Name": "GetTaxpayerID",
						"Hash": "338A0FB065C6C4A39E619711161F56EBCF914DB3548D14B41B8B38AD64772333",
						"Parameters": [
							"System.String companyNumber",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            int? taxpayerID = null;\r\n\r\n            ITaxpayerIDSearchResult taxpayerIDSearchResult = taxpayerIdentificationRepository.GetTaxpayerIDFromCompanyNumber(companyNumber, transaction);\r\n            if (taxpayerIDSearchResult != null)\r\n            {\r\n                taxpayerID = taxpayerIDSearchResult.TaxpayerID;\r\n            }\r\n\r\n            return taxpayerID;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult",
								"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository GetTaxpayerIDFromCompanyNumber",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult TaxpayerID"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "ContactFormatter",
				"BaseType": "DataTorque.Iho.BusinessObjects.Calculators.ContactFormatter",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.String",
						"Name": "FormatDisplayAddress",
						"Hash": "DEC65EF82F977BA6B048ADCA15BB30D223408C741770FC84F3158093B3DF3095",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress contactAddress",
							"DataTorque.Iho.Interfaces.BusinessObjects.IAddressConfiguration addressConfiguration"
						],
						"Body": {
							"BodyText": "            AddressFormatterState state = new AddressFormatterState();\r\n            state.AddressBuilder = new StringBuilder();\r\n            state.IsFirstElementOnLine = true;\r\n            state.AddCommasToEndOfLine = systemConstantRepository.GetBoolean(\u0022AppendCommaToEndOfAddressLines\u0022);\r\n\r\n            // PO Box, Address 1\r\n            BeginLine(state);\r\n            AppendString(state, GetPOBox(contactAddress, addressConfiguration));\r\n            AppendString(state, contactAddress.Address1);\r\n\r\n            // Address 2, Address 3\r\n            BeginLine(state);\r\n            AppendString(state, contactAddress.Address2);\r\n            AppendString(state, contactAddress.Address3); // kinda weird that this isn\u0027t on it\u0027s own line, given it\u0027s name, but that\u0027s what it\u0027s supposed to do.\r\n\r\n            // Village, District\r\n            BeginLine(state);\r\n            AppendString(state, contactAddress.Village);\r\n            AppendString(state, contactAddress.District);\r\n\r\n            // Island, Country, PostCode\r\n            // or\r\n            // Island, Country\r\n            // PostCode\r\n            BeginLine(state);\r\n            AppendString(state, contactAddress.Island);\r\n            AppendString(state, contactAddress.Country);\r\n\r\n            bool postCodeOnNewLine = systemConstantRepository.GetBoolean(\u0022AddressPostCodeOnSameLine\u0022) == false;\r\n            if (postCodeOnNewLine)\r\n            {\r\n                BeginLine(state);\r\n            }\r\n            AppendString(state, contactAddress.PostCode);\r\n\r\n            string result = state.AddressBuilder.ToString().Trim();\r\n            if (string.IsNullOrEmpty(result))\r\n            {\r\n                return string.Empty;\r\n            }\r\n\r\n            // have we ended with a comma? if so, just remove it\r\n            if (state.AddCommasToEndOfLine \u0026\u0026 result[result.Length - 1] == \u0027,\u0027)\r\n            {\r\n                result = result.Substring(0, result.Length - 1);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress",
								"DataTorque.Iho.Interfaces.BusinessObjects.IAddressConfiguration"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState AddressBuilder",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState IsFirstElementOnLine",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState AddCommasToEndOfLine",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetBoolean",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Address1",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Address2",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Address3",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Village",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress District",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Island",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Country",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress PostCode"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "BeginLine",
						"Hash": "70F39BE98D4446EA5D916A0DDF7D103289C111D01AFB2A4AAF8B70904425C962",
						"Parameters": [
							"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState state"
						],
						"Body": {
							"BodyText": "            // if we have no elements on the line, then do nothing\r\n            if (state.IsFirstElementOnLine)\r\n            {\r\n                return;\r\n            }\r\n\r\n            // otherwise, reset our state and add an end line\r\n            state.IsFirstElementOnLine = true;\r\n\r\n            if (state.AddCommasToEndOfLine)\r\n            {\r\n                state.AddressBuilder.Append(\u0022,\u0022);\r\n            }\r\n\r\n            state.AddressBuilder.AppendLine();\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState IsFirstElementOnLine",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState AddCommasToEndOfLine",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState AddressBuilder"
							]
						}
					},
					{
						"Modifiers": "private static",
						"ReturnType": "void",
						"Name": "AppendString",
						"Hash": "A1B22871559DC9C0F9B95A1EB744AD23B2CBDF4DD38E0F5FF2386F2988B47F1D",
						"Parameters": [
							"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState state",
							"System.String value"
						],
						"Body": {
							"BodyText": "            if (string.IsNullOrWhiteSpace(value))\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (state.IsFirstElementOnLine == false)\r\n            {\r\n                state.AddressBuilder.Append(\u0022, \u0022);\r\n            }\r\n\r\n            state.AddressBuilder.Append(value);\r\n            state.IsFirstElementOnLine = false;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState IsFirstElementOnLine",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.AddressFormatterState AddressBuilder"
							]
						}
					},
					{
						"Modifiers": "private static",
						"ReturnType": "System.String",
						"Name": "GetPOBox",
						"Hash": "D626BF6ABD582B5AF70076F8ADB96943CE492C7DFC0DC70B81D396FB28285977",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress contactAddress",
							"DataTorque.Iho.Interfaces.BusinessObjects.IAddressConfiguration addressConfiguration"
						],
						"Body": {
							"BodyText": "            if (string.IsNullOrEmpty(contactAddress.POBox))\r\n            {\r\n                return string.Empty;\r\n            }\r\n\r\n            if (string.IsNullOrEmpty(addressConfiguration.POBoxLabel))\r\n            {\r\n                return contactAddress.POBox;\r\n            }\r\n\r\n            return $\u0022{addressConfiguration.POBoxLabel} {contactAddress.POBox}\u0022;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress",
								"DataTorque.Iho.Interfaces.BusinessObjects.IAddressConfiguration"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress POBox",
								"DataTorque.Iho.Interfaces.BusinessObjects.IAddressConfiguration POBoxLabel"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "AddressFormatterState",
				"BaseType": "System.Object"
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "DefermentStatementParser",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser"
				],
				"Methods": [
					{
						"Modifiers": "public",
						"ReturnType": "System.Int32",
						"Name": "GetStatementNumber",
						"Hash": "0372622CE9BECB4E6E51FE1B682FA3DF15D83ACC5102CF872A39F8833B632795",
						"Parameters": [
							" fileContent"
						],
						"Body": {
							"BodyText": "            if (fileContent == null || fileContent.Length \u003C= 1)\r\n            {\r\n                return 0;\r\n            }\r\n\r\n            // Extract and process the second line to find the statement number\r\n            string firstColumn = fileContent[1].Split(\u0027,\u0027)[0];\r\n            string statementNumberStr = firstColumn.Replace(\u0022Statement number\u0022, \u0022\u0022).Trim();\r\n\r\n            return int.TryParse(statementNumberStr, out int statementNumber) ? statementNumber : 0;\r\n"
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.String",
						"Name": "GetPeriod",
						"Hash": "B54B471A83EFC0C642250EE9C47DB7DCFA82F377F56218B6763FC264B7DCEB0A",
						"Parameters": [
							" fileContent"
						],
						"Body": {
							"BodyText": "            if (fileContent == null || fileContent.Length == 0)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            // Extract and process the first line to find the period\r\n            string firstColumn = fileContent[0].Split(\u0027,\u0027)[0];\r\n            return firstColumn.Replace(\u0022Deferment Statement\u0022, \u0022\u0022).Trim();\r\n"
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Collections.Generic.List",
						"Name": "GetDataRows",
						"Hash": "58743DA2F0FA0A94406ADDAE2682335EAC82F1EA70574CC02072B2DC544DC2CE",
						"Parameters": [
							" fileContent"
						],
						"Body": {
							"BodyText": "            var dataRows = new List\u003CIDictionary\u003Cstring, object\u003E\u003E();\r\n\r\n            if (fileContent == null || fileContent.Length \u003C= 5)\r\n            {\r\n                return dataRows; // Return an empty list if fileContent is null or has insufficient rows\r\n            }\r\n\r\n            foreach (string line in fileContent)\r\n            {\r\n                var rowData = ParseRow(line);\r\n                if (rowData != null)\r\n                {\r\n                    dataRows.Add(rowData);\r\n                }\r\n            }\r\n\r\n            return dataRows;\r\n"
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Collections.Generic.IDictionary",
						"Name": "GetDataRow",
						"Hash": "DDDA77E3FE49C8A3FBDDE4CCA86080949CC799D11B71D97CE86751E64BE5B29A",
						"Parameters": [
							"System.String row"
						],
						"Body": {
							"BodyText": "            return ParseRow(row);\r\n"
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.ValueTuple",
						"Name": "GetPeriodAndYearIds",
						"Hash": "C112B4033A3359235D43DB3D1834096B9B4A1B4AC2C665780F150EC1F2C6A323",
						"Parameters": [
							" fileContent",
							"System.String taxTypeCode"
						],
						"Body": {
							"BodyText": "            if (fileContent == null || fileContent.Length == 0 || string.IsNullOrWhiteSpace(fileContent[0]))\r\n            {\r\n                return (0, 0);\r\n            }\r\n\r\n            string periodLine = fileContent[0].Replace(\u0022Deferment Statement\u0022, \u0022\u0022).Trim();\r\n\r\n            // Use regex to extract the month and year\r\n            Match match = System.Text.RegularExpressions.Regex.Match(periodLine, @\u0022\\d{1,2}\\s*-\\s*\\d{1,2}\\s*([A-Za-z]\u002B)\\s*(\\d{4})\u0022);\r\n            if (!match.Success)\r\n            {\r\n                return (0, 0); // Return default values if parsing fails\r\n            }\r\n\r\n            int statementNumber = GetStatementNumber(fileContent);\r\n\r\n            string fullMonthName = match.Groups[1].Value.Trim();\r\n            string year = match.Groups[2].Value.Trim();\r\n\r\n            // Determine the period offset based on tax type code and statement number\r\n            int periodOffset = (taxTypeCode == \u0022CUSDV\u0022 || (taxTypeCode == \u0022CUSDEX\u0022 \u0026\u0026 (statementNumber == 3 || statementNumber == 4 || statementNumber == 5))) ? 1 : 0;\r\n\r\n            DateTime date;\r\n            if (!DateTime.TryParseExact($\u0022{fullMonthName} {year}\u0022, \u0022MMMM yyyy\u0022, CultureInfo.InvariantCulture, DateTimeStyles.None, out date))\r\n            {\r\n                return (0, 0);\r\n            }\r\n\r\n            date = date.AddMonths(periodOffset);\r\n\r\n            string shortMonthName = date.ToString(\u0022MMM\u0022, CultureInfo.InvariantCulture); // Short month name\r\n            int adjustedYear = date.Year;\r\n\r\n            // Get PeriodNameID and YearNameID from the database\r\n            int periodNameID = GetPeriodNameID(shortMonthName);\r\n            int yearNameID = GetYearNameID(adjustedYear);\r\n\r\n            return (periodNameID, yearNameID);\r\n"
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Nullable",
						"Name": "GetTaxpayerID",
						"Hash": "A995C3D213AF2D9C01CEE5D47C3DDEB85C61BE41F624C02DE16EF6EFC221CE91",
						"Parameters": [
							"System.Collections.Generic.IDictionary recordData",
							"System.String taxTypeCode"
						],
						"Body": {
							"BodyText": "            if (recordData == null || taxTypeCode == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            string defermentAccountNumber = recordData.GetValueOrDefault(DefermentStatementParser.Keys.DefermentAccountNumber)?.ToString();\r\n            string importersEORI = recordData.GetValueOrDefault(DefermentStatementParser.Keys.ImportersEORI)?.ToString();\r\n\r\n            // Retrieve TaxpayerID based on tax type\r\n            if (taxTypeCode == \u0022CUSDV\u0022 \u0026\u0026 !string.IsNullOrEmpty(defermentAccountNumber) \u0026\u0026 !string.IsNullOrEmpty(importersEORI))\r\n            {\r\n                ITaxpayerIDSearchResult taxpayer = IdentificationRepository.GetTaxpayerIDFromDefermentAccountNumber(defermentAccountNumber, importersEORI, taxTypeCode);\r\n                return taxpayer?.TaxpayerID;\r\n            }\r\n            else if (taxTypeCode == \u0022CUSDEX\u0022 \u0026\u0026 !string.IsNullOrEmpty(defermentAccountNumber))\r\n            {\r\n                ITaxpayerIDSearchResult taxpayer = IdentificationRepository.GetTaxpayerIDFromDefermentAccountNumber(defermentAccountNumber, null, taxTypeCode);\r\n                return taxpayer?.TaxpayerID;\r\n            }\r\n\r\n            return null;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.DefermentStatementParser",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult",
								"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.DefermentStatementParser Keys",
								"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository GetTaxpayerIDFromDefermentAccountNumber"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "HasCUSDVData",
						"Hash": "90FB78B6ECB7B84C4D3937C6E505FD20D96352A0A561F6DF56259A31999762DA",
						"Parameters": [
							"System.Collections.Generic.IDictionary recordData"
						],
						"Body": {
							"BodyText": "            return recordData.TryGetValue(Keys.DutyDue, out var dutyDue) \u0026\u0026 Convert.ToDecimal(dutyDue) != 0\r\n                   || recordData.TryGetValue(Keys.VATDue, out var vatDue) \u0026\u0026 Convert.ToDecimal(vatDue) != 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys DutyDue",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys VATDue"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "HasCUSDEXData",
						"Hash": "43C66B9C991C752CA7AABB3FF3F2DD04AF2A613801256D0A4CBD4C7F4E7D06EE",
						"Parameters": [
							"System.Collections.Generic.IDictionary recordData"
						],
						"Body": {
							"BodyText": "            return recordData.TryGetValue(Keys.ExciseDue, out var exciseDue) \u0026\u0026 Convert.ToDecimal(exciseDue) != 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys ExciseDue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Collections.Generic.IDictionary",
						"Name": "ParseRow",
						"Hash": "DD2930776ADE7A88E0CB8CFB4E08F49F160E050F53B60A01C3743088EB48A098",
						"Parameters": [
							"System.String row"
						],
						"Body": {
							"BodyText": "            if (string.IsNullOrWhiteSpace(row))\r\n            {\r\n                return null; // Return null if the row is empty or null\r\n            }\r\n\r\n            string[] columns = row.Split(\u0027,\u0027);\r\n\r\n            // Ensure at least the minimum required number of columns (adjust if needed)\r\n            if (columns.Length != 13)\r\n            {\r\n                return null; // Return null if there are insufficient columns\r\n            }\r\n\r\n            // Parse Duty, VAT, and Excise values\r\n            decimal dutyDue = ParseDecimal(columns[8], 1) ?? 0;\r\n            decimal vatDue = ParseDecimal(columns[9], 1) ?? 0;\r\n            decimal exciseDue = ParseDecimal(columns[10], 1) ?? 0;\r\n\r\n            decimal totalDue = dutyDue \u002B vatDue;\r\n\r\n            // Populate the row data dictionary\r\n            Dictionary\u003Cstring, object\u003E rowData = new Dictionary\u003Cstring, object\u003E\r\n            {\r\n                { Keys.ImportersEORI, columns[0] },\r\n                { Keys.TransactionDate, ParseDate(columns[1], 1) },\r\n                { Keys.MRN, columns[2] },\r\n                { Keys.DefermentAccountNumber, ParseInt(columns[3], 1) },\r\n                { Keys.Declarant, columns[4] },\r\n                { Keys.DeclarantsEORI, columns[5] },\r\n                { Keys.DeclarantsReference, columns[6] },\r\n                { Keys.DeferredDepositReference, columns[7] },\r\n                { Keys.DutyDue, dutyDue },\r\n                { Keys.VATDue, vatDue },\r\n                { Keys.ExciseDue, exciseDue },\r\n                { Keys.CUSDVDueOrCrAmt,totalDue},\r\n                { Keys.CUSDEXDueOrCrAmt,exciseDue},\r\n                { Keys.UnconCredit,ParseDecimal(columns[12],1)},\r\n                { Keys.TotalDue, totalDue }\r\n            };\r\n\r\n            return rowData;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys ImportersEORI",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys TransactionDate",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys MRN",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys DefermentAccountNumber",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys Declarant",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys DeclarantsEORI",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys DeclarantsReference",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys DeferredDepositReference",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys DutyDue",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys VATDue",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys ExciseDue",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys CUSDVDueOrCrAmt",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys CUSDEXDueOrCrAmt",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys UnconCredit",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys TotalDue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Int32",
						"Name": "GetPeriodNameID",
						"Hash": "622E94DFCC3A764BE38E80037ABDFEC06C0119263DD8D794DCC69DE47F877BE9",
						"Parameters": [
							"System.String monthName"
						],
						"Body": {
							"BodyText": "            return standardLookupRepository.FindItemByCode(\u0022PeriodName\u0022, monthName).ID;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Int32",
						"Name": "GetYearNameID",
						"Hash": "10DBC92F381B364C11427EA284E91D3C5CE08FBB8C954CB8777FF9107D53F2A9",
						"Parameters": [
							"System.Int32 year"
						],
						"Body": {
							"BodyText": "            return standardLookupRepository.FindItemByCode(\u0022YearName\u0022, year.ToString()).ID;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.String",
						"Name": "GetTaxTypeCode",
						"Hash": "8B31896CCF7C9C41E198F2FADD07C4896D3687BDB58EA6EB6472825B5D8AE9A4",
						"Parameters": [
							"System.Decimal dutyDue",
							"System.Decimal vatDue",
							"System.Decimal exciseDue"
						],
						"Body": {
							"BodyText": "            if (dutyDue != 0 || vatDue != 0)\r\n            {\r\n                return \u0022CUSDV\u0022;\r\n            }\r\n            if (exciseDue != 0)\r\n            {\r\n                return \u0022CUSDEX\u0022;\r\n            }\r\n            return null;\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Nullable",
						"Name": "ParseDate",
						"Hash": "64D315C71124F9A6C6D780B5F6610A70352396E15C8F376A12F7D006298C2408",
						"Parameters": [
							"System.String dateStr",
							"System.Int32 rowNumber"
						],
						"Body": {
							"BodyText": "            string[] dateFormats = new[]\r\n            {\r\n                \u0022d/M/yyyy\u0022, \u0022dd/MM/yyyy\u0022, \u0022d/MM/yyyy\u0022, \u0022dd/M/yyyy\u0022,\r\n                \u0022d/M/yy\u0022, \u0022dd/MM/yy\u0022, \u0022d/MM/yy\u0022, \u0022dd/M/yy\u0022\r\n            };\r\n\r\n            if (DateTime.TryParseExact(dateStr, dateFormats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime date))\r\n            {\r\n                return date;\r\n            }\r\n            LogError($\u0022Row {rowNumber}: Invalid date format for \u0027{dateStr}\u0027\u0022);\r\n            return null;\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Nullable",
						"Name": "ParseInt",
						"Hash": "856542AC44CCBD308243C2E81DD467C55F8EEF9DB162A73C66A5A0395EB585F1",
						"Parameters": [
							"System.String intStr",
							"System.Int32 rowNumber"
						],
						"Body": {
							"BodyText": "            if (int.TryParse(intStr, out int result))\r\n            {\r\n                return result;\r\n            }\r\n            LogError($\u0022Row {rowNumber}: Invalid integer value for \u0027{intStr}\u0027\u0022);\r\n            return null;\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Nullable",
						"Name": "ParseDecimal",
						"Hash": "3E8A4ADAFFFE08BAC2D248BADA49392A1D13CA41C2A4B693A8C9FBEE2BEE39E8",
						"Parameters": [
							"System.String decimalStr",
							"System.Int32 rowNumber"
						],
						"Body": {
							"BodyText": "            if (decimal.TryParse(decimalStr, out decimal result))\r\n            {\r\n                return result;\r\n            }\r\n            LogError($\u0022Row {rowNumber}: Invalid decimal value for \u0027{decimalStr}\u0027\u0022);\r\n            return null;\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "LogError",
						"Hash": "5B04C8E0594506A6A251F6B0AD93B9AE5BAB74FA7B6CAC689218F7FCCB5844C9",
						"Parameters": [
							"System.String message"
						],
						"Body": {
							"BodyText": "            Console.WriteLine(message);\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "Keys",
				"BaseType": "System.Object"
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "DisbursedChequesFileParser",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Calculators.IDisbursedChequesFileParser"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Nullable",
						"Name": "GetDateTime",
						"Hash": "51BED73B20DBF8C181AF523A604F0B01D1E6A9E486B71EBD251CB62DF098BA3D",
						"Parameters": [
							"System.String dateString"
						],
						"Body": {
							"BodyText": "            DateTime? dateTime = null;\r\n\r\n            bool success = DateTime.TryParseExact(dateString, \u0022d/MM/yyyy\u0022, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime returnedDateTime);\r\n\r\n            if (success)\r\n            {\r\n                dateTime = returnedDateTime;\r\n            }\r\n\r\n            return dateTime;\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "EmailSender",
				"BaseType": "DataTorque.Iho.BusinessObjects.Calculators.EmailSender",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.ValueTuple",
						"Name": "SendEmail",
						"Hash": "61E1A485AC3DDE636D9C18451D752C8CE4F7B337007066EF9929296669D7B572",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage emailMessage"
						],
						"Body": {
							"BodyText": "            bool success = true;\r\n            List\u003Cstring\u003E errors = new List\u003Cstring\u003E();\r\n\r\n            // For GDPR reasons we shouldn\u0027t show clients each others email addresses, so we cannot include more than one email in the To address\r\n            bool sendIndividualEmailForEachRecipient = systemConstantRepository.GetBoolean(\u0022SendIndividualEmailForEachRecipient\u0022, true);\r\n            if (sendIndividualEmailForEachRecipient)\r\n            {\r\n                // create a copy of the addressees list, since it gets modified while sending.\r\n                List\u003Cstring\u003E emailAddressesToSendTo = new List\u003Cstring\u003E(emailMessage.Addressees);\r\n\r\n                string originalSubject = emailMessage.Subject;\r\n                foreach (string recipient in emailAddressesToSendTo)\r\n                {\r\n                    if (string.IsNullOrEmpty(recipient))\r\n                    {\r\n                        continue;\r\n                    }\r\n\r\n                    (bool succcess, string errorMessage) result = SendMessageToRecipients(emailMessage, recipient);\r\n                    if (result.succcess == false)\r\n                    {\r\n                        success = false;\r\n                        errors.Add(result.errorMessage);\r\n                    }\r\n\r\n                    // need to restore the subject, so we don\u0027t keep appending emails to the same string.\r\n                    emailMessage.Subject = originalSubject;\r\n                }\r\n\r\n                return (success, string.Join(Environment.NewLine, errors));\r\n            }\r\n\r\n            return SendMessageToRecipients(emailMessage, emailMessage.Addressees.ToArray());\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetBoolean",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage Addressees",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage Subject"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.ValueTuple",
						"Name": "SendMessageToRecipients",
						"Hash": "2FD148E3A9DFB78EE560957C25AFB5E1BA66F858DE1F37F52378A1EA7ACDC497",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage emailMessage",
							" recipients"
						],
						"Body": {
							"BodyText": "            MailMessage message = new MailMessage();\r\n\r\n            // Modify entire email message for testing environment before processing\r\n            bool isEmailTest = systemConstantRepository.GetBoolean(\u0022EmailTest\u0022, true);\r\n            if (isEmailTest)\r\n            {\r\n                emailMessage = ConfigureEmailForTests(emailMessage, recipients);\r\n\r\n                // make sure we pull the email addresses from the emailMessage, since they have been transformed.\r\n                foreach (MailAddress mailAddress in emailMessage.Addressees.Where(a =\u003E !string.IsNullOrEmpty(a)).Select(a =\u003E new MailAddress(a)))\r\n                {\r\n                    message.To.Add(mailAddress);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // if not testing, then just send to the list of recipients as normal.\r\n                // this will be one email if SendIndividualEmailForEachRecipient is true, and one or more if false.\r\n                foreach (MailAddress mailAddress in recipients.Where(a =\u003E !string.IsNullOrEmpty(a)).Select(a =\u003E new MailAddress(a)))\r\n                {\r\n                    message.To.Add(mailAddress);\r\n                }\r\n            }\r\n\r\n            // Populate message\r\n            message.From = GetFromAddress(emailMessage.FromAddress);\r\n            message.Subject = emailMessage.Subject;\r\n            message.Body = emailMessage.Body;\r\n            message.IsBodyHtml = emailMessage.IsBodyHtml;\r\n\r\n            foreach (Attachment attachment in emailMessage.Attachments)\r\n            {\r\n                message.Attachments.Add(attachment);\r\n            }\r\n\r\n            return SmtpSend(message);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetBoolean",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage Addressees",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage FromAddress",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage Subject",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage Body",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage IsBodyHtml",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage Attachments"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage",
						"Name": "ConfigureEmailForTests",
						"Hash": "8AC7ADEDAD71BFD34E862FB24F3C92694B211D3B4BFFEE92230C5476950C5BF3",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage emailMessage",
							" recipients"
						],
						"Body": {
							"BodyText": "            // If config settings specify that emails are not to be sent \u0027for real\u0027, then \u0027isTest\u0027 settings will override values specified by the caller.\r\n\r\n            // FromAddress: no default, keep existing code as we need a failure here if none is configured for tests\r\n            emailMessage.FromAddress = systemConstantRepository.GetString(\u0022EmailTestFromAddress\u0022, \u0022demo@datatorque.com\u0022);\r\n\r\n            // when using the email service account, add in the email from address to the subject to enable easy filtering and identification of emails\r\n            if (systemConstantRepository.GetBoolean(\u0022EmailsUseEmailServiceAccount\u0022))\r\n            {\r\n                emailMessage.Subject \u002B= \u0022 (EmailFrom: \u0022 \u002B emailMessage.FromAddress \u002B \u0022)\u0022;\r\n            }\r\n\r\n            // Subject: show real address in subject so we have some idea emails are trying to go to correct place\r\n            emailMessage.Subject \u002B= $\u0022 (EmailTO: {string.Join(\u0022, \u0022, recipients)})\u0022;\r\n\r\n            // ToAddress: no default, keep existing code as we need a failure here if none is configured for tests\r\n            emailMessage.Addressees.Clear();\r\n            string addressees = systemConstantRepository.GetString(\u0022EmailTestToAddress\u0022, \u0022demo@datatorque.com\u0022);\r\n            emailMessage.Addressees.AddRange(addressees.Split(new char[] { \u0027;\u0027 }, StringSplitOptions.RemoveEmptyEntries));\r\n\r\n            return emailMessage;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage FromAddress",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetString",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetBoolean",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage Subject",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage Addressees"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Net.Mail.MailAddress",
						"Name": "GetFromAddress",
						"Hash": "A436DA8143C4F7E39763AEB6262AA4FE0561A1D6775BC84E599A87A114188A32",
						"Parameters": [
							"System.String fromAddress"
						],
						"Body": {
							"BodyText": "            if (string.IsNullOrEmpty(fromAddress))\r\n            {\r\n                fromAddress = systemConstantRepository.GetString(\u0022CorrespondenceDefaultFromEmailAddress\u0022, \u0022demo@datatorque.com\u0022);\r\n            }\r\n\r\n            return new MailAddress(fromAddress);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetString"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.ValueTuple",
						"Name": "SmtpSend",
						"Hash": "6A89EED556B62D2611DC661D9405F50233CA2D415CA41D1A7EE64D1F2E13E853",
						"Parameters": [
							"System.Net.Mail.MailMessage message"
						],
						"Body": {
							"BodyText": "            bool success = true;\r\n            string errorMessage = string.Empty;\r\n\r\n            if (systemConstantRepository.GetBoolean(\u0022EmailBypass\u0022))\r\n            {\r\n                return (success, errorMessage);\r\n            }\r\n\r\n            SmtpClient smtp = new SmtpClient();\r\n            try\r\n            {\r\n                smtp.Host = systemConstantRepository.GetString(\u0022SMTPHost\u0022, \u0022exchange\u0022);\r\n                smtp.Port = systemConstantRepository.GetInteger(\u0022SMTPPort\u0022, 25);\r\n\r\n                // BN Ignore web emails\r\n                if (currentUserRepository.GetCurrentUserID() \u003E 0 \u0026\u0026 currentUserRepository.GetCurrentUser().IsSystemUser)\r\n                {\r\n                    smtp.UseDefaultCredentials = systemConstantRepository.GetBoolean(\u0022SMTPPassUserCredentials\u0022);\r\n                }\r\n\r\n                if (systemConstantRepository.GetBoolean(\u0022EmailsUseEmailServiceAccount\u0022))\r\n                {\r\n                    //Credentials will be ignored if UseDefaultCredentials is true so if \r\n                    smtp.UseDefaultCredentials = false;\r\n                    smtp.Credentials = new NetworkCredential(systemConstantRepository.GetString(\u0022EmailServiceUserName\u0022, string.Empty),\r\n                                                                systemConstantRepository.GetString(\u0022EmailServicePassword\u0022, string.Empty),\r\n                                                                systemConstantRepository.GetString(\u0022EmailServiceDomain\u0022, string.Empty));\r\n\r\n                    message.From = new MailAddress(systemConstantRepository.GetString(\u0022EmailServiceEmailAddress\u0022, string.Empty));\r\n\r\n                    string emailServiceReplyToEmail = systemConstantRepository.GetString(\u0022EmailServiceReplyToEmail\u0022, string.Empty);\r\n\r\n                    if (!string.IsNullOrEmpty(emailServiceReplyToEmail))\r\n                    {\r\n                        string[] replyToList = emailServiceReplyToEmail.Split(\u0027;\u0027);\r\n\r\n                        foreach (string replyTo in replyToList)\r\n                        {\r\n                            if (!string.IsNullOrEmpty(replyTo))\r\n                            {\r\n                                message.ReplyToList.Add(new MailAddress(replyTo));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                smtp.Send(message);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                IExceptionLog log = loggingFactory.CreateExceptionLog();\r\n                log.SaveData(ex);\r\n\r\n                // Return error inner exception if available (i.e.: Failure sending mail - The remote name could not be resolved: \u0027exchangeDummy\u0027)\r\n                errorMessage = $\u0022{ex.Message}\u0022 \u002B (ex.InnerException != null ? $\u0022 - {ex.InnerException.Message}\u0022 : \u0022\u0022);\r\n                success = false;\r\n            }\r\n            finally\r\n            {\r\n                smtp.Dispose();\r\n            }\r\n\r\n            return (success, errorMessage);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.Repositories.ICurrentUserRepository",
								"DataTorque.Iho.Interfaces.Common.ICurrentUser",
								"DataTorque.Iho.Interfaces.Common.IExceptionLog",
								"DataTorque.Iho.Interfaces.Factories.ILoggingFactory"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetBoolean",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetString",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger",
								"DataTorque.Iho.Interfaces.Repositories.ICurrentUserRepository GetCurrentUserID",
								"DataTorque.Iho.Interfaces.Repositories.ICurrentUserRepository GetCurrentUser",
								"DataTorque.Iho.Interfaces.Factories.ILoggingFactory CreateExceptionLog",
								"DataTorque.Iho.Interfaces.Common.IExceptionLog SaveData"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "IntegrationBankExtractFileParser",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Calculators.IIntegrationBankExtractFileParser"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Nullable",
						"Name": "GetDateTime",
						"Hash": "51BED73B20DBF8C181AF523A604F0B01D1E6A9E486B71EBD251CB62DF098BA3D",
						"Parameters": [
							"System.String dateString"
						],
						"Body": {
							"BodyText": "            DateTime? dateTime = null;\r\n\r\n            bool success = DateTime.TryParseExact(dateString, \u0022d/MM/yyyy\u0022, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime returnedDateTime);\r\n\r\n            if (success)\r\n            {\r\n                dateTime = returnedDateTime;\r\n            }\r\n\r\n            return dateTime;\r\n"
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Nullable",
						"Name": "GetTaxpayerId",
						"Hash": "8987F39E51ECBF1DA0A181E47511B477CDAF7858AA1A8EFEDF01F540CF57623D",
						"Parameters": [
							"System.String taxpayerIdentifier",
							"System.Nullable vatTaxTypeId",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            int? taxpayerId = null;\r\n            vatTaxTypeId = null;\r\n            ITaxpayerSummarySearchResult searchResult = taxpayerSummarySearcher.FindByTaxpayerNumber(taxpayerIdentifier, transaction);\r\n\r\n            if (searchResult == null)\r\n            {\r\n                ITaxpayerIDSearchResult taxpayerIdSearchResult = taxpayerIdentificationRepository.GetTaxpayerIDFromVATNumber(taxpayerIdentifier, transaction);\r\n                if (taxpayerIdSearchResult != null)\r\n                {\r\n\t                taxpayerId = taxpayerIdSearchResult.TaxpayerID;\r\n                    vatTaxTypeId = taxTypeRepository.GetValueAddedTaxID(transaction);\r\n                }\r\n            }\r\n            else\r\n            {\r\n\t            taxpayerId = searchResult.ID;\r\n            }\r\n\r\n            return taxpayerId;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult",
								"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher FindByTaxpayerNumber",
								"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository GetTaxpayerIDFromVATNumber",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult TaxpayerID",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository GetValueAddedTaxID",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult ID"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "PaymentReferenceCodeParser",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentReferenceCodeParser"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Int32",
						"Name": "GetTaxpayerID",
						"Hash": "FCA72274B6B90F0284309D4476848337584BB03B9A5C69BB7CBADC05ED8337DC",
						"Parameters": [
							"System.String paymentReferenceCode",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            int taxpayerID = 0;\r\n            int taxpayerNumberLength = systemConstantRepository.GetInteger(\u0022TaxpayerNumberLength\u0022, 0, transaction);\r\n            int paymentReferenceLength = systemConstantRepository.GetInteger(\u0022PaymentReferenceLength\u0022, 0, transaction);\r\n            // payment reference code should have a fixed length of 18\r\n            if (!string.IsNullOrEmpty(paymentReferenceCode) \u0026\u0026 paymentReferenceCode.Length == paymentReferenceLength)\r\n            {\r\n                // take the first 10 digits from the reference code, this should be the TIN minus the check characters\r\n                string taxpayerNumber = paymentReferenceCode.Substring(0, taxpayerNumberLength);\r\n                ITaxpayerSummarySearchResult searchResult = taxpayerSummarySearcher.FindByTaxpayerNumber(taxpayerNumber, transaction);\r\n                if (searchResult != null)\r\n                {\r\n                    taxpayerID = searchResult.ID;\r\n                }\r\n            }\r\n\r\n            return taxpayerID;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher FindByTaxpayerNumber",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult ID"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "PaymentUpdater",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "void",
						"Name": "UpdatePaymentFromBankReference",
						"Hash": "942EED011B91AE5C258B90F4D817C4B695612E711D078BCAEA8EE488F9E08152",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IPayment payment",
							"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader paymentReferenceHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            if (paymentReferenceHeader != null)\r\n            {\r\n                foreach (IOnlinePaymentBankTransferReferenceDetail referenceDetail in paymentReferenceHeader.Details)\r\n                {\r\n                    IPaymentTransaction paymentTransaction = paymentRepository.CreatePaymentTransaction(payment);\r\n                    paymentTransaction.PayeeTaxpayerID = referenceDetail.TaxpayerID;\r\n                    paymentTransaction.TaxTypeID = referenceDetail.TaxTypeID;\r\n                    paymentTransaction.YearID = referenceDetail.YearID;\r\n                    paymentTransaction.PeriodID = referenceDetail.PeriodID;\r\n                    paymentTransaction.AmountPaid = referenceDetail.AmountToBePaid;\r\n                    payment.Transactions.Add(paymentTransaction);\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader Details",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository CreatePaymentTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction PayeeTaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail TaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction TaxTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail TaxTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction YearID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail YearID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction PeriodID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail PeriodID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction AmountPaid",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail AmountToBePaid",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment Transactions"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "void",
						"Name": "UpdatePaymentFromAmount",
						"Hash": "153EEB3DB6651E63FBA1D44B0680D5439299391DA47F83E0B32FA9AB9AEEE428",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IPayment payment",
							"System.Decimal paymentAmount",
							"System.Int32 taxTypeId",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            // add a transaction against the taxpayer for the full amount, payment allocation will apply when the payment is saved\r\n            IPaymentTransaction paymentTransaction = paymentRepository.CreatePaymentTransaction(payment);\r\n            paymentTransaction.PayeeTaxpayerID = payment.TaxpayerID;\r\n            paymentTransaction.AmountPaid = paymentAmount;\r\n            paymentTransaction.TaxTypeID = taxTypeId;\r\n            payment.Transactions.Add(paymentTransaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository CreatePaymentTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction PayeeTaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment TaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction AmountPaid",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction TaxTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment Transactions"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "void",
						"Name": "UpdatePaymentNonCashType",
						"Hash": "E2E3508295344FA84462F71C26B41824218D4489790BA0C60696A493A81EA2D5",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IPayment payment",
							"System.String nonCashTypeCode",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IPaymentNonCashType paymentType = configurationRepository.GetPaymentNonCashTypes(transaction).FirstOrDefault(t =\u003E t.Code == nonCashTypeCode);\r\n            if (paymentType != null)\r\n            {\r\n                IPaymentCheque method = paymentRepository.CreatePaymentCheque();\r\n                method.PaymentNonCashTypeID = paymentType.ID;\r\n                method.ChequeAmount = payment.TotalTransactionAmount;\r\n                payment.Cheques.Add(method);\r\n                payment.ChequeAmount = method.ChequeAmount;\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentNonCashType",
								"DataTorque.Iho.Interfaces.Repositories.IConfigurationRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentCheque",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IConfigurationRepository GetPaymentNonCashTypes",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentNonCashType Code",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository CreatePaymentCheque",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentCheque PaymentNonCashTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentNonCashType ID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentCheque ChequeAmount",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment TotalTransactionAmount",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment Cheques",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment ChequeAmount"
							]
						}
					},
					{
						"ReturnType": "void",
						"Name": "DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater.UpdatePaymentToSuspenseAccount",
						"Hash": "D106159CBC2825886D6F0BF3ABA5B25C4D5017EA06F19C96284B91F909365410",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IPayment payment"
						],
						"Body": {
							"BodyText": "            int taxpayerSuspenseAccountId = systemConstantRepository.GetInteger(\u0022TaxpayerSuspenseAccountID\u0022); // -2\r\n            payment.TaxpayerID = taxpayerSuspenseAccountId;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment TaxpayerID"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "CreateSuspenseCaseForPayment",
						"Hash": "FC765082F62999C1DD49639F09E021E257F12EDC220BE70E5F8794100D034FA3",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IPayment payment",
							"System.Decimal paymentAmount",
							"System.Nullable taxTypeID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            if (payment.Transactions.Count == 0)\r\n            {\r\n                // add a transaction against the taxpayer for the full amount. Note: payment allocation will apply when the payment is saved\r\n                IPaymentTransaction paymentTransaction = paymentRepository.CreatePaymentTransaction(payment);\r\n                paymentTransaction.PayeeTaxpayerID = payment.TaxpayerID;\r\n                paymentTransaction.AmountPaid = paymentAmount;\r\n                paymentTransaction.TaxTypeID = taxTypeID ?? 0;\r\n                payment.Transactions.Add(paymentTransaction);\r\n            }\r\n\r\n            caseWorkflowRepository.CreateSuspenseCasesForPayment(payment, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository",
								"DataTorque.Iho.Interfaces.Repositories.ICaseWorkflowRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment Transactions",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository CreatePaymentTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction PayeeTaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment TaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction AmountPaid",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction TaxTypeID",
								"DataTorque.Iho.Interfaces.Repositories.ICaseWorkflowRepository CreateSuspenseCasesForPayment"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "RegistrationCalculator",
				"BaseType": "DataTorque.Iho.BusinessObjects.Calculators.RegistrationCalculator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "IsBalanceMonthVisible",
						"Hash": "E466FAB932AF0BD5201C27C80F08468384859FC72914D43AD47BCABF20E83134",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType taxType",
							"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency returnFrequency"
						],
						"Body": {
							"BodyText": "            if (taxType != null \u0026\u0026 taxType.Code == \u0022VATINT\u0022)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            return base.IsBalanceMonthVisible(taxType, returnFrequency);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType",
								"DataTorque.Iho.BusinessObjects.Calculators.RegistrationCalculator",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType Code"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "ReportRenderer",
				"BaseType": "DataTorque.Iho.BusinessObjects.Calculators.ReportRenderer",
				"InterfaceTypes": [
					"DataTorque.Iho.Interfaces.Calculators.IReportRenderer"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Threading.Tasks.Task",
						"Name": "RenderReport",
						"Hash": "1F7D276A40CF69FD7C8432F3D3C3253A38F33BAE11050B4894049DE0C217EB67",
						"Parameters": [
							"System.String type",
							"System.Boolean createStreams",
							"System.Nullable taxpayerID",
							"System.Nullable caseID",
							"DataTorque.Iho.Interfaces.BusinessObjects.IReport report",
							"System.Collections.Generic.Dictionary customReportParameters",
							"System.Collections.Generic.IList streams",
							"System.Int32 overrideLanguageID",
							"System.Nullable receiptID"
						],
						"Body": {
							"BodyText": "            bool enableAsynchronousLockWhenCreatingReports = systemConstantRepository.GetBoolean(\u0022EnableAsynchronousLockWhenCreatingReports\u0022, false);\r\n\r\n            if (enableAsynchronousLockWhenCreatingReports)\r\n            {\r\n                lock (_renderReportLock)\r\n                {\r\n                    return base.RenderReport(type, createStreams, taxpayerID, caseID, report, customReportParameters, streams, overrideLanguageID, receiptID);\r\n                }\r\n            }\r\n\r\n            return base.RenderReport(type, createStreams, taxpayerID, caseID, report, customReportParameters, streams, overrideLanguageID, receiptID);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.BusinessObjects.Calculators.ReportRenderer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReport"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetBoolean"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "StrikeOffDissolutionFileParser",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Calculators.IStrikeOffDissolutionFileParser"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Nullable",
						"Name": "GetTaxpayerID",
						"Hash": "338A0FB065C6C4A39E619711161F56EBCF914DB3548D14B41B8B38AD64772333",
						"Parameters": [
							"System.String companyNumber",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            int? taxpayerID = null;\r\n\r\n            ITaxpayerIDSearchResult taxpayerIDSearchResult = taxpayerIdentificationRepository.GetTaxpayerIDFromCompanyNumber(companyNumber, transaction);\r\n            if (taxpayerIDSearchResult != null)\r\n            {\r\n                taxpayerID = taxpayerIDSearchResult.TaxpayerID;\r\n            }\r\n\r\n            return taxpayerID;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult",
								"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository GetTaxpayerIDFromCompanyNumber",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult TaxpayerID"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Nullable",
						"Name": "GetDateTime",
						"Hash": "51BED73B20DBF8C181AF523A604F0B01D1E6A9E486B71EBD251CB62DF098BA3D",
						"Parameters": [
							"System.String dateString"
						],
						"Body": {
							"BodyText": "            DateTime? dateTime = null;\r\n\r\n            bool success = DateTime.TryParseExact(dateString, \u0022d/MM/yyyy\u0022, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime returnedDateTime);\r\n\r\n            if (success)\r\n            {\r\n                dateTime = returnedDateTime;\r\n            }\r\n\r\n            return dateTime;\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "TaxpayerRelationshipCalculator",
				"BaseType": "DataTorque.Iho.BusinessObjects.Calculators.TaxpayerRelationshipCalculator",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator"
				],
				"Methods": [
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "GroupVATRelationshipOverlapsWithVATTaxTypesRegistration",
						"Hash": "C99991275B11FFF1FA29DC176EDC5F167CCCE5C94CC0FF7DD2AC45151F770A86",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer currentTaxpayer",
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship taxpayerRelationship"
						],
						"Body": {
							"BodyText": "            IList\u003Cstring\u003E VATTaxTypeCodes = new List\u003Cstring\u003E\r\n            {\r\n                \u0022VAT\u0022\r\n            };\r\n\r\n            IEnumerable\u003CIRegistrationReturnFrequency\u003E selectedTaxTypeRegistrationFrequencies = currentTaxpayer.TaxTypeRegistrations\r\n                                                                                                              .Where(registration =\u003E VATTaxTypeCodes.Contains(registration.TaxType.Code) \u0026\u0026 registration.Selected)\r\n                                                                                                              .SelectMany(reg =\u003E reg.FrequencyHistory).ToList();\r\n            if (!selectedTaxTypeRegistrationFrequencies.Any())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return selectedTaxTypeRegistrationFrequencies.Any(rc =\u003E !((rc.CeasedDate ?? DateTime.MaxValue) \u003C taxpayerRelationship.CommenceDate\r\n                                                                      || (taxpayerRelationship.CeasedDate ?? DateTime.MaxValue) \u003C rc.CommenceDate));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer TaxTypeRegistrations",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration TaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration Selected",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration FrequencyHistory",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency CeasedDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CommenceDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CeasedDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency CommenceDate"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "TaxpayerAlreadyHasRelationshipWithVATGroup",
						"Hash": "B52F036736C897A075EBEF1948AE8D5D29E8461CE0B39FAEFE3AD536D351F192",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer currentTaxpayer",
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship taxpayerRelationship"
						],
						"Body": {
							"BodyText": "            IList\u003Cstring\u003E TaxpayerToVATGroupRelationTypeCodes = new List\u003Cstring\u003E\r\n            {\r\n                \u0022VATGroupMemberOf\u0022\r\n            };\r\n\r\n            IList\u003CITaxpayerRelationship\u003E VATGroupRelatedContacts = currentTaxpayer.RelatedContacts.Where(rc =\u003E TaxpayerToVATGroupRelationTypeCodes.Contains(rc.RelationshipType.Code) \u0026\u0026 rc.RelatedTaxpayerID != taxpayerRelationship.RelatedTaxpayerID).ToList();\r\n\r\n            return CalculateIfAnyRelationsOverlapWithCommenceAndCeaseDates(taxpayerRelationship.CommenceDate, taxpayerRelationship.CeasedDate, VATGroupRelatedContacts);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationshipType"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer RelatedContacts",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelationshipType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelatedTaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CommenceDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CeasedDate"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "CalculateIfAnyRelationsOverlapWithCommenceAndCeaseDates",
						"Hash": "2567B9CAC44B429662D848099F5FDCC973EFBDADDE534751D4B40F0074047A5F",
						"Parameters": [
							"System.DateTime commenceDate",
							"System.Nullable ceaseDate",
							"System.Collections.Generic.IList VATGroupRelatedContacts"
						],
						"Body": {
							"BodyText": "            if (!VATGroupRelatedContacts.Any())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            IEnumerable\u003CITaxpayerRelationship\u003E overlappingVATGroupRelationships = VATGroupRelatedContacts.Where(rc =\u003E\r\n                                                                                                                !((rc.CeasedDate ?? DateTime.MaxValue) \u003C commenceDate\r\n                                                                                                                  || (ceaseDate ?? DateTime.MaxValue) \u003C rc.CommenceDate));\r\n            return overlappingVATGroupRelationships.Any();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CeasedDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CommenceDate"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "RelatedTaxpayerAlreadyHasVATGroupRelationship",
						"Hash": "5BB654AFCA2FE73143DC42124EDA5B47ADA3B5B76AA91A4EDE9733A8A5E73699",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship taxpayerRelationship",
							"System.String relationshipTypeCode"
						],
						"Body": {
							"BodyText": "            IScalarQuery query = queryFactory.CreateScalarQuery(\u0022spf_GetCountOfTaxpayerRelationshipsOverlappingPeriod\u0022);\r\n            query.AddParameter(\u0022@TaxpayerId\u0022, SqlDbType.Int, 0, taxpayerRelationship.TaxpayerID);\r\n            query.AddParameter(\u0022@RelatedTaxpayerId\u0022, SqlDbType.Int, 0, taxpayerRelationship.RelatedTaxpayerID);\r\n            query.AddParameter(\u0022@RelationshipTypeCodes\u0022, SqlDbType.NVarChar, 0, relationshipTypeCode);\r\n            query.AddParameter(\u0022@CeaseDate\u0022, SqlDbType.DateTime, 0, taxpayerRelationship.CeasedDate);\r\n            query.AddParameter(\u0022@CommenceDate\u0022, SqlDbType.DateTime, 0, taxpayerRelationship.CommenceDate);\r\n            query.ExecuteQuery();\r\n\r\n            return (int)query.ScalarValue \u003E 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship"
							],
							"ReferencedStoredProcedures": [
								"spf_GetCountOfTaxpayerRelationshipsOverlappingPeriod"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship TaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelatedTaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CeasedDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CommenceDate",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "RelatedTaxpayerIsRegisteredForVAT",
						"Hash": "C0A26EB845B1657A5C1022E077A439B298F460B3E5E9B3B72CD42D979333BB72",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship taxpayerRelationship"
						],
						"Body": {
							"BodyText": "            ITaxpayerSummarySearchResult relatedTaxpayer = taxpayerSummarySearcher.FindByTaxpayerID(ParsingHelper.ParseInt(taxpayerRelationship.RelatedTaxpayerID.GetValueOrDefault()), taxpayerRelationship.DistributedSQLTransaction);\r\n\r\n            return relatedTaxpayer.Registrations.Any(r =\u003E r.TaxTypeCode == \u0022VAT\u0022\r\n                                                          \u0026\u0026 (r.CeasedDate is null\r\n                                                          || r.CeasedDate \u003E= taxpayerRelationship.CommenceDate));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerRegistrationSearchResult"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher FindByTaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelatedTaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship DistributedSQLTransaction",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult Registrations",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerRegistrationSearchResult TaxTypeCode",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerRegistrationSearchResult CeasedDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CommenceDate"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "IsDeleteEnableForTaxpayerRelationship",
						"Hash": "4445AFF54DCE025D6D6CE5D16DBAF37083FD38B80D1CC6E12E468833CAE8B453",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship taxpayerRelationship"
						],
						"Body": {
							"BodyText": "\r\n            // check to see if the current state of the taxpayer has 2 group members or a rep if i remove this one\r\n            if (taxpayerRelationship.RelationshipType.Code.ToLower() == \u0022vatgroupmemberof\u0022 || taxpayerRelationship.RelationshipType.Code.ToLower() == \u0022vatgroupTtaxrepresentativeof\u0022)\r\n            {\r\n                ITaxpayerRepository taxpayerRepository = ServiceLocator.Current.GetInstance\u003CITaxpayerRepository\u003E();\r\n                ITaxpayer groupVATaxpayer = taxpayerRepository.FindTaxpayer(taxpayerRelationship.RelatedTaxpayerID.GetValueOrDefault(), null);\r\n\r\n                if (groupVATaxpayer?.ID \u003E 0)\r\n                {\r\n                    if (groupVATaxpayer.RelatedContacts.Count(c =\u003E c.RelatedTaxpayerID != taxpayerRelationship.TaxpayerID \u0026\u0026 c.IsActive \u0026\u0026 !c.CeasedDate.HasValue \u0026\u0026 c.RelationshipType.Code.ToLower() == \u0022vatgroupmember\u0022) \u003C 2)\r\n                    {\r\n                        return false;\r\n                    }\r\n\r\n                    if (groupVATaxpayer.RelatedContacts.Count(c =\u003E c.RelatedTaxpayerID != taxpayerRelationship.TaxpayerID \u0026\u0026 c.IsActive \u0026\u0026 !c.CeasedDate.HasValue \u0026\u0026 c.RelationshipType.Code.ToLower() == \u0022vatgrouptaxrepresentative\u0022) \u003C 1)\r\n                    {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return taxpayerRelationship.RelationshipType.Code != \u0022VATGroupTaxRepresentativeOf\u0022;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationshipType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelationshipType",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository FindTaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelatedTaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer RelatedContacts",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship TaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship IsActive",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CeasedDate"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "TaxPeriodCalculator",
				"BaseType": "DataTorque.Iho.BusinessObjects.Calculators.TaxPeriodCalculator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.DateTime",
						"Name": "CalculateNextPeriodStartDateForFrequency",
						"Hash": "4DE36A5820C70A48839556447414B7806B69DAC7446B92E7859EB5498456BB41",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency registrationReturnFrequency",
							"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency selectedFrequency",
							"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency existingFrequency"
						],
						"Body": {
							"BodyText": "            DateTime result = executingEnvironment.TodayDate;\r\n            if (registrationReturnFrequency != null)\r\n            {\r\n                if (registrationReturnFrequency.CeasedDate.HasValue)\r\n                {\r\n                    DateTime fromDate = registrationReturnFrequency.CeasedDate.Value;\r\n                    if (registrationReturnFrequency.BalanceMonthNumber.HasValue)\r\n                    {\r\n                        fromDate = HandleBalanceMonth(fromDate, registrationReturnFrequency.BalanceMonthNumber.Value);\r\n                    }\r\n                    result = GetNextPeriodStartDate(selectedFrequency, fromDate);\r\n                }\r\n                else if (existingFrequency != null)\r\n                {\r\n                    DateTime fromDate2 = executingEnvironment.TodayDate;\r\n                    if (registrationReturnFrequency.CommenceDate.HasValue \u0026\u0026 registrationReturnFrequency.CommenceDate.Value \u003E executingEnvironment.TodayDate)\r\n                    {\r\n                        fromDate2 = registrationReturnFrequency.CommenceDate.Value;\r\n                    }\r\n                    if (registrationReturnFrequency.BalanceMonthNumber.HasValue)\r\n                    {\r\n                        fromDate2 = HandleBalanceMonth(fromDate2, registrationReturnFrequency.BalanceMonthNumber.Value);\r\n                        result = GetNextPeriodStartDate(selectedFrequency, fromDate2);\r\n                    }\r\n                    else\r\n                    {\r\n                        result = GetNextPeriodStartDate(selectedFrequency, GetNextPeriodStartDate(existingFrequency, fromDate2).AddDays(-1.0));\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment TodayDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency CeasedDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency BalanceMonthNumber",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency CommenceDate"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.DateTime",
						"Name": "GetNextPeriodStartDate",
						"Hash": "6A96EA9547279A0CBF88ABC275C44DB173C30212BA29AABDEFA89EFC44348CB2",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency returnFrequency",
							"System.DateTime fromDate"
						],
						"Body": {
							"BodyText": "            // Note: this is different from Iho.\r\n            // Iho isn\u0027t doing null checks after getting a period, so it throws a generic exception.\r\n            // in IOM, VATINT quarterly return frequencies do not include the first period, so there\u0027s a 3 month window for each\r\n            // frequency where there is no period, so if we don\u0027t find one, then we choose the first period from the list. \r\n            // if we STILL don\u0027t find one, then we throw a nice friendly exception.\r\n            IPeriodName fromPeriod = taxPeriodRepository.FindByReturnFrequencyAndMonth(returnFrequency.ID, fromDate.Month);\r\n            if (fromPeriod == null)\r\n            {\r\n                fromPeriod = taxPeriodRepository.FindByReturnFrequency(returnFrequency.ID).OrderBy(p =\u003E p.PeriodSortOrder).FirstOrDefault();\r\n                if (fromPeriod == null)\r\n                {\r\n                    throw new Exception($\u0022Unable to find next period for {returnFrequency.Description} on {fromDate:dd/MM/yyyy}\u0022);\r\n                }\r\n            }\r\n\r\n            return taxPeriodRepository.FindNextPeriod(fromPeriod.ID, fromDate.Year).PeriodFromDate.GetValueOrDefault();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IPeriodName",
								"DataTorque.Iho.Interfaces.Repositories.ITaxPeriodRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ITaxPeriodRepository FindByReturnFrequencyAndMonth",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency ID",
								"DataTorque.Iho.Interfaces.Repositories.ITaxPeriodRepository FindByReturnFrequency",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPeriodName PeriodSortOrder",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency Description",
								"DataTorque.Iho.Interfaces.Repositories.ITaxPeriodRepository FindNextPeriod",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPeriodName ID"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.DateTime",
						"Name": "HandleBalanceMonth",
						"Hash": "61B3BF2C0A7311EFDB9ED21744856D80BA23EA5F534708FD3587C488185E5485",
						"Parameters": [
							"System.DateTime fromDate",
							"System.Int32 balanceMonth"
						],
						"Body": {
							"BodyText": "            if (balanceMonth \u003E= fromDate.Month)\r\n            {\r\n                fromDate = new DateTime(fromDate.Year, balanceMonth, DateTime.DaysInMonth(fromDate.Year, balanceMonth));\r\n            }\r\n            else\r\n            {\r\n                fromDate = new DateTime(fromDate.Year \u002B 1, balanceMonth, DateTime.DaysInMonth(fromDate.Year \u002B 1, balanceMonth));\r\n            }\r\n\r\n            return fromDate;\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "TaxReturnCalculator",
				"BaseType": "DataTorque.Iho.BusinessObjects.Calculators.TaxReturnCalculator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Calculators.ICalculationString",
						"Name": "ResolveReferencesForTaxReturn",
						"Hash": "935250D0282F047967D4BF7C896C0433FD295AB69701AF13EA7303381DDDDD45",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn taxReturn",
							"System.String calcString",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            ITaxReturn parentReturn = null;\r\n            ITaxReturnItemDetail itemDetail = null;\r\n            if (taxReturn.TaxReturnHeader is ISubTaxReturnHeader subTaxReturnHeader)\r\n            {\r\n                parentReturn = subTaxReturnHeader.DetailItem.TaxReturnItemDetail.TaxReturnItem.TaxReturn;\r\n                itemDetail = subTaxReturnHeader.DetailItem.TaxReturnItemDetail;\r\n            }\r\n\r\n            return ResolveReferences(taxReturn, parentReturn, itemDetail, null, calcString, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader",
								"DataTorque.Iho.Interfaces.BusinessObjects.ISubTaxReturnHeader",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem",
								"DataTorque.Iho.Interfaces.Calculators.ICalculationString",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn TaxReturnHeader",
								"DataTorque.Iho.Interfaces.BusinessObjects.ISubTaxReturnHeader DetailItem"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Calculators.ICalculationString",
						"Name": "ResolveReferencesForItemDetail",
						"Hash": "6CDCDDCE46D09A26AA95A33ADAF6026FA7B0E41DFDEE0020466DEF55A6E039D4",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail itemDetail",
							"System.String calcString",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            return ResolveReferences(itemDetail.TaxReturnItem.TaxReturn, itemDetail.TaxReturnItem.TaxReturn, itemDetail, itemDetail.DetailItemList, calcString, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Calculators.ICalculationString",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail TaxReturnItem",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail DetailItemList"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "TaxReturnItemDetailItemHasValue",
						"Hash": "A8E8711B59454251834CD3D28D0CC702D62B48E68AAFCD53F1AFF061E7111378",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem itemDetailItem"
						],
						"Body": {
							"BodyText": "            bool itemHasValue = base.TaxReturnItemDetailItemHasValue(itemDetailItem);\r\n\r\n            //Fix for the issue of tax return detail question set as money and percentage data type with IsMandatory=1 and AllowZero=1\r\n            \r\n            if (itemHasValue)\r\n            {\r\n                switch (itemDetailItem.DetailQuestion.DataType)\r\n                {\r\n                    case DetailQuestionDataType.Currency:\r\n                    case DetailQuestionDataType.Numeric:\r\n                    case DetailQuestionDataType.Percent:\r\n                        if (itemDetailItem.DetailQuestion.IsMandatory \u0026\u0026 itemDetailItem.DetailQuestion.AllowZero)\r\n                        {\r\n                            if (itemDetailItem.AnswerMoney == null)\r\n                            {\r\n                                itemHasValue = false;\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            return itemHasValue;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.Calculators.TaxReturnCalculator",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnDetailQuestion"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem DetailQuestion",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType Currency",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType Numeric",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType Percent",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem AnswerMoney"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "DataTorque.Iho.BusinessObjects.Calculators.CalculationString",
						"Name": "ResolveReferences",
						"Hash": "0360ACB05AEBA1A447AE66B288EF9C1DBF6E56FC90306D4F83849CA1895FE55E",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn taxReturn",
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn parentReturn",
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail itemDetail",
							"DataTorque.Iho.Interfaces.Common.ISmartBindingList detailItemList",
							"System.String calcString",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            Dictionary\u003Cstring, string\u003E replacements = new Dictionary\u003Cstring, string\u003E();\r\n            void TryAdd(string k, string v)\r\n            {\r\n                if (replacements.ContainsKey(k))\r\n                {\r\n                    replacements[k] = v;\r\n                    return;\r\n                }\r\n\r\n                replacements.Add(k, v);\r\n            }\r\n\r\n            // Note: use invariant culture as the scripting engine doesn\u0027t support commas as a decimal separator.\r\n\r\n            //R_constant means to get the values from the parent return\r\n            if (parentReturn != null)\r\n            {\r\n                foreach (Match match in R_constantsRegex.Matches(calcString))\r\n                {\r\n                    string matchKey = match.Groups[\u0022R_constant\u0022].Value;\r\n                    if (parentReturn.Design.Constants != null \u0026\u0026 parentReturn.Design.Constants.TryGetValue(matchKey, out ITaxReturnDesignConstant designConstant))\r\n                    {\r\n                        string key = $\u0022R_constant[{matchKey}]\u0022;\r\n                        string value = designConstant.Amount.ToString(\u0022F\u0022, CultureInfo.InvariantCulture);\r\n                        calcString = calcString.Replace(key, value);\r\n                        TryAdd(key, value);\r\n                    }\r\n                }\r\n            }\r\n\r\n            foreach (Match match in constantsRegex.Matches(calcString))\r\n            {\r\n                string matchKey = match.Groups[\u0022constant\u0022].Value;\r\n                if (taxReturn.Design.Constants != null \u0026\u0026 taxReturn.Design.Constants.TryGetValue(matchKey, out ITaxReturnDesignConstant designConstant))\r\n                {\r\n                    string key = $\u0022constant[{matchKey}]\u0022;\r\n                    string value = designConstant.Amount.ToString(\u0022F\u0022, CultureInfo.InvariantCulture);\r\n                    calcString = calcString.Replace(key, value);\r\n                    TryAdd(key, value);\r\n                }\r\n            }\r\n\r\n            foreach (Match match in codeRegex.Matches(calcString))\r\n            {\r\n                string matchString = match.Groups[\u0022Code\u0022].Value;\r\n\r\n                //a sub return can load values from detail items or the parent return\r\n                //R_ = parent return, D_ = detail item\r\n                if (matchString.ToUpper().StartsWith(\u0022R_\u0022))\r\n                {\r\n                    string key = $\u0022[{matchString}]\u0022;\r\n                    string value = ResolveReferencesForTaxReturn(parentReturn, $\u0022[{matchString.Substring(2)}]\u0022).ToString();\r\n                    calcString = calcString.Replace(key, value);\r\n                    TryAdd(key, value);\r\n                }\r\n                else if (matchString.ToUpper().StartsWith(\u0022D_\u0022))\r\n                {\r\n                    string key = $\u0022[{matchString}]\u0022;\r\n                    string value = ResolveReferencesForItemDetail(itemDetail, $\u0022[{matchString.Substring(2)}]\u0022).ToString();\r\n                    calcString = calcString.Replace(key, value);\r\n                    TryAdd(key, value);\r\n                }\r\n                else if (detailItemList != null \u0026\u0026 matchString.StartsWith(\u0022\u03A3_\u0022))\r\n                {\r\n                    string key = $\u0022[{matchString}]\u0022;\r\n                    string dqCode = matchString.Replace(\u0022\u03A3_\u0022, \u0022\u0022);\r\n\r\n                    ISmartBindingList\u003CITaxReturnItemDetail\u003E parentDetailList = itemDetail.TaxReturnItem.DetailList;\r\n                    string value = parentDetailList.SelectMany(d =\u003E d.DetailItemList)\r\n                        .Where(d =\u003E d.DetailQuestion.Code == dqCode)\r\n                        .Sum(d =\u003E d.AnswerMoney.GetValueOrDefault())\r\n                        .ToString(CultureInfo.InvariantCulture);\r\n\r\n                    calcString = calcString.Replace(key, value);\r\n                    TryAdd(key, value);\r\n                }\r\n                else if (detailItemList != null)\r\n                {\r\n                    string code = ParsingHelper.ParseString(matchString);\r\n                    ITaxReturnItemDetailItem item = detailItemList.FirstOrDefault(t =\u003E t.DetailQuestion.Code == code);\r\n                    string cellValue = string.Empty;\r\n                    if (item != null)\r\n                    {\r\n                        switch (item.DetailQuestion.DataType)\r\n                        {\r\n                            case DetailQuestionDataType.NVarChar:\r\n                            case DetailQuestionDataType.CheckboxList:\r\n                                string cellString = item.AnswerString;\r\n                                cellValue = cellString;\r\n                                break;\r\n                            case DetailQuestionDataType.Date:\r\n                                if (item.AnswerDate != null)\r\n                                {\r\n                                    DateTime cellDate = item.AnswerDate.GetValueOrDefault();\r\n                                    cellValue = cellDate.ToString(\u0022yyyy-MM-dd\u0022);\r\n                                }\r\n\r\n                                break;\r\n                            case DetailQuestionDataType.Bit:\r\n                                bool? cellBool = item.AnswerBool;\r\n                                cellValue = (cellBool.HasValue \u0026\u0026 cellBool.Value).ToString().ToLower();\r\n                                break;\r\n                            case DetailQuestionDataType.Currency:\r\n                            case DetailQuestionDataType.Numeric:\r\n                            case DetailQuestionDataType.Percent:\r\n                                decimal cellDecimal = item.AnswerMoney.GetValueOrDefault();\r\n                                cellValue = cellDecimal.ToString(\u0022F\u0022, CultureInfo.InvariantCulture);\r\n                                break;\r\n                            default:\r\n                                int? cellLookupID = item.AnswerInt;\r\n                                cellValue = cellLookupID.GetValueOrDefault().ToString();\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    TryAdd(match.Value, cellValue);\r\n                    calcString = calcString.Replace(match.Value, cellValue);\r\n                }\r\n                else\r\n                {\r\n                    string code = ParsingHelper.ParseString(matchString);\r\n                    ITaxReturnItem item = taxReturn.TaxReturnItemList.FirstOrDefault(t =\u003E t.Question.Code == code);\r\n                    string cellValue = string.Empty;\r\n                    bool isAssessment = taxReturn.Assessment || taxReturn.CurrentMode == TaxReturnMode.Assessment;\r\n                    if (item != null)\r\n                    {\r\n                        switch (item.ReturnQuestionTypeID)\r\n                        {\r\n                            case ReturnQuestionTypes.Text:\r\n                            case ReturnQuestionTypes.CheckboxList:\r\n                                string cellString = isAssessment ? item.AssessmentText : item.ReturnText;\r\n                                cellValue = cellString;\r\n                                break;\r\n                            case ReturnQuestionTypes.Date:\r\n                                DateTime? cellDate = isAssessment ? item.AssessmentDate : item.ReturnDate;\r\n                                if (cellDate.HasValue)\r\n                                {\r\n                                    cellValue = cellDate.Value.ToString(\u0022yyyy-MM-dd\u0022);\r\n                                }\r\n\r\n                                break;\r\n                            case ReturnQuestionTypes.YesNo:\r\n                            case ReturnQuestionTypes.CheckBox:\r\n                                bool? cellBool = isAssessment ? item.AssessmentYesNo : item.ReturnYesNo;\r\n                                cellValue = cellBool.HasValue ? cellBool.Value.ToString().ToLower() : ParsingHelper.ParseBool(cellBool).ToString().ToLower();\r\n                                break;\r\n                            case ReturnQuestionTypes.Integer:\r\n                                decimal? cellIntValue = isAssessment ? item.Assessment : item.Return;\r\n                                cellValue = ParsingHelper.ParseInt(cellIntValue).ToString();\r\n                                break;\r\n                            case ReturnQuestionTypes.DropDown:\r\n                            case ReturnQuestionTypes.TIN:\r\n                                int? cellLookupID = isAssessment ? item.AssessmentLookupID : item.ReturnLookupID;\r\n                                cellValue = cellLookupID.GetValueOrDefault().ToString();\r\n                                break;\r\n                            default:\r\n                                decimal cellDecimal = isAssessment ? item.Assessment.GetValueOrDefault() : item.Return.GetValueOrDefault();\r\n                                //This is the update from iho, changing to \u0027F4\u0027 instead of \u0027F\u0027 (which counts as \u0027F2\u0027)\r\n                                cellValue = cellDecimal.ToString(\u0022F4\u0022, CultureInfo.InvariantCulture);\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    TryAdd(match.Value, cellValue);\r\n                    calcString = calcString.Replace(match.Value, cellValue);\r\n                }\r\n            }\r\n\r\n            // then all calculated values\r\n            foreach (Match match in hashCodeHashRegex.Matches(calcString))\r\n            {\r\n                string code = ParsingHelper.ParseString(match.Groups[\u0022Code\u0022].Value);\r\n                ITaxReturnItem item = taxReturn.TaxReturnItemList.FirstOrDefault(t =\u003E t.Question.Code == code);\r\n                decimal cellValue = 0;\r\n                if (item != null)\r\n                {\r\n                    // we don\u0027t have calculated values for other question types (date, lookup, text, etc.) so always use same property for value\r\n                    cellValue = item.CalculatedValue.GetValueOrDefault();\r\n                }\r\n\r\n                string key = match.Value;\r\n                string value = cellValue.ToString(\u0022F\u0022, CultureInfo.InvariantCulture);\r\n                calcString = calcString.Replace(key, value);\r\n                TryAdd(key, value);\r\n            }\r\n\r\n            // then all embedded stored procs\r\n            foreach (Match match in procedureRegEx.Matches(calcString))\r\n            {\r\n                string proc = match.Groups[\u0022StoredProc\u0022].Value;\r\n\r\n                // Attempt to find a detail taxpayer record if one exists and replace the parameter in the proc if it exists.\r\n\r\n                // This would be found in an item detail record so if there is an @DetailTaxpayerID parameter we must replace it with\r\n                // the ID for this detail, but only if there is a relevant (and answered) Detail Question\r\n                // of type TIN, TINOrName, or TINWithoutName.\r\n                // The item detail records can come from the standard detail item list as passed in or from the parent record for a sub return.\r\n\r\n                //Note: parent return is only populated when the return in question is a sub return otherwise it will be null\r\n                if (itemDetail != null \u0026\u0026 detailItemList != null)\r\n                {\r\n                    int? detailTaxpayerID = detailItemList.FirstOrDefault(di =\u003E\r\n                                                                          di.DetailQuestion.DataType == DetailQuestionDataType.TIN\r\n                                                                          || di.DetailQuestion.DataType == DetailQuestionDataType.TINOrName\r\n                                                                          || di.DetailQuestion.DataType == DetailQuestionDataType.TINWithoutName)?.AnswerInt;\r\n\r\n                    proc = proc.Replace(\u0022@DetailTaxpayerID\u0022, $\u0022@TaxpayerID={detailTaxpayerID ?? -1}\u0022);\r\n                }\r\n                else if (parentReturn != null \u0026\u0026 itemDetail != null \u0026\u0026 itemDetail.DetailItemList != null)\r\n                {\r\n                    // Get the detail taxpayerid from the parent detail row when we are in a sub return\r\n                    // for sub returns this can be the detail grid row that called the sub return.\r\n                    int? detailTaxpayerID = itemDetail.DetailItemList.FirstOrDefault(di =\u003E\r\n                                                                                     di.DetailQuestion.DataType == DetailQuestionDataType.TIN\r\n                                                                                     || di.DetailQuestion.DataType == DetailQuestionDataType.TINOrName\r\n                                                                                     || di.DetailQuestion.DataType == DetailQuestionDataType.TINWithoutName)?.AnswerInt;\r\n\r\n                    proc = proc.Replace(\u0022@DetailTaxpayerID\u0022, $\u0022@TaxpayerID={detailTaxpayerID ?? -1}\u0022);\r\n                }\r\n\r\n                string key = match.Value;\r\n                string value = GetValueFromProcedure(proc, taxReturn, itemDetail?.TaxReturnItem, transaction);\r\n                // Defer calc string replacement until later, in order to accommodate JSON strings.\r\n                TryAdd(key, value);\r\n            }\r\n\r\n            // Remove function definitions\r\n            calcString = functionRegex.Replace(calcString, \u0022\u0022);\r\n\r\n            // Replace any stored proc tokens here...\r\n            foreach (Match match in procedureRegEx.Matches(calcString))\r\n            {\r\n                calcString = calcString.Replace(match.Value, replacements[match.Value]);\r\n            }\r\n\r\n            void ReplaceAndTryAdd(string keyword, Func\u003Cstring\u003E getValue)\r\n            {\r\n                if (!calcString.Contains(keyword))\r\n                {\r\n                    return;\r\n                }\r\n\r\n                string replacement = getValue();\r\n                calcString = calcString.Replace(keyword, replacement);\r\n                TryAdd(keyword, replacement);\r\n            }\r\n\r\n            // finally, allow for special keywords that have known values\r\n            ReplaceAndTryAdd(\u0022chkAss\u0022, () =\u003E taxReturn.Assessment.ToString().ToLower());\r\n            ReplaceAndTryAdd(\u0022IsResident\u0022, () =\u003E taxReturn.TaxReturnHeader.CurrentTaxpayer.ResidentForTax.ToString().ToLower());\r\n            ReplaceAndTryAdd(\u0022tol\u0022, () =\u003E taxReturn.CalculationTolerance.ToString(CultureInfo.InvariantCulture));\r\n            ReplaceAndTryAdd(\u0022\u003CCurrentTaxpayerID\u003E\u0022, () =\u003E taxReturn.TaxpayerID.ToString(CultureInfo.InvariantCulture));\r\n            ReplaceAndTryAdd(\u0022\u003CYearID\u003E\u0022, () =\u003E taxReturn.YearID.ToString());\r\n            ReplaceAndTryAdd(\u0022\u003CPeriodID\u003E\u0022, () =\u003E taxReturn.PeriodID.ToString());\r\n            ReplaceAndTryAdd(\u0022\u003CPeriodStartDate\u003E\u0022, () =\u003E taxReturn.PeriodStartDate?.ToString(CultureInfo.InvariantCulture));\r\n            ReplaceAndTryAdd(\u0022\u003CPeriodEndDate\u003E\u0022, () =\u003E taxReturn.PeriodEndDate?.ToString(CultureInfo.InvariantCulture));\r\n            ReplaceAndTryAdd(\u0022\u003CPeriodStartDateDisplay\u003E\u0022, () =\u003E taxReturn.PeriodStartDate?.ToShortDateString());\r\n            ReplaceAndTryAdd(\u0022\u003CPeriodEndDateDisplay\u003E\u0022, () =\u003E taxReturn.PeriodEndDate?.ToShortDateString());\r\n            ReplaceAndTryAdd(\u0022\u003CIndex\u003E\u0022, () =\u003E GetRowIndex(itemDetail));\r\n\r\n            return new CalculationString(calcString, replacements);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnDesign",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnDesignConstant",
								"DataTorque.Iho.Interfaces.Calculators.ICalculationString",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnDetailQuestion",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnQuestion",
								"DataTorque.Iho.Interfaces.TaxReturn.TaxReturnMode",
								"DataTorque.Iho.Interfaces.TaxReturn.ReturnQuestionTypes",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader",
								"DataTorque.Iho.BusinessObjects.Calculators.CalculationString"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn Design",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnDesignConstant Amount",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail TaxReturnItem",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail DetailItemList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail DetailQuestion",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail AnswerMoney",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList FirstOrDefault",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem DetailQuestion",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType NVarChar",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType CheckboxList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem AnswerString",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType Date",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem AnswerDate",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType Bit",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem AnswerBool",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType Currency",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType Numeric",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType Percent",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem AnswerMoney",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem AnswerInt",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn TaxReturnItemList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem Question",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn Assessment",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn CurrentMode",
								"DataTorque.Iho.Interfaces.TaxReturn.TaxReturnMode Assessment",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem ReturnQuestionTypeID",
								"DataTorque.Iho.Interfaces.TaxReturn.ReturnQuestionTypes Text",
								"DataTorque.Iho.Interfaces.TaxReturn.ReturnQuestionTypes CheckboxList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem AssessmentText",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem ReturnText",
								"DataTorque.Iho.Interfaces.TaxReturn.ReturnQuestionTypes Date",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem AssessmentDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem ReturnDate",
								"DataTorque.Iho.Interfaces.TaxReturn.ReturnQuestionTypes YesNo",
								"DataTorque.Iho.Interfaces.TaxReturn.ReturnQuestionTypes CheckBox",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem AssessmentYesNo",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem ReturnYesNo",
								"DataTorque.Iho.Interfaces.TaxReturn.ReturnQuestionTypes Integer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem Assessment",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem Return",
								"DataTorque.Iho.Interfaces.TaxReturn.ReturnQuestionTypes DropDown",
								"DataTorque.Iho.Interfaces.TaxReturn.ReturnQuestionTypes TIN",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem AssessmentLookupID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem ReturnLookupID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem CalculatedValue",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType TIN",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType TINOrName",
								"DataTorque.Iho.Interfaces.TaxReturn.DetailQuestionDataType TINWithoutName",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn TaxReturnHeader",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn CalculationTolerance",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn TaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn YearID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn PeriodID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn PeriodStartDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn PeriodEndDate"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.String",
						"Name": "GetValueFromProcedure",
						"Hash": "6AC05B5BFCC1D5C87F818749367EF14E837CBE76700E418F1F713519E0011C7B",
						"Parameters": [
							"System.String queryText",
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn taxReturn",
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem tri",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool useStoredProcedureCache = UseStoredProcedureCache \u0026\u0026 tri != null;\r\n            ConcurrentDictionary\u003Cstring, object\u003E procCache = useStoredProcedureCache ? tri.StoredProcedureCache : null;\r\n\r\n            int firstSpace = queryText.IndexOf(\u0022 \u0022, StringComparison.Ordinal);\r\n            string storedProcedureName = firstSpace \u003E 0 ? queryText.Substring(0, firstSpace) : queryText;\r\n\r\n            queryText = ResolveReferencesForTaxReturn(taxReturn, queryText, transaction).ToString();\r\n            if (!string.IsNullOrWhiteSpace(queryText) \u0026\u0026 useStoredProcedureCache \u0026\u0026 procCache.TryGetValue(queryText, out object value))\r\n            {\r\n                return value?.ToString();\r\n            }\r\n\r\n            IScalarQuery query = queryFactory.CreateScalarQuery(storedProcedureName, transaction);\r\n            query = (IScalarQuery)ExecuteQueryForTaxReturn(query, queryText, taxReturn, transaction: transaction);\r\n            object scalarValue = query.ScalarValue;\r\n\r\n            if (useStoredProcedureCache)\r\n            {\r\n                if (!string.IsNullOrWhiteSpace(queryText))\r\n                {\r\n                    procCache[queryText] = scalarValue;\r\n                }\r\n            }\r\n            else if (scalarValue == null)\r\n            {\r\n                scalarValue = \u0022(undefined)\u0022;\r\n            }\r\n\r\n            // scripting engine doesn\u0027t support comma decimal separators so convert this to string using invariant culture\r\n            return Convert.ToString(scalarValue, CultureInfo.InvariantCulture);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem",
								"DataTorque.Iho.Interfaces.Calculators.ICalculationString",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IQuery"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem StoredProcedureCache",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.String",
						"Name": "GetRowIndex",
						"Hash": "6DD2461EA75625A1834F6AF09CF3998864E2A0AEE7AD90CF403266E50F419C12",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail itemDetail"
						],
						"Body": {
							"BodyText": "            ConcurrentDictionary\u003CGuid, int\u003E dict = itemDetail.TaxReturnItem.ItemDetailIndexDictionary;\r\n            if (dict != null \u0026\u0026 dict.Any() \u0026\u0026 dict.TryGetValue(itemDetail.Guid, out int value))\r\n            {\r\n                return value.ToString();\r\n            }\r\n\r\n            return (itemDetail.TaxReturnItem.DetailList.IndexOf(itemDetail) \u002B 1).ToString();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail TaxReturnItem",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail Guid"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Calculators",
				"Name": "VATNumberCalculator",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Calculators.IVATNumberCalculator"
				],
				"Methods": [
					{
						"Modifiers": "public",
						"ReturnType": "System.String",
						"Name": "GenerateVATNumber",
						"Hash": "E6AB8253F7CC068DB5858D2A9E757D4CAFEEC1F5094E935BE02E64C3C1AC1302",
						"Parameters": [
							"System.Int32 taxpayerID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            INonQuery query = queryFactory.CreateNonQuery(\u0022spf_VATNumber_insert\u0022, transaction);\r\n            query.AddParameter(\u0022@TaxpayerID\u0022, SqlDbType.Int, 0, taxpayerID);\r\n            query.AddParameter(\u0022@VATNumber\u0022, SqlDbType.NVarChar, 255, null, ParameterDirection.InputOutput);\r\n            query.ExecuteQuery();\r\n\r\n            return query.Parameters[2].Value.ToString();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IQueryParameter"
							],
							"ReferencedStoredProcedures": [
								"spf_VATNumber_insert"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateNonQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery Parameters"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.String",
						"Name": "GenerateVATNumberForTaxpayer",
						"Hash": "914D512B6CB5F89BB709ED9B4182935854E4B2F970C8FBF313BF284CF0758918",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer taxpayer",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            string vatNumber = null;\r\n            IRegistration vatRegistration = taxpayer.TaxTypeRegistrations.Where(ttr =\u003E ttr.TaxType.Code == VATTaxTypeCode).OrderByDescending(ttr =\u003E ttr.CurrentCommenceDate).FirstOrDefault();\r\n\r\n            if (vatRegistration != null \u0026\u0026 vatRegistration.Selected \u0026\u0026 vatRegistration.RegistrationStatusID != (int)RegistrationStatus.Cancelled)\r\n            {\r\n                IList\u003CITaxpayerIdentificationType\u003E identificationTypes = configurationRepository.GetTaxpayerIdentificationTypesForTaxpayerType(taxpayer.TaxpayerTypeID, taxpayer.OrganisationTypeID, transaction);\r\n\r\n                ITaxpayerIdentificationType vatIdentificationType = identificationTypes != null ? identificationTypes.FirstOrDefault(it =\u003E it.Code == VATIdentificationTypeCode) : null;\r\n\r\n                if (vatIdentificationType != null \u0026\u0026 !taxpayer.IdentificationNumbers.Any(r =\u003E r.IdentificationType.Code == VATIdentificationTypeCode \u0026\u0026 (!r.DateOfExpiry.HasValue || r.DateOfExpiry \u003E vatRegistration.CurrentCommenceDate)))\r\n                {\r\n                    vatNumber = GenerateVATNumber(taxpayer.ID, transaction);\r\n\r\n                    ITaxpayerIdentificationNumber vatIdentificationNumber = new TaxpayerIdentificationNumber(queryBuilder, configurationRepository, securityRepository, taxpayerIdentificationNumberValidator);\r\n                    vatIdentificationNumber.IdentificationTypeID = vatIdentificationType.ID;\r\n                    vatIdentificationNumber.IdentificationType = vatIdentificationType;\r\n                    vatIdentificationNumber.IdentificationNumber = vatNumber;\r\n                    vatIdentificationNumber.DateOfIssue = vatRegistration.CurrentCommenceDate;\r\n                    vatIdentificationNumber.DateOfExpiry = null;\r\n                    vatIdentificationNumber.CountryID = standardLookupRepository.FindItemByCode(\u0022Country\u0022, IsleOfManCountryCode).ID;\r\n                    taxpayer.IdentificationNumbers.Add(vatIdentificationNumber);\r\n                }\r\n            }\r\n\r\n            return vatNumber;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType",
								"DataTorque.Iho.Interfaces.Taxpayer.RegistrationStatus",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationType",
								"DataTorque.Iho.Interfaces.Repositories.IConfigurationRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.Repositories.ISecurityRepository",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer TaxTypeRegistrations",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration TaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration CurrentCommenceDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration Selected",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration RegistrationStatusID",
								"DataTorque.Iho.Interfaces.Taxpayer.RegistrationStatus Cancelled",
								"DataTorque.Iho.Interfaces.Repositories.IConfigurationRepository GetTaxpayerIdentificationTypesForTaxpayerType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer TaxpayerTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer OrganisationTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationType Code",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer IdentificationNumbers",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber IdentificationType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber DateOfExpiry",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer ID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber IdentificationTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationType ID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber IdentificationNumber",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber DateOfIssue",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber CountryID",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Cases",
				"Name": "ObjectionCaseProcessor",
				"BaseType": "DataTorque.Iho.BusinessObjects.CaseManagement.Cases.ObjectionCaseProcessor",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.String",
						"Name": "FormatCaseNumber",
						"Hash": "784D01BBB8157A23A802EF25A518E34DD79B34DDF5AFF2A66D14C7DE87A9B2E0",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICase caseObject"
						]
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Cases",
				"Name": "ReturnAssessmentCaseProcessor",
				"BaseType": "DataTorque.Iho.BusinessObjects.CaseManagement.Cases.ReturnAssessmentCaseProcessor",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "void",
						"Name": "UpdateMetaData",
						"Hash": "4C9ED77C422357D93E9D9C847C928EB44DE5155FEE5985D9F468B6FB2A8AABF6",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICase caseObject"
						],
						"Body": {
							"BodyText": "            base.UpdateMetaData(caseObject);\r\n            IStandardLookupItem taxTypeMetaData = standardLookupRepository.FindItemByCode(\u0022CaseMetaDataType\u0022, \u0022TaxTypeCode\u0022);\r\n\r\n            if (taxTypeMetaData != null \u0026\u0026 caseObject.CaseMetaData.Any(c =\u003E c.CaseMetaDataTypeID == taxTypeMetaData.ID) \u0026\u0026 caseObject.TaxTypeID != null)\r\n            {\r\n                ITaxType taxType = taxTypeRepository.Find((int)caseObject.TaxTypeID);\r\n                SetCaseMetaDataValue(caseObject, taxTypeMetaData.ID, taxType.Code);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.CaseManagement.Cases.ReturnAssessmentCaseProcessor",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CaseMetaData",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData CaseMetaDataTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem ID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase TaxTypeID",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository Find",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType Code"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Cases",
				"Name": "TaxpayerRegistrationEditCaseProcessor",
				"BaseType": "DataTorque.Iho.BusinessObjects.CaseManagement.Cases.TaxpayerRegistrationEditCaseProcessor",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "void",
						"Name": "UpdateMetaData",
						"Hash": "4C9ED77C422357D93E9D9C847C928EB44DE5155FEE5985D9F468B6FB2A8AABF6",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICase caseObject"
						],
						"Body": {
							"BodyText": "            base.UpdateMetaData(caseObject);\r\n\r\n            if (caseObject.CurrentBusinessObject is ITaxpayer taxpayer)\r\n            {\r\n                ICaseMetaData allocationVATMetaData = caseObject.CaseMetaData.FirstOrDefault(md =\u003E md.CaseMetaDataTypeID == (int)CaseMetaDataType.VATAllocationDecision);\r\n\r\n                if (allocationVATMetaData != null)\r\n                {\r\n                    allocationVATMetaData.Value = allocationVATMetaData.Value.ToString(CultureInfo.InvariantCulture);\r\n                }\r\n\r\n                ICaseMetaData isRegisteringForVATMetaData = caseObject.CaseMetaData.FirstOrDefault(md =\u003E md.CaseMetaDataTypeID == (int)CaseMetaData.Type.IsRegisteringForVAT);\r\n                if (isRegisteringForVATMetaData !=null)\r\n                {\r\n                    isRegisteringForVATMetaData.Value = ParsingHelper.ParseString(GetIsRegisteringForVAT(taxpayer));\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.CaseManagement.Cases.TaxpayerRegistrationEditCaseProcessor",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData",
								"DataTorque.IsleOfMan.Interfaces.Integration.CaseManagement.CaseMetaDataType",
								"DataTorque.Iho.BusinessObjects.CaseManagement.Type",
								"DataTorque.Iho.BusinessObjects.CaseManagement.CaseMetaData"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CurrentBusinessObject",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CaseMetaData",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData CaseMetaDataTypeID",
								"DataTorque.IsleOfMan.Interfaces.Integration.CaseManagement.CaseMetaDataType VATAllocationDecision",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData Value",
								"DataTorque.Iho.BusinessObjects.CaseManagement.CaseMetaData Type"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "SaveBusinessObject",
						"Hash": "4B124DC384690563EB7A328A84A62558F3D9B931D7578CD1F090D78E4E4512F5",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICase caseObject"
						],
						"Body": {
							"BodyText": "            bool isTaxpayerSaved = taxpayerRepository.SaveTaxpayer(caseObject.CurrentBusinessObject as ITaxpayer, caseObject.DistributedSQLTransaction);\r\n            bool isAllocatingVATNumber = false;\r\n\r\n            if (caseObject.CurrentBusinessObject is ITaxpayer caseTaxpayer)\r\n            {\r\n                foreach (ICaseMetaData metaData in caseObject.CaseInfo.CaseMetaData)\r\n                {\r\n                    // we must check the metadata in order to see what their answer to the VAT allocation question was\r\n                    switch (metaData.CaseMetaDataTypeID)\r\n                    {\r\n                        case (int)CaseMetaDataType.VATAllocationDecision:\r\n                            IListItem allocationVATAnswer = configurationRepository.FindCaseTaskQuestionDataSourceItemByID(ParsingHelper.ParseInt(metaData.Value));\r\n                            if (!string.IsNullOrEmpty(allocationVATAnswer.Code) \u0026\u0026 allocationVATAnswer.Code.Equals(\u0022VATALLOCDEC1\u0022))\r\n                            {\r\n                                isAllocatingVATNumber = true;\r\n                            }\r\n\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                if (isAllocatingVATNumber)\r\n                {\r\n                    // reload the taxpayer so its clean  in order to prevent history saving incorrectly\r\n                    ITaxpayer taxpayer = taxpayerRepository.FindTaxpayer(caseTaxpayer.ID, caseObject.DistributedSQLTransaction);\r\n                    string vatNumber = vatNumberCalculator.GenerateVATNumberForTaxpayer(taxpayer, caseObject.DistributedSQLTransaction);\r\n                    if (vatNumber != null)\r\n                    {\r\n                        taxpayer.SaveData(true);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return isTaxpayerSaved;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.IsleOfMan.Interfaces.Integration.CaseManagement.CaseMetaDataType",
								"DataTorque.Iho.Interfaces.Common.IListItem",
								"DataTorque.Iho.Interfaces.Repositories.IConfigurationRepository",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IVATNumberCalculator"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository SaveTaxpayer",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CurrentBusinessObject",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase DistributedSQLTransaction",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CaseInfo",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData CaseMetaDataTypeID",
								"DataTorque.IsleOfMan.Interfaces.Integration.CaseManagement.CaseMetaDataType VATAllocationDecision",
								"DataTorque.Iho.Interfaces.Repositories.IConfigurationRepository FindCaseTaskQuestionDataSourceItemByID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData Value",
								"DataTorque.Iho.Interfaces.Common.IListItem Code",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository FindTaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer ID",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IVATNumberCalculator GenerateVATNumberForTaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer SaveData"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "GetIsRegisteringForVAT",
						"Hash": "2BDC143D4AD45BA243B586E8A877F0AFF62495874F00F2FBE6933D64E2CED3EB",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer taxpayer"
						],
						"Body": {
							"BodyText": "            IRegistration previousVATRegistration = taxpayer.InitialTaxTypeRegistrations.FirstOrDefault(reg =\u003E reg.TaxType.Code == \u0022VAT\u0022 \u0026\u0026 reg.Selected);\r\n            IRegistration currentVATRegistration = taxpayer.TaxTypeRegistrations.FirstOrDefault(reg =\u003E reg.TaxType.Code == \u0022VAT\u0022 \u0026\u0026 reg.Selected);\r\n            IEnumerable\u003CITaxpayerIdentificationNumber\u003E taxpayerIdentificationNumbers = taxpayer.IdentificationNumbers.Where(i =\u003E \u0022VTN\u0022.Equals(i?.IdentificationType.Code) \u0026\u0026 !i.Inactive);\r\n\r\n            //Get greatest expiry date\r\n            ITaxpayerIdentificationNumber taxpayerIdentificationNumber = taxpayerIdentificationNumbers.OrderByDescending(item =\u003E item.DateOfExpiry ?? DateTime.MaxValue).FirstOrDefault();\r\n\r\n            //IOM OVERRIDE: return true if we had a ceased registration, but are unceasing it\r\n            if (previousVATRegistration != null \u0026\u0026 currentVATRegistration != null \u0026\u0026 previousVATRegistration.FrequencyHistory.All(f =\u003E f.CeasedDate != null) \u0026\u0026 currentVATRegistration.FrequencyHistory.Any(f =\u003E f.CeasedDate == null))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            //IOM OVERRIDE: this method needs to return true if we are CEASING a reg as well, so need to check that the current registration has no unceased frequencies\r\n            if (currentVATRegistration == null || ((taxpayerIdentificationNumber != null \u0026\u0026 taxpayerIdentificationNumber.DateOfExpiry == null) \u0026\u0026 currentVATRegistration.FrequencyHistory.Any(f =\u003E f.CeasedDate == null)))\r\n            {\r\n                //Can\u0027t be registering if we have an active taxpayerIdentificationNumber OR No registration exists\r\n                return false;\r\n            }\r\n\r\n            if (taxpayerIdentificationNumber == null \u0026\u0026 \r\n                (previousVATRegistration == null || previousVATRegistration.FrequencyHistory.All(f =\u003E f.CeasedDate != null) \u0026\u0026 \r\n                    currentVATRegistration.FrequencyHistory.Any(f =\u003E f.CeasedDate == null)))\r\n            {\r\n                //If we have no active taxpayerIdentificationNumber\r\n                //If we have NO previous VAT Registration, OR we have a previous VAT Registration that is not ceased, but our current VAT\r\n                //registration is ceased, i.e. we are ceasing our current existing VAT registration \r\n                return true;\r\n            }\r\n\r\n            //Find all commencement dates after taxpayeridentificationNumber expiry date\r\n            DateTime identificationNumberExpiryDate = taxpayerIdentificationNumber?.DateOfExpiry ?? DateTime.MaxValue;\r\n\r\n\t\t\tIEnumerable\u003CIRegistrationReturnFrequency\u003E registrationReturnFrequencies = currentVATRegistration.FrequencyHistory.Where(f =\u003E f.CommenceDate \u003E identificationNumberExpiryDate);\r\n\r\n            //If any of the registrationReturnFrequencies do not exist in  previousVATRegistration FrequencyHistory, then we are registering\r\n            return registrationReturnFrequencies.Any(registrationReturnFrequency =\u003E previousVATRegistration.FrequencyHistory.Any(existingReturnFrequency =\u003E existingReturnFrequency.ID != registrationReturnFrequency.ID));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer InitialTaxTypeRegistrations",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration TaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration Selected",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer TaxTypeRegistrations",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer IdentificationNumbers",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber Inactive",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber DateOfExpiry",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration FrequencyHistory",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency CeasedDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency CommenceDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency ID"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Cases",
				"Name": "TaxpayerRegistrationEntryCaseProcessor",
				"BaseType": "DataTorque.Iho.BusinessObjects.CaseManagement.Cases.TaxpayerRegistrationEntryCaseProcessor",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "void",
						"Name": "UpdateMetaData",
						"Hash": "4C9ED77C422357D93E9D9C847C928EB44DE5155FEE5985D9F468B6FB2A8AABF6",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICase caseObject"
						],
						"Body": {
							"BodyText": "            base.UpdateMetaData(caseObject);\r\n\r\n            if (caseObject.CurrentBusinessObject is ITaxpayer)\r\n            {\r\n                ICaseMetaData allocationVATMetaData = caseObject.CaseMetaData.FirstOrDefault(md =\u003E md.CaseMetaDataTypeID == (int)CaseMetaDataType.VATAllocationDecision);\r\n\r\n                if (allocationVATMetaData != null)\r\n                {\r\n                    allocationVATMetaData.Value = allocationVATMetaData.Value.ToString(CultureInfo.InvariantCulture);\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.CaseManagement.Cases.TaxpayerRegistrationEntryCaseProcessor",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData",
								"DataTorque.IsleOfMan.Interfaces.Integration.CaseManagement.CaseMetaDataType"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CurrentBusinessObject",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CaseMetaData",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData CaseMetaDataTypeID",
								"DataTorque.IsleOfMan.Interfaces.Integration.CaseManagement.CaseMetaDataType VATAllocationDecision",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData Value"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "SaveBusinessObject",
						"Hash": "4B124DC384690563EB7A328A84A62558F3D9B931D7578CD1F090D78E4E4512F5",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICase caseObject"
						],
						"Body": {
							"BodyText": "            bool isRegisteringForVAT = caseObject.CaseMetaData.Any(md =\u003E md.CaseMetaDataTypeID == (int)CaseMetaData.Type.IsRegisteringForVAT \u0026\u0026 md.Value.Equals(\u0022True\u0022));\r\n            bool isTaxpayerSaved  = base.SaveBusinessObject(caseObject); // this will SaveTaxpayer and add the web user in case of online reg. \r\n            bool alreadyHasVATNumber = taxpayerRepository.FindIdentificationNumbersForTaxpayer(caseObject.CurrentBusinessObject as ITaxpayer).Any(reg =\u003E reg.IdentificationType.Code == \u0022VTN\u0022 \u0026\u0026 (reg.DateOfIssue != null) \u0026\u0026 (reg.DateOfExpiry == null || reg.DateOfExpiry \u003E DateTime.UtcNow));\r\n            bool generateVATNumber = false;\r\n\r\n            if (isRegisteringForVAT \u0026\u0026 isTaxpayerSaved \u0026\u0026 !alreadyHasVATNumber)\r\n            {\r\n                foreach (ICaseMetaData metaData in caseObject.CaseInfo.CaseMetaData)\r\n                {\r\n                    // here is where we check the metadata to see what their answer to the VAT allocation question was\r\n                    switch (metaData.CaseMetaDataTypeID)\r\n                    {\r\n                        case (int)CaseMetaDataType.VATAllocationDecision:\r\n                            IListItem allocationVATAnswer = configurationRepository.FindCaseTaskQuestionDataSourceItemByID(ParsingHelper.ParseInt(metaData.Value));\r\n                            if (!string.IsNullOrEmpty(allocationVATAnswer.Code) \u0026\u0026 allocationVATAnswer.Code.Equals(\u0022VATALLOCDEC1\u0022))\r\n                            {\r\n                                generateVATNumber = true;\r\n                            }\r\n\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (generateVATNumber)\r\n            {\r\n                if (caseObject.CurrentBusinessObject is ITaxpayer caseTaxpayer)\r\n                {\r\n                    // reload the taxpayer so its clean  in order to prevent history saving incorrectly\r\n                    ITaxpayer taxpayer = taxpayerRepository.FindTaxpayer(caseTaxpayer.ID, caseObject.DistributedSQLTransaction);\r\n                    vatNumberCalculator.GenerateVATNumberForTaxpayer(taxpayer, caseObject.DistributedSQLTransaction);\r\n                    taxpayer.SaveData(true); \r\n                }\r\n            }\r\n\r\n            return isTaxpayerSaved;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData",
								"DataTorque.Iho.BusinessObjects.CaseManagement.Type",
								"DataTorque.Iho.BusinessObjects.CaseManagement.CaseMetaData",
								"DataTorque.Iho.BusinessObjects.CaseManagement.Cases.TaxpayerRegistrationEntryCaseProcessor",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.IsleOfMan.Interfaces.Integration.CaseManagement.CaseMetaDataType",
								"DataTorque.Iho.Interfaces.Common.IListItem",
								"DataTorque.Iho.Interfaces.Repositories.IConfigurationRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IVATNumberCalculator"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CaseMetaData",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData CaseMetaDataTypeID",
								"DataTorque.Iho.BusinessObjects.CaseManagement.CaseMetaData Type",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData Value",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository FindIdentificationNumbersForTaxpayer",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CurrentBusinessObject",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber IdentificationType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber DateOfIssue",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber DateOfExpiry",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CaseInfo",
								"DataTorque.IsleOfMan.Interfaces.Integration.CaseManagement.CaseMetaDataType VATAllocationDecision",
								"DataTorque.Iho.Interfaces.Repositories.IConfigurationRepository FindCaseTaskQuestionDataSourceItemByID",
								"DataTorque.Iho.Interfaces.Common.IListItem Code",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository FindTaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer ID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IVATNumberCalculator GenerateVATNumberForTaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer SaveData"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Factories",
				"Name": "CaseProcessorFactory",
				"BaseType": "DataTorque.Iho.BusinessObjects.CaseManagement.Factories.CaseProcessorFactory",
				"Methods": [
					{
						"Modifiers": "protected override",
						"ReturnType": "DataTorque.Iho.Interfaces.CaseManagement.ICaseProcessor",
						"Name": "CreateNewRegistrationCaseProcessor",
						"Hash": "1FAABF663DDC7493F7F59C3DD38F2B4F54957ED0067ACD28B7C22AE82321C4FC",
						"Body": {
							"BodyText": "            return new TaxpayerRegistrationEntryCaseProcessor(genericCaseLogicCalculator,\r\n                                                              taxpayerRepository,\r\n                                                              systemConstantRepository,\r\n                                                              contactUpdater,\r\n                                                              registrationUpdater,\r\n                                                              cachedSimpleTaxpayerSearcher,\r\n                                                              caseWorkflowNavigator,\r\n                                                              vatNumberCalculator,\r\n                                                              notificationCalculator,\r\n                                                              caseConfigurationRepository,\r\n                                                              configurationRepository,\r\n                                                              userRepository\r\n                                                              );\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseProcessor",
								"DataTorque.Iho.Interfaces.Calculators.IGenericCaseLogicCalculator",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.Calculators.IContactUpdater",
								"DataTorque.Iho.Interfaces.Calculators.IRegistrationUpdater",
								"DataTorque.Iho.Interfaces.Search.ICachedSimpleTaxpayerSearcher",
								"DataTorque.Iho.Interfaces.Calculators.ICaseWorkflowNavigator",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IVATNumberCalculator",
								"DataTorque.Iho.Interfaces.Calculators.INotificationCalculator",
								"DataTorque.Iho.Interfaces.Repositories.ICaseConfigurationRepository",
								"DataTorque.Iho.Interfaces.Repositories.IConfigurationRepository",
								"DataTorque.Iho.Interfaces.Repositories.IUserRepository"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "DataTorque.Iho.Interfaces.CaseManagement.ICaseProcessor",
						"Name": "CreateChangeRegistrationCaseProcessor",
						"Hash": "4F34479FDF3FA3D77B38266897C1FFA3755C6EDFC7B5B8D68C5995046BC53D5C",
						"Body": {
							"BodyText": "            return new TaxpayerRegistrationEditCaseProcessor(genericCaseLogicCalculator,\r\n                                                             taxpayerRepository,\r\n                                                             registrationUpdater,\r\n                                                             cachedSimpleTaxpayerSearcher,\r\n                                                             caseWorkflowNavigator,\r\n                                                             configurationRepository,\r\n                                                             systemConstantRepository,\r\n                                                             vatNumberCalculator,\r\n                                                             notificationCalculator,\r\n                                                             caseConfigurationRepository,\r\n                                                             userRepository);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseProcessor",
								"DataTorque.Iho.Interfaces.Calculators.IGenericCaseLogicCalculator",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository",
								"DataTorque.Iho.Interfaces.Calculators.IRegistrationUpdater",
								"DataTorque.Iho.Interfaces.Search.ICachedSimpleTaxpayerSearcher",
								"DataTorque.Iho.Interfaces.Calculators.ICaseWorkflowNavigator",
								"DataTorque.Iho.Interfaces.Repositories.IConfigurationRepository",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IVATNumberCalculator",
								"DataTorque.Iho.Interfaces.Calculators.INotificationCalculator",
								"DataTorque.Iho.Interfaces.Repositories.ICaseConfigurationRepository",
								"DataTorque.Iho.Interfaces.Repositories.IUserRepository"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "DataTorque.Iho.Interfaces.CaseManagement.ICaseProcessor",
						"Name": "CreateReturnAssessmentCaseProcessor",
						"Hash": "402A112E647CDEB108DC444C20A88A77F193E214E2375D2B046DFECEF4ED0C99",
						"Body": {
							"BodyText": "            return new ReturnAssessmentCaseProcessor(taxTypeRepository, \r\n                genericCaseLogicCalculator, \r\n                taxReturnAssessmentRepository, \r\n                taxReturnRepository, \r\n                systemConstantRepository, \r\n                standardLookupRepository,\r\n                caseTaxpayerAccountScopeRepository,\r\n                messageQueueRepository);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseProcessor",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository",
								"DataTorque.Iho.Interfaces.Calculators.IGenericCaseLogicCalculator",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnAssessmentRepository",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.Repositories.ICaseTaxpayerAccountScopeRepository",
								"DataTorque.Iho.Interfaces.Repositories.IMessageQueueRepository"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "DataTorque.Iho.Interfaces.CaseManagement.ICaseProcessor",
						"Name": "CreateObjectionCaseProcessor",
						"Hash": "28695DB20B1CD1776CC2E5B65A6724B902D3278C085159E363202E723C6BC983"
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Tasks",
				"Name": "DebtCompleteInstalmentMultipleNotificationTask",
				"BaseType": "DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Tasks.TaxpayerMultipleNotificationTask",
				"Properties": [
					"DataTorque.Iho.Interfaces.BusinessObjects.IDebt DebtBusinessObject"
				],
				"Methods": [
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            if (DebtBusinessObject != null \u0026\u0026 DebtBusinessObject.DebtRecoveryArrangements.LastOrDefault() != null \u0026\u0026 ID \u003E 0)\r\n            {\r\n                IDebtRecoveryArrangement arrangement = DebtBusinessObject.DebtRecoveryArrangements.Last();\r\n                arrangement.IsComplete = true;\r\n                arrangement.CurrentState = ArrangementState.CompleteArrangement;\r\n\r\n                DebtBusinessObject.CurrentState = DebtState.Outcome;\r\n            }\r\n\r\n            base.InternalSaveData();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IDebt",
								"DataTorque.Iho.Interfaces.BusinessObjects.IDebtRecoveryArrangement",
								"DataTorque.Iho.Interfaces.Debt.ArrangementState",
								"DataTorque.Iho.Interfaces.Debt.DebtState",
								"DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Tasks.TaxpayerMultipleNotificationTask"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IDebt DebtRecoveryArrangements",
								"DataTorque.Iho.Interfaces.BusinessObjects.IDebtRecoveryArrangement IsComplete",
								"DataTorque.Iho.Interfaces.BusinessObjects.IDebtRecoveryArrangement CurrentState",
								"DataTorque.Iho.Interfaces.Debt.ArrangementState CompleteArrangement",
								"DataTorque.Iho.Interfaces.BusinessObjects.IDebt CurrentState",
								"DataTorque.Iho.Interfaces.Debt.DebtState Outcome"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Tasks",
				"Name": "InaccuracyPenaltyTask",
				"BaseType": "DataTorque.Iho.BusinessObjects.CaseManagement.CaseTask",
				"Properties": [
					"DataTorque.Iho.Interfaces.Common.ISmartBindingList CaseReturnPeriods",
					"System.Collections.Generic.IEnumerable InaccuracyPenalties",
					"System.Collections.Generic.IEnumerable OriginalInaccuracyPenalties"
				],
				"Methods": [
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            // Draft path \u2013 save as draft and exit\r\n            // Do NOT put Approved here. Approved means we save the business object WHEN IT\u0027S APPROVED. Not when the user submits the approved task.\r\n            // It also means we cannot remove the approval logic on the task without a code change, which is bad.\r\n            if (!Complete)\r\n            {\r\n                inaccuracyPenaltyRepository.CleanAndSaveDraft(CaseID, originalInaccuracyPenalties, inaccuracyPenalties);\r\n                base.InternalSaveData();\r\n                return;\r\n            }\r\n\r\n            if ((CaseInfo.TaxpayerID ?? 0) == 0)\r\n            {\r\n                return;\r\n            }\r\n\r\n            inaccuracyPenaltyRepository.SaveInaccuracyPenalties(CaseID, CaseInfo.TaxpayerID.Value, CaseInfo.CreatedByUserID, originalInaccuracyPenalties, inaccuracyPenalties, CaseInfo.DistributedSQLTransaction);\r\n\r\n            /* note: debit header is not saved in this branch */\r\n            base.InternalSaveData();\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository",
								"DataTorque.Iho.BusinessObjects.CaseManagement.CaseTask",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository CleanAndSaveDraft",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository SaveInaccuracyPenalties",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CreatedByUserID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase DistributedSQLTransaction"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalUpdateCaseMetaData",
						"Hash": "646F4E8FFEFFDEC938C07932CAFFE3F6C9CB7DBAF0BD997066247252949A3220",
						"Body": {
							"BodyText": "            base.InternalUpdateCaseMetaData();\r\n            // This method is not called when the task is approved.\r\n            // Therefore, we have two options: \r\n            // 1. Put the code in the InternalSaveData method after applying penalties when the task is approved.\r\n            // 2. Put the code here in the next step when the task is complete.\r\n            // I believe it\u0027s better to put it here to keep all MetaData in one place.\r\n            // Additionally, the PenaltiesApplied MetaData needs to be added to other cases using this task.\r\n            // If there are different names for different metadata, we can check the case type and add the appropriate metadata accordingly.\r\n\r\n            if (CaseTaskStatusID == (int)CaseTaskStatus.Complete)\r\n            {\r\n                ICaseMetaData penaltyAllocatedMetaData = CaseInfo.CaseMetaData.FirstOrDefault(md =\u003E md.CaseMetaDataTypeID == (int)CaseMetaDataType.PenaltiesApplied);\r\n                if (penaltyAllocatedMetaData != null)\r\n                {\r\n                    penaltyAllocatedMetaData.Value = InaccuracyPenalties.Any(t =\u003E t.IsSuspended) ? \u0022True\u0022 : \u0022False\u0022;\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.CaseManagement.CaseTask",
								"DataTorque.Iho.BusinessObjects.CaseTaskStatus",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.IsleOfMan.Interfaces.Integration.CaseManagement.CaseMetaDataType",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.CaseTaskStatus Complete",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CaseMetaData",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData CaseMetaDataTypeID",
								"DataTorque.IsleOfMan.Interfaces.Integration.CaseManagement.CaseMetaDataType PenaltiesApplied",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseMetaData Value",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty IsSuspended"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "LoadInaccuracyPenalties",
						"Hash": "EDBD0C7636B53503C8CC05A77FBB8CB619B33BE3BCBEEDE5C82DA061867CF020",
						"Body": {
							"BodyText": "            // Get the penalties from the draft data.\r\n            // this returns two lists.\r\n            // originalPenalties are the penalties that existed when this task was first reached.\r\n            // currentPenalties are the penalties that have been added / modified since this task was reached. \r\n            // we maintain two lists so that we can allow deleting penalties that existed before this case, which is currently not enabled, but it\u0027s future proofing with little additional cost. \r\n            (IEnumerable\u003CIInaccuracyPenalty\u003E originalPenalties, IEnumerable\u003CIInaccuracyPenalty\u003E currentPenalties) penaltyData = inaccuracyPenaltyRepository.GetInaccuracyPenaltyDraftsByCaseId(CaseID);\r\n\r\n            // add all of the penalties from the draft originalPenalties in to our internal list of original penalties. \r\n            // if there were no draft original penalties, then we build the list from the database. \r\n            originalInaccuracyPenalties.Clear();\r\n            originalInaccuracyPenalties.AddRange(penaltyData.originalPenalties);\r\n            if (originalInaccuracyPenalties.Count == 0)\r\n            {\r\n                foreach (ICaseReturnPeriod returnPeriod in CaseReturnPeriods)\r\n                {\r\n                    foreach (IInaccuracyPenalty inaccuracyPenalty in inaccuracyPenaltyRepository.GetInaccuracyPenalties_ByTaxReturn(returnPeriod.TaxpayerID, returnPeriod.TaxTypeID, returnPeriod.YearID.GetValueOrDefault(), returnPeriod.PeriodID.GetValueOrDefault(), CaseInfo.ID, CaseInfo.DistributedSQLTransaction))\r\n                    {\r\n                        inaccuracyPenalty.CaseReturnPeriods = CaseReturnPeriods;\r\n                        originalInaccuracyPenalties.Add(inaccuracyPenalty);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // add all of the penalties from the draft currentPenalties in to our internal list of penalties. \r\n            // if there were no draft current penalties, then just add everything from the original penalty list, since these are what\r\n            // we will be working on. \r\n            // if there were draft current penalties, and some of those penalties were new, then calculate the PLI from the tax return for the period.\r\n            inaccuracyPenalties.Clear();\r\n            inaccuracyPenalties.AddRange(penaltyData.currentPenalties);\r\n            if (inaccuracyPenalties.Count == 0)\r\n            {\r\n                inaccuracyPenalties.AddRange(originalInaccuracyPenalties);\r\n            }\r\n            else\r\n            {\r\n                foreach (IInaccuracyPenalty inaccuracyPenalty in inaccuracyPenalties)\r\n                {\r\n                    if (inaccuracyPenalty.FromInaccuracyPenaltyID == 0)\r\n                    {\r\n                        inaccuracyPenalty.CaseReturnPeriods = CaseReturnPeriods;\r\n\r\n                        ICaseReturnPeriod period = inaccuracyPenalty.CaseReturnPeriods.FirstOrDefault(a =\u003E a.TaxTypeID == inaccuracyPenalty.TaxTypeID \u0026\u0026 a.YearID == inaccuracyPenalty.YearID \u0026\u0026 a.PeriodID == inaccuracyPenalty.PeriodID);\r\n                        if (period != null \u0026\u0026 period.TaxPayableDifference != null)\r\n                        {\r\n                            inaccuracyPenalty.CalculatedPLI = period.TaxPayableDifference.GetValueOrDefault();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty",
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseReturnPeriod",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository GetInaccuracyPenaltyDraftsByCaseId",
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository GetInaccuracyPenalties_ByTaxReturn",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseReturnPeriod TaxpayerID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseReturnPeriod TaxTypeID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseReturnPeriod YearID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseReturnPeriod PeriodID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase ID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty CaseReturnPeriods",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty FromInaccuracyPenaltyID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty TaxTypeID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty YearID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty PeriodID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseReturnPeriod TaxPayableDifference",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty CalculatedPLI"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "LoadCasePeriods",
						"Hash": "0F626B7B504A147030780C713F5A97D0F4B3485F70B1978D46601FC85B14B539",
						"Body": {
							"BodyText": "            // The following tasks: AuditAccountChangesTask, RefundTaxpayerAccountChangesTask, and ReturnAssessmentAccountChangesTask, all inherit from TaxpayerAccountChangesTask.\r\n            // Both Appeal and Review cases utilize TaxpayerAccountChangesTask, which has CaseTaxpayerAccountScope as its BusinessObjectInstance.\r\n            // For ASC, it has TaxReturnAssessment as its BusinessObjectInstance.\r\n            // From CaseTaxpayerAccountScope and TaxReturnAssessment, we can access the CaseReturnPeriods.\r\n            int caseTaskId = inaccuracyPenaltyRepository.GetAccountChangeTaskIdForPenalty(CaseID);\r\n            IBaseMutableBusinessObject caseTaskBusinessObject = caseRepository.FindBusinessObjectByCaseTask(caseTaskId);\r\n            ISmartBindingList\u003CICaseReturnPeriod\u003E tacCaseReturnPeriods = null;\r\n            switch (caseTaskBusinessObject)\r\n            {\r\n                case CaseTaxpayerAccountScope caseTaxpayerAccountScope:\r\n                    tacCaseReturnPeriods = caseTaxpayerAccountScope.CaseReturnPeriods;\r\n                    break;\r\n                case TaxReturnAssessment taxReturnAssessment:\r\n                    tacCaseReturnPeriods = taxReturnAssessment.CaseReturnPeriods;\r\n                    break;\r\n                case RefundRequest refundRequest:\r\n                    tacCaseReturnPeriods = refundRequest.CaseReturnPeriods;\r\n                    break;\r\n            }\r\n            if (tacCaseReturnPeriods != null)\r\n            {\r\n                // Consider returning only the ReturnPeriods where TaxPayableDifference \u003E 0, instead of filtering this in the Model.\r\n                // However, I\u0027m uncertain if the other ReturnPeriods might be needed.\r\n                IList\u003Cint\u003E supportedTaxTypes = inaccuracyPenaltyRepository.GetInaccuracyPenaltiesSupportedTaxTypes();\r\n                IList\u003CICaseReturnPeriod\u003E filteredReturnPeriods = tacCaseReturnPeriods\r\n                    .Where(c =\u003E supportedTaxTypes.Contains(c.TaxTypeID))\r\n                    .ToList();\r\n\r\n                CaseReturnPeriods = new SmartBindingList\u003CICaseReturnPeriod\u003E(filteredReturnPeriods);\r\n            }\r\n            else\r\n            {\r\n                CaseReturnPeriods = new SmartBindingList\u003CICaseReturnPeriod\u003E();\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject",
								"DataTorque.Iho.Interfaces.Repositories.ICaseRepository",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseReturnPeriod",
								"DataTorque.Iho.BusinessObjects.CaseManagement.CaseTaxpayerAccountScope",
								"DataTorque.Iho.BusinessObjects.TaxReturnAssessment",
								"DataTorque.Iho.BusinessObjects.RefundRequest"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository GetAccountChangeTaskIdForPenalty",
								"DataTorque.Iho.Interfaces.Repositories.ICaseRepository FindBusinessObjectByCaseTask",
								"DataTorque.Iho.BusinessObjects.CaseManagement.CaseTaxpayerAccountScope CaseReturnPeriods",
								"DataTorque.Iho.BusinessObjects.TaxReturnAssessment CaseReturnPeriods",
								"DataTorque.Iho.BusinessObjects.RefundRequest CaseReturnPeriods",
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository GetInaccuracyPenaltiesSupportedTaxTypes",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseReturnPeriod TaxTypeID"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "AddInaccuracyPenalty",
						"Hash": "A018196525A5EF1531D98D6363147011F41B3B4F5B4800B60C8FF23988241D02",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty penalty"
						],
						"Body": {
							"BodyText": "            inaccuracyPenaltyRepository.PopulateInaccuracyPenalty(penalty);\r\n            inaccuracyPenalties.Add(penalty);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository PopulateInaccuracyPenalty"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "UpdateInaccuracyPenalty",
						"Hash": "095C83B071B9E4639D8B9B778F6F36E4266C83DF013F15EDFD8A08A46782F66D",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty sourcePenalty",
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty updatedPenalty"
						],
						"Body": {
							"BodyText": "            inaccuracyPenaltyRepository.PopulateInaccuracyPenalty(updatedPenalty);\r\n\r\n            // if the inaccuracy penalty list contains the source penalty, then remove it and replace it,\r\n            // since that\u0027s what we were editing (and updatedPenalty is a clone, so we can\u0027t rely on references).\r\n            inaccuracyPenalties.Remove(sourcePenalty);\r\n\r\n            inaccuracyPenalties.Add(updatedPenalty);\r\n\r\n            updatedPenalty.IsChanged = true;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository PopulateInaccuracyPenalty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty IsChanged"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "RemoveInaccuracyPenalty",
						"Hash": "74E55E430A95B006E6B5DF31336FFC9266EFB0E5AD6D77DD9EEBF3C0C4363775",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty penalty"
						],
						"Body": {
							"BodyText": "            // If we have an original penalty that matches the penalty we\u0027re removing, then mark it inactive so we can reverse it\r\n            // Note: This is currently not possible, since the UI prevents deleting existing inaccuracy penalties, but leaving this here to future proof turning that ability on.\r\n            if (penalty.FromInaccuracyPenaltyID != 0)\r\n            {\r\n                IInaccuracyPenalty originalPenalty = originalInaccuracyPenalties.FirstOrDefault(p =\u003E p.FromInaccuracyPenaltyID == penalty.FromInaccuracyPenaltyID);\r\n                if (originalPenalty != null)\r\n                {\r\n                    originalPenalty.Inactive = true;\r\n                    originalPenalty.EffectiveDate = DateTime.Now.Date; // this is the date that the reversal will be effective from.\r\n                }\r\n            }\r\n\r\n            inaccuracyPenalties.Remove(penalty);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty FromInaccuracyPenaltyID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty Inactive",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty EffectiveDate"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Tasks",
				"Name": "RefundMultipleNotificationTask",
				"BaseType": "DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Tasks.TaxpayerMultipleNotificationTask"
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Tasks",
				"Name": "SendForLegalTask",
				"BaseType": "DataTorque.Iho.BusinessObjects.CaseManagement.CaseTask",
				"Properties": [
					"DataTorque.Iho.Interfaces.Common.ISmartBindingList LegalStati"
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.CaseManagement.Tasks",
				"Name": "TaxpayerMultipleNotificationTask",
				"BaseType": "DataTorque.Iho.BusinessObjects.CaseManagement.Tasks.TaxpayerMultipleNotificationTask",
				"Properties": [
					"DataTorque.Iho.Interfaces.Common.ISmartBindingList TaxpayerNotificationConfigurationSearchResults"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "void",
						"Name": "LoadTaxpayerNotifications",
						"Hash": "B90376948E3B09C96F670810834DF8015C799C0CD5A21C46BB49657C839E7881",
						"Body": {
							"BodyText": "            base.LoadTaxpayerNotifications();\r\n\r\n            foreach (ITaxpayerNotification taxpayerNotification in Notifications)\r\n            {\r\n                if (taxpayerNotification.Configuration.Type == NotificationTypes.Email || taxpayerNotification.Configuration.Type == NotificationTypes.EmailAlert)\r\n                {\r\n                    ((NotificationRepository)notificationRepositoryIOM).UpdateTaxpayerNotificationAddressList(taxpayerNotification, DistributedSQLTransaction);\r\n                } \r\n            }\r\n\r\n            foreach (IReportSelection reportSelection in LetterNotifications.TaxpayerNotifications)\r\n            {\r\n                IReportSelection taxpayerNotification = (ITaxpayerNotification)reportSelection;\r\n                taxpayerNotification.AddAttachment = true;\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.CaseManagement.Tasks.TaxpayerMultipleNotificationTask",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification",
								"DataTorque.Iho.Interfaces.NotificationTypes",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotificationConfiguration",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.NotificationRepository",
								"DataTorque.Iho.Interfaces.Repositories.INotificationRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReportSelection",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.BusinessObjects.TaxpayerNotificationCollection"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification Configuration",
								"DataTorque.Iho.Interfaces.NotificationTypes Email",
								"DataTorque.Iho.Interfaces.NotificationTypes EmailAlert",
								"DataTorque.Iho.BusinessObjects.TaxpayerNotificationCollection TaxpayerNotifications",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification AddAttachment"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "ChangeOfCompanyNameFileDetail",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail"
				],
				"Properties": [
					"System.Int32 ChangeOfCompanyNameFileHeaderID",
					"System.String Record",
					"System.String CompanyNumber",
					"System.String CompanyName",
					"System.String TradeName",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus ChangeOfCompanyNameFileDetailStatus",
					"System.String ErrorMessage",
					"System.Nullable TaxpayerID",
					"System.Nullable CaseID"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return changeOfCompanyNameFileDetailValidator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(changeOfCompanyNameFileDetailValidator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022ChangeOfCompanyNameFileHeaderID\u0022, SqlDbType.Int, 0, ChangeOfCompanyNameFileHeaderID);\r\n            query.AddParameter(\u0022Record\u0022, SqlDbType.NVarChar, 0, Record);\r\n            query.AddParameter(\u0022CompanyNumber\u0022, SqlDbType.NVarChar, 0, CompanyNumber);\r\n            query.AddParameter(\u0022CompanyName\u0022, SqlDbType.NVarChar, 0, CompanyName);\r\n            query.AddParameter(\u0022TradeName\u0022, SqlDbType.NVarChar, 0, TradeName);\r\n            query.AddParameter(\u0022TaxpayerID\u0022, SqlDbType.Int, 0, TaxpayerID);\r\n            query.AddParameter(\u0022CaseID\u0022, SqlDbType.Int, 0, CaseID);\r\n            query.AddParameter(\u0022ChangeOfCompanyNameFileDetailStatusID\u0022, SqlDbType.Int, 0, ChangeOfCompanyNameFileDetailStatus);\r\n            query.AddParameter(\u0022ErrorMessage\u0022, SqlDbType.NVarChar, 0, ErrorMessage);\r\n\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@ChangeOfCompanyNameFileDetailID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "ChangeOfCompanyNameFileHeader",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader"
				],
				"Properties": [
					"System.String FileName",
					"System.String Checksum",
					"System.Nullable FileProcessedDate",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus ImportFileStatus",
					"System.String Notes",
					"System.Collections.Generic.IList ChangeOfCompanyNameFileDetails",
					" FileContents",
					"System.Int32 TotalProcessedChangeOfCompanyNameCount",
					"System.String FinalFileName"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return changeOfCompanyNameFileHeaderValidator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(changeOfCompanyNameFileHeaderValidator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022FileName\u0022, SqlDbType.NVarChar, 0, FileName);\r\n            query.AddParameter(\u0022FinalFileName\u0022, SqlDbType.NVarChar, 0, FinalFileName);\r\n            query.AddParameter(\u0022Checksum\u0022, SqlDbType.NVarChar, 0, Checksum);\r\n            query.AddParameter(\u0022FileProcessedDate\u0022, SqlDbType.DateTime, 0, FileProcessedDate);\r\n            query.AddParameter(\u0022ImportFileStatusID\u0022, SqlDbType.Int, 0, ImportFileStatus);\r\n            query.AddParameter(\u0022Notes\u0022, SqlDbType.NVarChar, 0, Notes);\r\n            query.AddParameter(\u0022TotalProcessedChangeOfCompanyNameCount\u0022, SqlDbType.Int, 0, TotalProcessedChangeOfCompanyNameCount);\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@ChangeOfCompanyNameFileHeaderID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "ChangeOfRegisteredOfficeFileDetail",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail"
				],
				"Properties": [
					"System.Int32 ChangeOfRegisteredOfficeFileHeaderID",
					"System.String Record",
					"System.String CompanyNumber",
					"System.String CompanyName",
					"System.String AddressLine1",
					"System.String AddressLine2",
					"System.String AddressLine3",
					"System.String Village",
					"System.String POBox",
					"System.String PostCode",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus ChangeOfRegisteredOfficeFileDetailStatus",
					"System.String ErrorMessage",
					"System.Nullable TaxpayerID",
					"System.Nullable VillageID",
					"System.Nullable CaseID"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return changeOfRegisteredOfficeFileDetailValidator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(changeOfRegisteredOfficeFileDetailValidator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022ChangeOfRegisteredOfficeFileHeaderID\u0022, SqlDbType.Int, 0, ChangeOfRegisteredOfficeFileHeaderID);\r\n            query.AddParameter(\u0022Record\u0022, SqlDbType.NVarChar, 0, Record);\r\n            query.AddParameter(\u0022CompanyNumber\u0022, SqlDbType.NVarChar, 0, CompanyNumber);\r\n            query.AddParameter(\u0022CompanyName\u0022, SqlDbType.NVarChar, 0, CompanyName);\r\n            query.AddParameter(\u0022AddressLine1\u0022, SqlDbType.NVarChar, 0, AddressLine1);\r\n            query.AddParameter(\u0022AddressLine2\u0022, SqlDbType.NVarChar, 0, AddressLine2);\r\n            query.AddParameter(\u0022AddressLine3\u0022, SqlDbType.NVarChar, 0, AddressLine3);\r\n            query.AddParameter(\u0022Village\u0022, SqlDbType.NVarChar, 0, Village);\r\n            query.AddParameter(\u0022POBox\u0022, SqlDbType.NVarChar, 0, POBox);\r\n            query.AddParameter(\u0022PostCode\u0022, SqlDbType.NVarChar, 0, PostCode);\r\n            query.AddParameter(\u0022TaxpayerID\u0022, SqlDbType.Int, 0, TaxpayerID);\r\n            query.AddParameter(\u0022VillageID\u0022, SqlDbType.Int, 0, VillageID);\r\n            query.AddParameter(\u0022CaseID\u0022, SqlDbType.Int, 0, CaseID);\r\n            query.AddParameter(\u0022ChangeOfRegisteredOfficeFileDetailStatusID\u0022, SqlDbType.Int, 0, ChangeOfRegisteredOfficeFileDetailStatus);\r\n            query.AddParameter(\u0022ErrorMessage\u0022, SqlDbType.NVarChar, 0, ErrorMessage);\r\n\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@ChangeOfRegisteredOfficeFileDetailID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "ChangeOfRegisteredOfficeFileHeader",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader"
				],
				"Properties": [
					"System.String FileName",
					"System.String Checksum",
					"System.Nullable FileProcessedDate",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus ImportFileStatus",
					"System.String Notes",
					"System.Collections.Generic.IList ChangeOfRegisteredOfficeFileDetails",
					" FileContents",
					"System.Int32 TotalProcessedChangeOfRegisteredOfficeCount",
					"System.String FinalFileName"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return changeOfRegisteredOfficeFileHeaderValidator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(changeOfRegisteredOfficeFileHeaderValidator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022FileName\u0022, SqlDbType.NVarChar, 0, FileName);\r\n            query.AddParameter(\u0022FinalFileName\u0022, SqlDbType.NVarChar, 0, FinalFileName);\r\n            query.AddParameter(\u0022Checksum\u0022, SqlDbType.NVarChar, 0, Checksum);\r\n            query.AddParameter(\u0022FileProcessedDate\u0022, SqlDbType.DateTime, 0, FileProcessedDate);\r\n            query.AddParameter(\u0022ImportFileStatusID\u0022, SqlDbType.Int, 0, ImportFileStatus);\r\n            query.AddParameter(\u0022Notes\u0022, SqlDbType.NVarChar, 0, Notes);\r\n            query.AddParameter(\u0022TotalProcessedChangeOfRegisteredOfficeCount\u0022, SqlDbType.Int, 0, TotalProcessedChangeOfRegisteredOfficeCount);\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@ChangeOfRegisteredOfficeFileHeaderID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "DebtLegalStatus",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDebtLegalStatus"
				],
				"Properties": [
					"System.Int32 TaxTypeId",
					"System.Int32 Year",
					"System.Int32 PeriodId",
					"System.Boolean Filed",
					"System.Boolean DefaultAssessment",
					"System.Int32 DaysOld",
					"System.String TypeOfDebt",
					"System.Decimal Amount",
					"System.String OpenCases",
					"System.Decimal DebtPersued",
					"System.Boolean Completed"
				],
				"Methods": [
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB"
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8"
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB"
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "DefermentStatement",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatement"
				],
				"Properties": [
					"System.Nullable TransactionDate",
					"System.String MovementReferenceNumber",
					"System.Nullable EntryDate",
					"System.Nullable DefermentAccountNumber",
					"System.String ImportersEORI",
					"System.String Declarant",
					"System.String DeclarantsEORI",
					"System.String DeclarantsReference",
					"System.String DeferredDepositReference",
					"System.Nullable DutyDue",
					"System.Nullable VATDue",
					"System.Nullable ExciseDue",
					"System.Nullable TotalDue",
					"System.Int32 TaxpayerID",
					"System.String TaxType"
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "DefermentStatementFileDetail",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail"
				],
				"Properties": [
					"System.Int32 DefermentStatementFileHeaderID",
					"System.Int32 RowIndex",
					"System.String Record",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus DefermentStatementFileDetailStatus",
					"System.Nullable TaxpayerID",
					"System.String TaxTypeCode",
					"System.Nullable TaxTypeID",
					"System.String ErrorMessage"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return validator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(validator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022DefermentStatementFileHeaderID\u0022, SqlDbType.Int, 0, DefermentStatementFileHeaderID);\r\n            query.AddParameter(\u0022Record\u0022, SqlDbType.NVarChar, 0, Record);\r\n            query.AddParameter(\u0022RowIndex\u0022, SqlDbType.Int, 0, RowIndex);\r\n            query.AddParameter(\u0022TaxpayerID\u0022, SqlDbType.Int, 0, TaxpayerID);\r\n            query.AddParameter(\u0022TaxTypeID\u0022, SqlDbType.Int, 0, TaxTypeID);\r\n            query.AddParameter(\u0022DefermentStatementFileDetailStatusID\u0022, SqlDbType.Int, 0, DefermentStatementFileDetailStatus);\r\n            query.AddParameter(\u0022ErrorMessage\u0022, SqlDbType.NVarChar, 0, ErrorMessage);\r\n\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@DefermentStatementFileDetailID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "DefermentStatementFileHeader",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader"
				],
				"Properties": [
					"System.String FileName",
					"System.String FileHeaderPeriod",
					"System.Int32 StatementNumber",
					"System.String Checksum",
					"System.String Notes",
					"System.Int32 TotalProcessedCount",
					"System.String FinalFileName",
					"System.String ImportFileStatusName",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus ImportFileStatus",
					"System.Nullable FileProcessedDate",
					" FileContents",
					"System.Collections.Generic.IList DefermentStatementFileDetails"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return validator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB"
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022FileName\u0022, SqlDbType.NVarChar, 0, FileName);\r\n            query.AddParameter(\u0022FinalFileName\u0022, SqlDbType.NVarChar, 0, FinalFileName);\r\n            query.AddParameter(\u0022Checksum\u0022, SqlDbType.NVarChar, 0, Checksum);\r\n            query.AddParameter(\u0022StatementNumber\u0022, SqlDbType.NVarChar, 0, StatementNumber);\r\n            query.AddParameter(\u0022FileHeaderPeriod\u0022, SqlDbType.NVarChar, 0, FileHeaderPeriod);\r\n            query.AddParameter(\u0022FileProcessedDate\u0022, SqlDbType.DateTime, 0, FileProcessedDate);\r\n            query.AddParameter(\u0022ImportFileStatusID\u0022, SqlDbType.Int, 0, ImportFileStatus);\r\n            query.AddParameter(\u0022Notes\u0022, SqlDbType.NVarChar, 0, Notes);\r\n            query.AddParameter(\u0022TotalProcessedCount\u0022, SqlDbType.Int, 0, TotalProcessedCount);\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@DefermentStatementFileHeaderID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "DisbursedChequesFileDetail",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail"
				],
				"Properties": [
					"System.Int32 DisbursedChequesFileHeaderID",
					"System.String Record",
					"System.String DateText",
					"System.Nullable Date",
					"System.String CompanyAccounts",
					"System.String Account",
					"System.String Description",
					"System.Nullable Debit",
					"System.Nullable Credit",
					"System.String OffsetAccountType",
					"System.String OffsetAccount",
					"System.String PaymentReference",
					"System.String PaymentStatus",
					"System.String AccountIdentification",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus DisbursedChequesFileDetailStatus",
					"System.String ErrorMessage",
					"System.Nullable TaxpayerID",
					"System.Nullable CaseID",
					"System.String RefundIDs"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return disbursedChequesFileDetailValidator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(disbursedChequesFileDetailValidator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022DisbursedChequesFileHeaderID\u0022, SqlDbType.Int, 0, DisbursedChequesFileHeaderID);\r\n            query.AddParameter(\u0022Record\u0022, SqlDbType.NVarChar, 0, Record);\r\n            query.AddParameter(\u0022Date\u0022, SqlDbType.DateTime, 0, Date);\r\n            query.AddParameter(\u0022CompanyAccounts\u0022, SqlDbType.NVarChar, 0, CompanyAccounts);\r\n            query.AddParameter(\u0022Description\u0022, SqlDbType.NVarChar, 0, Description);\r\n            query.AddParameter(\u0022Debit\u0022, SqlDbType.Money, 0, Debit);\r\n            query.AddParameter(\u0022PaymentReference\u0022, SqlDbType.NVarChar, 0, PaymentReference);\r\n            query.AddParameter(\u0022TaxpayerID\u0022, SqlDbType.Int, 0, TaxpayerID);\r\n            query.AddParameter(\u0022CaseID\u0022, SqlDbType.Int, 0, CaseID);\r\n            query.AddParameter(\u0022RefundIDs\u0022, SqlDbType.NVarChar, 0, RefundIDs);\r\n            query.AddParameter(\u0022DisbursedChequesFileDetailStatusID\u0022, SqlDbType.Int, 0, DisbursedChequesFileDetailStatus);\r\n            query.AddParameter(\u0022ErrorMessage\u0022, SqlDbType.NVarChar, 0, ErrorMessage);\r\n\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@DisbursedChequesFileDetailID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "DisbursedChequesFileHeader",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader"
				],
				"Properties": [
					"System.String FileName",
					"System.String Checksum",
					"System.Nullable FileProcessedDate",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus ImportFileStatus",
					"System.String Notes",
					"System.Collections.Generic.IList DisbursedChequesFileDetails",
					" FileContents",
					"System.Int32 TotalProcessedDisbursedChequesCount",
					"System.String FinalFileName"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return disbursedChequesFileHeaderValidator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(disbursedChequesFileHeaderValidator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022FileName\u0022, SqlDbType.NVarChar, 0, FileName);\r\n            query.AddParameter(\u0022FinalFileName\u0022, SqlDbType.NVarChar, 0, FinalFileName);\r\n            query.AddParameter(\u0022Checksum\u0022, SqlDbType.NVarChar, 0, Checksum);\r\n            query.AddParameter(\u0022FileProcessedDate\u0022, SqlDbType.DateTime, 0, FileProcessedDate);\r\n            query.AddParameter(\u0022ImportFileStatusID\u0022, SqlDbType.Int, 0, ImportFileStatus);\r\n            query.AddParameter(\u0022Notes\u0022, SqlDbType.NVarChar, 0, Notes);\r\n            query.AddParameter(\u0022TotalProcessedDisbursedChequesCount\u0022, SqlDbType.Int, 0, TotalProcessedDisbursedChequesCount);\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@DisbursedChequesFileHeaderID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Factories",
				"Name": "QueueItemProcessorFactory",
				"BaseType": "DataTorque.Iho.BusinessObjects.Factories.QueueItemProcessorFactory",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Services.IMessageQueueProcessor",
						"Name": "CreateMessageQueueProcessor",
						"Hash": "ED9EE639EBBD43A1F69777DFE5A8B408711B957248AAAA79BFA868B412659B26",
						"Body": {
							"BodyText": "            return new MessageQueueProcessor(\r\n                loggingFactory,\r\n                queryFactory,\r\n                secondaryQueryFactory,\r\n                messageQueueRepository,\r\n                queueItemRepository,\r\n                executingEnvironment,\r\n                caseSelectionProcessor,\r\n                systemConstantRepository,\r\n                autoRefundProcessor\r\n            );\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Services.IMessageQueueProcessor",
								"DataTorque.Iho.Interfaces.Factories.ILoggingFactory",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.Factories.ISecondaryQueryFactory",
								"DataTorque.Iho.Interfaces.Repositories.IMessageQueueRepository",
								"DataTorque.Iho.Interfaces.Repositories.IQueueItemRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment",
								"DataTorque.Iho.Interfaces.Services.ICaseSelectionProcessor",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.Services.IAutoRefundProcessor"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "DataTorque.Iho.Interfaces.Services.IAutoRefundProcessor",
						"Name": "CreateAutoRefundProcessor",
						"Hash": "83E51BEE857D02D19D5C6020FBD7133CCBB9F30AA291E6106D1959086CD45DD8",
						"Body": {
							"BodyText": "            return new DataTorque.IsleOfMan.BusinessObjects.Services.AutoRefundProcessor(\r\n                taxReturnRepository,\r\n                refundRepository,\r\n                criteriaFactory,\r\n                caseSearcher,\r\n                caseConfigurationRepository,\r\n                loggingFactory,\r\n                executingEnvironment,\r\n                caseRepository\r\n            );\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Services.IAutoRefundProcessor",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository",
								"DataTorque.Iho.Interfaces.Repositories.IRefundRepository",
								"DataTorque.Iho.Interfaces.Factories.ICriteriaFactory",
								"DataTorque.Iho.Interfaces.Search.ICaseSearcher",
								"DataTorque.Iho.Interfaces.Repositories.ICaseConfigurationRepository",
								"DataTorque.Iho.Interfaces.Factories.ILoggingFactory",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment",
								"DataTorque.Iho.Interfaces.Repositories.ICaseRepository"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "FlatRatePeriod",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod"
				],
				"Properties": [
					"System.Int32 TaxpayerID",
					"System.String FlatRate",
					"System.Int32 FlatRateSchemeID",
					"System.Nullable CommenceDate",
					"System.Nullable CeasedDate"
				],
				"Methods": [
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n\r\n            query.AddParameter(\u0022TaxpayerId\u0022, SqlDbType.Int, 0, TaxpayerID);\r\n            query.AddParameter(\u0022FlatRateSchemeID\u0022, SqlDbType.Int, 0, FlatRateSchemeID);\r\n            query.AddParameter(\u0022CommenceDate\u0022, SqlDbType.DateTime, 0, CommenceDate);\r\n            query.AddParameter(\u0022CeasedDate\u0022, SqlDbType.DateTime, 0, CeasedDate);\r\n\r\n            query.ExecuteQuery();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            IValidationResult result = new ValidationResult();\r\n            if (CommenceDate \u003E CeasedDate)\r\n            {\r\n                result.AddError(\u0022Commence Date\u0022, \u0022Commencement Date Has to be before Cease Date.\u0022);\r\n            }\r\n\r\n            if (!(FlatRateSchemeID \u003E 0))\r\n            {\r\n                result.AddError(\u0022Trade\u0022, \u0022Select A Trade.\u0022);\r\n            }\r\n\r\n            if (TaxpayerID \u003E 0)\r\n            {\r\n                result.AddError(\u0022Taxpayer\u0022, \u0022Invalid object no taxpayer attached.\u0022);\r\n            }\r\n\r\n            if (CommenceDate == null)\r\n            {\r\n                result.AddError(\u0022Commence Date\u0022, \u0022Trade has to have a Commencement Date.\u0022);\r\n            }\r\n\r\n            AddValidationResultToValidationErrors(result);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "InaccuracyPenalty",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
				],
				"Properties": [
					"System.Int32 FromInaccuracyPenaltyID",
					"System.Int32 TaxpayerID",
					"System.Int32 TaxTypeID",
					"System.String TaxType",
					"System.Int32 YearID",
					"System.Int32 PeriodID",
					"System.String Period",
					"System.Nullable EffectiveDate",
					"System.Decimal Amount",
					"System.Decimal CalculatedPLI",
					"System.Decimal AssessedPLI",
					"System.Int32 PenaltyAssessmentReasonID",
					"System.Int32 CustomerBehaviourID",
					"System.Int32 DisclosureID",
					"System.Decimal Assistance",
					"System.Double PenaltyRate",
					"System.Decimal CalculatedPenalty",
					"System.Decimal PenaltyReductions",
					"System.Decimal TotalPenalty",
					"System.Nullable CaseID",
					"System.String PenaltyReasonDescription",
					"System.Nullable SuspensionEndDate",
					"DataTorque.Iho.Interfaces.Common.ISmartBindingList CaseReturnPeriods",
					"System.Boolean IsSuspended",
					"System.Decimal HelpingPercentage",
					"System.Decimal TellingPercentage",
					"System.Decimal GivingPercentage",
					"System.String HelpingReason",
					"System.String TellingReason",
					"System.String GivingReason",
					"System.String SuspendedString",
					"System.Boolean IsChanged",
					"System.Boolean IsOriginalData",
					"System.Boolean IsNew"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.String",
						"Name": "ToString",
						"Hash": "14CAD1D2A3B792692B6766F7F6BBBFEB6FB32C90A668525ACC02A691CA9B9F2D",
						"Body": {
							"BodyText": "            return $\u0022Inaccuracy Penalty amount Taxpayer: {TaxpayerID} TaxTypeID: {TaxTypeID} YearID: {YearID} PeriodID: {PeriodID} Amount: ${Amount} IsSuspended: {IsSuspended}\u0022;\r\n"
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8"
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            int maxTellingPercentage = systemConstantRepository.GetInteger(\u0022InaccuracyPenaltyTellingPercentage\u0022, 30);\r\n            int maxHelpingPercentage = systemConstantRepository.GetInteger(\u0022InaccuracyPenaltyHelpingPercentage\u0022, 40);\r\n            int maxGivingPercentage = systemConstantRepository.GetInteger(\u0022InaccuracyPenaltyGivingPercentage\u0022, 30);\r\n\r\n            if (TellingPercentage \u003E maxTellingPercentage || TellingPercentage \u003C 0)\r\n            {\r\n                AddValidationError(\u0022TellingPercentage\u0022, string.Format(\u0022Telling must be a number between 0-{0} (inclusive).\u0022, maxTellingPercentage));\r\n            }\r\n            if (HelpingPercentage \u003E maxHelpingPercentage || HelpingPercentage \u003C 0)\r\n            {\r\n                AddValidationError(\u0022HelpingPercentage\u0022, string.Format(\u0022Helping must be a number between 0-{0} (inclusive).\u0022, maxHelpingPercentage));\r\n            }\r\n            if (GivingPercentage \u003E maxGivingPercentage || GivingPercentage \u003C 0)\r\n            {\r\n                AddValidationError(\u0022GivingPercentage\u0022, string.Format(\u0022Giving must be a number between 0-{0} (inclusive).\u0022, maxGivingPercentage));\r\n            }\r\n\r\n            if (CustomerBehaviourID \u003E 0 \u0026\u0026 DisclosureID \u003E 0 \u0026\u0026 AssessedPLI \u003E 0)\r\n            {\r\n                if (string.IsNullOrEmpty(TellingReason))\r\n                {\r\n                    AddValidationError(\u0022TellingReason\u0022, ResourceHelper.GetApplicationResource(\u0022ValidationErrorMessage_InaccuracyPenalty_ATellingReasonMustBeSupplied\u0022));\r\n                }\r\n                if (string.IsNullOrEmpty(HelpingReason))\r\n                {\r\n                    AddValidationError(\u0022HelpingReason\u0022, ResourceHelper.GetApplicationResource(\u0022ValidationErrorMessage_InaccuracyPenalty_AHelpingReasonMustBeSupplied\u0022));\r\n                }\r\n                if (string.IsNullOrEmpty(GivingReason))\r\n                {\r\n                    AddValidationError(\u0022GivingReason\u0022, ResourceHelper.GetApplicationResource(\u0022ValidationErrorMessage_InaccuracyPenalty_AGivingReasonMustBeSupplied\u0022));\r\n                }\r\n            }\r\n\r\n            if (IsSuspended \u0026\u0026 SuspensionEndDate == null)\r\n            {\r\n                AddValidationError(\u0022SuspensionEndDate\u0022, ResourceHelper.GetApplicationResource(\u0022ValidationErrorMessage_InaccuracyPenalty_ASuspensionEndDateMustBeSupplied\u0022));\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            InternalSaveData();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "IntegrationBankExtractFileDetail",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail"
				],
				"Properties": [
					"System.Int32 IntegrationBankExtractFileHeaderID",
					"System.String Record",
					"System.Nullable SortCode",
					"System.Nullable AccountNumber",
					"System.String AccountAlias",
					"System.String AccountShortName",
					"System.String Currency",
					"System.String AccountType",
					"System.String BIC",
					"System.String BankName",
					"System.String BranchName",
					"System.String DateText",
					"System.Nullable Date",
					"System.String Narrative1",
					"System.String Narrative2",
					"System.String Narrative3",
					"System.String Narrative4",
					"System.String Narrative5",
					"System.String Type",
					"System.Nullable Debit",
					"System.Nullable Credit",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus IntegrationBankExtractFileDetailStatus",
					"System.String ErrorMessage",
					"System.Nullable TaxpayerID",
					"System.Nullable PaymentHeaderID",
					"System.Nullable SubPaymentHeaderID",
					"System.Nullable CaseID",
					"System.String IntegrationBankExtractFileDetailStatusName",
					"System.String TIN",
					"System.String TaxType",
					"System.String Year",
					"System.String Period",
					"System.Nullable CaseNo"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return integrationBankExtractFileDetailValidator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(integrationBankExtractFileDetailValidator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022IntegrationBankExtractFileHeaderID\u0022, SqlDbType.Int, 0, IntegrationBankExtractFileHeaderID);\r\n            query.AddParameter(\u0022Record\u0022, SqlDbType.NVarChar, 0, Record);\r\n            query.AddParameter(\u0022Narrative1\u0022, SqlDbType.NVarChar, 0, Narrative1);\r\n            query.AddParameter(\u0022Narrative2\u0022, SqlDbType.NVarChar, 0, Narrative2);\r\n            query.AddParameter(\u0022Narrative3\u0022, SqlDbType.NVarChar, 0, Narrative3);\r\n            query.AddParameter(\u0022Narrative4\u0022, SqlDbType.NVarChar, 0, Narrative4);\r\n            query.AddParameter(\u0022Narrative5\u0022, SqlDbType.NVarChar, 0, Narrative5);\r\n            query.AddParameter(\u0022Credit\u0022, SqlDbType.Money, 0, Credit);\r\n            query.AddParameter(\u0022Type\u0022, SqlDbType.NVarChar, 0, Type);\r\n            query.AddParameter(\u0022TaxpayerID\u0022, SqlDbType.Int, 0, TaxpayerID);\r\n            query.AddParameter(\u0022PaymentHeaderID\u0022, SqlDbType.Int, 0, PaymentHeaderID);\r\n            query.AddParameter(\u0022SubPaymentHeaderID\u0022, SqlDbType.Int, 0, SubPaymentHeaderID);\r\n            query.AddParameter(\u0022CaseID\u0022, SqlDbType.Int, 0, CaseID);\r\n            query.AddParameter(\u0022Date\u0022, SqlDbType.DateTime, 0, Date);\r\n            query.AddParameter(\u0022IntegrationBankExtractFileDetailStatusID\u0022, SqlDbType.Int, 0, IntegrationBankExtractFileDetailStatus);\r\n            query.AddParameter(\u0022ErrorMessage\u0022, SqlDbType.NVarChar, 0, ErrorMessage);\r\n\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@IntegrationBankExtractFileDetailID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "AssignProperties",
						"Hash": "D21F76F571F16FF6FC17FB9D1DCD43217691B3D126C87DE5C19560716BA9C80B",
						"Parameters": [
							"System.Data.DataRow dataRow"
						],
						"Body": {
							"BodyText": "            ID = ParsingHelper.ParseInt(dataRow[\u0022IntegrationBankExtractFileDetailID\u0022]);\r\n            Date = ParsingHelper.ParseDateTime(dataRow[\u0022Date\u0022]);\r\n            Narrative1 = ParsingHelper.ParseString(dataRow[\u0022Narrative1\u0022]);\r\n            Narrative2 = ParsingHelper.ParseString(dataRow[\u0022Narrative2\u0022]);\r\n            Narrative3 = ParsingHelper.ParseString(dataRow[\u0022Narrative3\u0022]);\r\n            Narrative4 = ParsingHelper.ParseString(dataRow[\u0022Narrative4\u0022]);\r\n            Narrative5 = ParsingHelper.ParseString(dataRow[\u0022Narrative5\u0022]);\r\n            IntegrationBankExtractFileDetailStatus = (ImportFileDetailStatus)ParsingHelper.ParseInt(dataRow[\u0022IntegrationBankExtractFileDetailStatusID\u0022]);\r\n            IntegrationBankExtractFileDetailStatusName = ParsingHelper.ParseString(dataRow[\u0022ImportFileDetailStatus\u0022]);\r\n            Type = ParsingHelper.ParseString(dataRow[\u0022Type\u0022]);\r\n            Credit = ParsingHelper.ParseNullableDecimal(dataRow[\u0022Credit\u0022]);\r\n            PaymentHeaderID = ParsingHelper.ParseNullableInt(dataRow[\u0022PaymentHeaderID\u0022]);\r\n            CaseNo = ParsingHelper.ParseNullableInt(dataRow[\u0022CaseNo\u0022]);\r\n            TIN = ParsingHelper.ParseString(dataRow[\u0022TIN\u0022]);\r\n            TaxType = ParsingHelper.ParseString(dataRow[\u0022TaxType\u0022]);\r\n            Year = ParsingHelper.ParseString(dataRow[\u0022Year\u0022]);\r\n            Period = ParsingHelper.ParseString(dataRow[\u0022Period\u0022]);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "IntegrationBankExtractFileHeader",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader"
				],
				"Properties": [
					"System.String FileName",
					"System.String Checksum",
					"System.Nullable FileProcessedDate",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus ImportFileStatus",
					"System.String Notes",
					"System.Collections.Generic.IList IntegrationBankExtractFileDetails",
					" FileContents",
					"System.Int32 TotalProcessedPaymentCount",
					"System.String FinalFileName",
					"System.String ImportFileStatusName",
					"DataTorque.Iho.Interfaces.Common.ISmartBindingList IntegrationBankExtractFileDetailsBindingList"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return integrationBankExtractFileHeaderValidator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(integrationBankExtractFileHeaderValidator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022FileName\u0022, SqlDbType.NVarChar, 0, FileName);\r\n            query.AddParameter(\u0022FinalFileName\u0022, SqlDbType.NVarChar, 0, FinalFileName);\r\n            query.AddParameter(\u0022Checksum\u0022, SqlDbType.NVarChar, 0, Checksum);\r\n            query.AddParameter(\u0022FileProcessedDate\u0022, SqlDbType.DateTime, 0, FileProcessedDate);\r\n            query.AddParameter(\u0022ImportFileStatusID\u0022, SqlDbType.Int, 0, ImportFileStatus);\r\n            query.AddParameter(\u0022Notes\u0022, SqlDbType.NVarChar, 0, Notes);\r\n            query.AddParameter(\u0022TotalProcessedPaymentCount\u0022, SqlDbType.Int, 0, TotalProcessedPaymentCount);\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@IntegrationBankExtractFileHeaderID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "AssignProperties",
						"Hash": "D21F76F571F16FF6FC17FB9D1DCD43217691B3D126C87DE5C19560716BA9C80B",
						"Parameters": [
							"System.Data.DataRow dataRow"
						],
						"Body": {
							"BodyText": "            ID = ParsingHelper.ParseInt(dataRow[\u0022IntegrationBankExtractFileHeaderID\u0022]);\r\n            FileName = ParsingHelper.ParseString(dataRow[\u0022FileName\u0022]);\r\n            ImportFileStatusName = ParsingHelper.ParseString(dataRow[\u0022ImportFileStatus\u0022]);\r\n            ImportFileStatus = (ImportFileStatus)ParsingHelper.ParseInt(dataRow[\u0022ImportFileStatusID\u0022]);\r\n            FinalFileName = ParsingHelper.ParseString(dataRow[\u0022FinalFileName\u0022]);\r\n            FileProcessedDate = ParsingHelper.ParseDateTime(dataRow[\u0022FileProcessedDate\u0022]);\r\n            TotalProcessedPaymentCount = ParsingHelper.ParseInt(dataRow[\u0022TotalProcessedPaymentCount\u0022]);\r\n            Notes = ParsingHelper.ParseString(dataRow[\u0022Notes\u0022]);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "IOMBankExtract",
				"BaseType": "DataTorque.Iho.BusinessObjects.BaseBankExtract",
				"Properties": [
					"System.String HeaderFileName",
					"System.Int32 HeaderFileSize",
					"System.String HeaderFileContents",
					"System.String HeaderFileContentFormat",
					"System.String HeaderFilePath",
					"System.Decimal TotalApprovedAmount",
					"System.String NextWorkingDate"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "void",
						"Name": "GenerateBankExtractFile",
						"Hash": "85C7A1A2306582ECE8C6707F1174440B4A6E1985638DFDCA629C9FBAF5803C94",
						"Parameters": [
							"System.Collections.Generic.IList selectedRefunds",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            base.GenerateBankExtractFile(selectedRefunds, transaction);\r\n\r\n            if (!string.IsNullOrEmpty(HeaderFileContentFormat))\r\n            {\r\n                if (selectedRefunds?.Count \u003E 0)\r\n                {\r\n                    TotalApprovedAmount = selectedRefunds.Sum(x =\u003E x.ApprovedAmount);\r\n                }\r\n\r\n                HeaderFileName = $\u0022{FileName}_header\u0022;\r\n                HeaderFileContents = ReplaceTokens(HeaderFileContentFormat, GetRefundTaskTokens());\r\n                HeaderFileSize = Encoding.UTF8.GetByteCount(HeaderFileContents);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.BaseBankExtract",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund ApprovedAmount"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "void",
						"Name": "GetBankExtractFileFormatting",
						"Hash": "303E8D6CD6E6D090437BAD1A5D570E19E86A8EC7479DFB0C8D6F48897BCD2A98",
						"Parameters": [
							"System.Int32 paymentMethodID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_BankExtractFileFormat_selectByRefundOptionID\u0022, transaction);\r\n            query.AddParameter(\u0022@RefundOptionID\u0022, SqlDbType.Int, 0, paymentMethodID);\r\n\r\n            query.ExecuteQuery();\r\n            // Query only returns the most recent active version of the formatting\r\n            if (query.DataTable.Rows.Count == 1)\r\n            {\r\n                HeaderTextFormat = ParsingHelper.ParseString(query.DataTable.Rows[0][\u0022HeaderTextFormat\u0022]);\r\n                ContentFormat = ParsingHelper.ParseString(query.DataTable.Rows[0][\u0022ContentFormat\u0022]);\r\n                FooterTextFormat = ParsingHelper.ParseString(query.DataTable.Rows[0][\u0022FooterTextFormat\u0022]);\r\n                FileNameFormat = ParsingHelper.ParseString(query.DataTable.Rows[0][\u0022FileNameFormat\u0022]);\r\n                FileLocationSystemConstant = ParsingHelper.ParseString(query.DataTable.Rows[0][\u0022FileLocation\u0022]);\r\n                HeaderFileContentFormat = ParsingHelper.ParseString(query.DataTable.Rows[0][\u0022HeaderFileContentFormat\u0022]);\r\n\r\n                if (!string.IsNullOrEmpty(FileLocationSystemConstant))\r\n                {\r\n                    FileLocation = systemConstantRepository.GetString(FileLocationSystemConstant);\r\n                }\r\n                else\r\n                {\r\n                    ErrorList.Add(ResourceHelper.GetApplicationResource(\u0022Validation_FileLocationNotConfigured\u0022));\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository"
							],
							"ReferencedStoredProcedures": [
								"spf_BankExtractFileFormat_selectByRefundOptionID"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetString"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "System.Collections.Generic.IDictionary",
						"Name": "GetRefundTaskTokens",
						"Hash": "F6536EEDB0FDD4DCFEC5478AE81DB9355599434418ABC17154C16B66A629D062",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund refund"
						],
						"Body": {
							"BodyText": "            IDictionary\u003Cstring, string\u003E tokens = base.GetRefundTaskTokens(refund);\r\n\r\n            tokens.Add(\u0022\u003CDateGeneratedMediumFormat\u003E\u0022, $\u0022{DateTime.Now:dd-MMM-yyyy}\u0022);\r\n            tokens.Add(\u0022\u003CDateGeneratedShortFormat\u003E\u0022, $\u0022{DateTime.Now:dd/MM/yyyy}\u0022);\r\n\r\n            IList\u003CIRepaymentSetup\u003E repaymentSetups = repaymentSetupRepository.GetRepaymentSetups();\r\n\r\n            for (char c = \u0027A\u0027; c \u003C= \u0027Z\u0027; c\u002B\u002B)\r\n            {\r\n                IRepaymentSetup repaymentSetup = repaymentSetups.FirstOrDefault(x =\u003E x.Line.Equals(c.ToString(), StringComparison.CurrentCultureIgnoreCase));\r\n\r\n                if (repaymentSetup != null)\r\n                {\r\n                    tokens.Add($\u0022\u003C{c}\u003E\u0022, repaymentSetup.Value);\r\n                }\r\n            }\r\n\r\n            if (refund != null \u0026\u0026 refund.TaxpayerId \u003E 0)\r\n            {\r\n                tokens.Add(\u0022\u003CRegimeNumber\u003E\u0022, $\u0022{refund.TaxpayerId}_{refund.RefundCaseID}\u0022);\r\n                tokens.Add(\u0022\u003CRegime\u003E\u0022, refund.TaxTypeCode);\r\n\r\n                ITaxpayer taxpayer = taxpayerRepository.FindTaxpayer(refund.TaxpayerId);\r\n\r\n                if (taxpayer != null)\r\n                {\r\n                    if (taxpayer.PrimaryTaxpayerContact?.Addresses?.Count \u003E 0)\r\n                    {\r\n                        IContactAddress address = taxpayer.PrimaryTaxpayerContact.Addresses.FirstOrDefault(a =\u003E a.IsPrimary);\r\n\r\n                        string poBox = address.POBox.Trim().Replace(\u0022,\u0022, string.Empty);\r\n                        string address1 = address.Address1.Trim().Replace(\u0022,\u0022, string.Empty);\r\n                        string poBoxAndAddress = $\u0022{poBox} {address1}\u0022.Trim();\r\n\r\n                        tokens.Add(\u0022\u003CPOBoxAndAddress1\u003E\u0022, poBoxAndAddress);\r\n                        tokens.Add(\u0022\u003CAddress2\u003E\u0022, address.Address2.Replace(\u0022,\u0022, string.Empty));\r\n                        tokens.Add(\u0022\u003CAddress3\u003E\u0022, address.Address3.Replace(\u0022,\u0022, string.Empty));\r\n                        tokens.Add(\u0022\u003CTownVillage\u003E\u0022, address.Village);\r\n                        tokens.Add(\u0022\u003CCountryPostCode\u003E\u0022, $\u0022{address.Country.Replace(\u0022,\u0022, string.Empty)} {address.PostCode.Replace(\u0022,\u0022, string.Empty)}\u0022.Trim());\r\n                    }\r\n\r\n                    tokens.Add(\u0022\u003CIOMAccountName\u003E\u0022, refund.BankBranchName?.Length \u003E 18 ? refund.BankBranchName.Substring(0, 18) : refund.BankBranchName);\r\n\r\n                    if (!string.IsNullOrEmpty(refund.AccountNumber))\r\n                    {\r\n                        string accountNumber = refund.AccountNumber.Replace(\u0022-\u0022, string.Empty);\r\n\r\n                        if (accountNumber.Length \u003E= 8)\r\n                        {\r\n                            tokens.Add(\u0022\u003CSortCode\u003E\u0022, accountNumber.Substring(0, 6));//The first six digits is the sort code\r\n                            tokens.Add(\u0022\u003CIOMAccountNumber\u003E\u0022, accountNumber.Substring(accountNumber.Length - 8)); //Only show the last 8 digits.\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            IUser user = userRepository.FindUser(CreatedByUserID);\r\n\r\n            if (user != null)\r\n            {\r\n                tokens.Add(\u0022\u003CUserName\u003E\u0022, user.UserName);\r\n            }\r\n\r\n            tokens.Add(\u0022\u003CTotalApprovedAmount\u003E\u0022, TotalApprovedAmount.ToString(\u00220.00\u0022));\r\n\r\n            if (string.IsNullOrEmpty(NextWorkingDate))\r\n            {\r\n                NextWorkingDate = $\u0022{dateCalculator.GetNextWorkingDay(DateTime.Now.Date.AddDays(1)):ddMMyyyy}\u0022;\r\n            }\r\n\r\n            tokens.Add(\u0022\u003CProcessingDate\u003E\u0022, NextWorkingDate);\r\n\r\n            return tokens;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.BaseBankExtract",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IRepaymentSetup",
								"DataTorque.IsleOfMan.Interfaces.Repositories.IRepaymentSetupRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContact",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUser",
								"DataTorque.Iho.Interfaces.Repositories.IUserRepository",
								"DataTorque.Iho.Interfaces.Calculators.IWorkingDayDateCalculator"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Repositories.IRepaymentSetupRepository GetRepaymentSetups",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IRepaymentSetup Line",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IRepaymentSetup Value",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund TaxpayerId",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund RefundCaseID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund TaxTypeCode",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository FindTaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer PrimaryTaxpayerContact",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress IsPrimary",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress POBox",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Address1",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Address2",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Address3",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Village",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Country",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress PostCode",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund BankBranchName",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund AccountNumber",
								"DataTorque.Iho.Interfaces.Repositories.IUserRepository FindUser",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUser UserName",
								"DataTorque.Iho.Interfaces.Calculators.IWorkingDayDateCalculator GetNextWorkingDay"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "IOMRefundExtract",
				"BaseType": "DataTorque.Iho.BusinessObjects.RefundExtract",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "void",
						"Name": "LoadAvailableRefunds",
						"Hash": "ECC42419BD54BB72B32BC94B6D40C9505138233937DA5C59A6479CA4B246F1EB",
						"Parameters": [
							"System.Nullable taxTypeId",
							"System.Nullable yearId",
							"System.Nullable periodId",
							"System.Nullable refundOptionID",
							"System.Nullable taxpayerID"
						],
						"Body": {
							"BodyText": "            AvailableRefunds.Clear();\r\n\r\n            bool showAll = true;\r\n\r\n            if (refundOptionID.HasValue)\r\n            {\r\n                IStandardLookupItem refundOption = standardLookupRepository.FindItemByID(\u0022RefundOption\u0022, refundOptionID.Value);\r\n\r\n                //When BACS (Bank transfer) option is selected, we only want to show taxpayers who provided a bank account.\r\n                if (refundOption != null \u0026\u0026 refundOption.Code.Contains(\u0022BACS\u0022))\r\n                {\r\n                    showAll = false;\r\n                }\r\n            }\r\n\r\n            foreach (IUnpaidRefund unpaidRefund in AllAvailableRefunds.Where(r =\u003E\r\n\t                     (!taxTypeId.HasValue || r.TaxTypeId == taxTypeId.Value) \u0026\u0026\r\n\t                     (!yearId.HasValue || r.YearID == yearId.Value) \u0026\u0026\r\n\t                     (!periodId.HasValue || r.PeriodID == periodId.Value) \u0026\u0026\r\n\t                     (!taxpayerID.HasValue || r.TaxpayerId == taxpayerID.Value) \u0026\u0026\r\n\t                     (r.HasBankAccount || showAll)))\r\n            {\r\n\t            AvailableRefunds.Add((IUnpaidRefund)unpaidRefund.Clone(false));\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem Code",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund TaxTypeId",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund YearID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund PeriodID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund TaxpayerId",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund HasBankAccount",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUnpaidRefund Clone"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "IsleOfManAssemblyRegisterHelper",
				"BaseType": "DataTorque.Iho.BusinessObjects.AssemblyRegisterHelper",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "void",
						"Name": "RegisterBusinessObjects",
						"Hash": "C9360CB09DA2F65A8DA75E6253A9E33583C6B748670A025DBC8B845C8C6EBBEE",
						"Parameters": [
							"Unlinked.ContainerBuilder builder"
						],
						"Body": {
							"BodyText": "            base.RegisterBusinessObjects(builder);\r\n\r\n            // register IsleOfMan specific calculators\r\n            RegisterCalculators(builder, \u0022DataTorque.IsleOfMan.BusinessObjects\u0022, \u0022DataTorque.IsleOfMan.BusinessObjects.Calculators\u0022);\r\n\r\n            // now register the rest of the types from the business objects class\r\n            RegisterAssemblyByName(builder, \u0022DataTorque.IsleOfMan.BusinessObjects\u0022);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.AssemblyRegisterHelper"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "RegisterServiceAssembly",
						"Hash": "8F2FDD3B5D3C722EE76BA7033A28E642018AB4BDC679CE8CF8EAE1010F8AEB7E",
						"Parameters": [
							"Unlinked.ContainerBuilder builder"
						],
						"Body": {
							"BodyText": "            Assembly assembly = Assembly.Load(\u0022DataTorque.IsleOfMan.Service\u0022);\r\n            if (assembly != null)\r\n            {\r\n                builder.RegisterAssemblyTypes(assembly)\r\n                       .Where(t =\u003E t.Name.EndsWith(\u0022Process\u0022))\r\n                       .AsImplementedInterfaces()\r\n                       .AsSelf();\r\n            }\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Mappers",
				"Name": "BankStatementFileDetailMapper",
				"BaseType": "Unlinked.GenericBusinessObjectMapper",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Mappers.IBankStatementFileDetailMapper"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "void",
						"Name": "MapFromFile",
						"Hash": "21344C8A2BCFD6E4B555FDA493FCEB1BEECD5B370B2A961DFDD5ED20A282CE06",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail bankStatementFileDetail",
							"System.String record",
							"System.String requiredAccountNumber",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bankStatementFileDetail.Record = record;\r\n            string[] columnData = record.Split(\u0027,\u0027);\r\n            if (columnData.Length == 18)\r\n            {\r\n                string accountNumber = columnData[1]; ;\r\n                if (accountNumber != requiredAccountNumber)\r\n                {\r\n                    bankStatementFileDetail.ValidationErrorDictionary.Add(\u0022Amount\u0022, $\u0022Account number is not \u0027{requiredAccountNumber}\u0027\u0022);\r\n                }\r\n\r\n                bankStatementFileDetail.Currency = columnData[4];\r\n                bankStatementFileDetail.CurrencyID = bankStatementFileParser.GetCurrencyID(bankStatementFileDetail.Currency, transaction);\r\n\r\n                bankStatementFileDetail.TransactionDate = bankStatementFileParser.GetDateTime(columnData[9]) ?? DateTime.MinValue; // BankStatementFileDetail doesn\u0027t allow null in TransactionDate, so need to use MinValue instead.\r\n                bankStatementFileDetail.Narrative1 = columnData[10];\r\n                bankStatementFileDetail.Narrative2 = columnData[11];\r\n                bankStatementFileDetail.Narrative3 = columnData[12];\r\n                bankStatementFileDetail.Narrative4 = columnData[13];\r\n                bankStatementFileDetail.Narrative5 = columnData[14];\r\n\r\n                bankStatementFileDetail.BankStatementLineType = columnData[15];\r\n                bankStatementFileDetail.BankStatementLineTypeID = bankStatementFileParser.GetBankStatementLineTypeID(bankStatementFileDetail.BankStatementLineType, transaction);\r\n\r\n                // if no line type is provided, or it isn\u0027t found, then we set it to Unknown\r\n                if (bankStatementFileDetail.BankStatementLineTypeID == null)\r\n                {\r\n                    bankStatementFileDetail.BankStatementLineType = \u0022Unknown\u0022;\r\n                    bankStatementFileDetail.BankStatementLineTypeID = bankStatementFileParser.GetBankStatementLineTypeID(\u0022Unknown\u0022, transaction);\r\n                }\r\n\r\n                decimal? debit = ParsingHelper.ParseNullableDecimal(columnData[16]);\r\n                decimal? credit = ParsingHelper.ParseNullableDecimal(columnData[17]);\r\n                if (debit.HasValue \u0026\u0026 credit.HasValue)\r\n                {\r\n                    bankStatementFileDetail.ValidationErrorDictionary.Add(\u0022Amount\u0022, \u0022Both Debit and Credit provided.\u0022);\r\n                    bankStatementFileDetail.Amount = 0;\r\n                }\r\n                else if (debit.HasValue)\r\n                {\r\n                    bankStatementFileDetail.Amount = -Math.Abs(debit.Value);\r\n                }\r\n                else if (credit.HasValue)\r\n                {\r\n                    bankStatementFileDetail.Amount = Math.Abs(credit.Value);\r\n                }\r\n                else\r\n                {\r\n                    bankStatementFileDetail.ValidationErrorDictionary.Add(\u0022Amount\u0022, \u0022A value must be provided for either Debit or Credit.\u0022);\r\n                    bankStatementFileDetail.Amount = 0;\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IBankStatementFileParser",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ValidationErrorDictionary",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Currency",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail CurrencyID",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IBankStatementFileParser GetCurrencyID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail TransactionDate",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IBankStatementFileParser GetDateTime",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative1",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative2",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative3",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative4",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative5",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail BankStatementLineType",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail BankStatementLineTypeID",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IBankStatementFileParser GetBankStatementLineTypeID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Amount"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Mappers",
				"Name": "ChangeOfCompanyNameFileDetailMapper",
				"BaseType": "Unlinked.GenericBusinessObjectMapper",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Mappers.IChangeOfCompanyNameFileDetailMapper"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "void",
						"Name": "MapFromFile",
						"Hash": "F83BC6B53A85957A36709B6C8907DCFBA8E00A8C03E518FC66457BD2EF5CD304",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail changeOfCompanyNameFileDetail",
							"System.String record"
						],
						"Body": {
							"BodyText": "            changeOfCompanyNameFileDetail.Record = record;\r\n            string[] columnData = record.Split(\u0027,\u0027);\r\n            if (columnData.Length == 3)\r\n            {\r\n                changeOfCompanyNameFileDetail.CompanyNumber = columnData[0];\r\n                changeOfCompanyNameFileDetail.CompanyName = columnData[1];\r\n                changeOfCompanyNameFileDetail.TradeName = columnData[2];\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail CompanyNumber",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail CompanyName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail TradeName"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Mappers",
				"Name": "ChangeOfRegisteredOfficeFileDetailMapper",
				"BaseType": "Unlinked.GenericBusinessObjectMapper",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Mappers.IChangeOfRegisteredOfficeFileDetailMapper"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "void",
						"Name": "MapFromFile",
						"Hash": "7F5855E9C05F57213D5EC0BE3BCBC0EED444CE677657B205EAEA239BD9187914",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail changeOfRegisteredOfficeFileDetail",
							"System.String record"
						],
						"Body": {
							"BodyText": "            changeOfRegisteredOfficeFileDetail.Record = record;\r\n            string[] columnData = record.Split(\u0027,\u0027);\r\n            if (columnData.Length == 8)\r\n            {\r\n                changeOfRegisteredOfficeFileDetail.CompanyNumber = columnData[0];\r\n                changeOfRegisteredOfficeFileDetail.CompanyName = columnData[1];\r\n                changeOfRegisteredOfficeFileDetail.AddressLine1 = columnData[2];\r\n                changeOfRegisteredOfficeFileDetail.AddressLine2 = columnData[3];\r\n                changeOfRegisteredOfficeFileDetail.AddressLine3 = columnData[4];\r\n                changeOfRegisteredOfficeFileDetail.Village = columnData[5];\r\n                changeOfRegisteredOfficeFileDetail.POBox = columnData[6];\r\n                changeOfRegisteredOfficeFileDetail.PostCode = columnData[7];\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail CompanyNumber",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail CompanyName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail AddressLine1",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail AddressLine2",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail AddressLine3",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail Village",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail POBox",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail PostCode"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Mappers",
				"Name": "DefermentStatementFileDetailMapper",
				"BaseType": "Unlinked.GenericBusinessObjectMapper",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Mappers.IDefermentStatementFileDetailMapper"
				],
				"Methods": [
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "MapFromFile",
						"Hash": "4B60E3B96490B513218A4D506449CF56567D2DEFBAEF35C68523AA337CEAD3B4",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail defermentStatementFileDetail",
							"System.String record"
						],
						"Body": {
							"BodyText": "            //will be used with return data\r\n            defermentStatementFileDetail.Record = record;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail Record"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Mappers",
				"Name": "DisbursedChequesFileDetailMapper",
				"BaseType": "Unlinked.GenericBusinessObjectMapper",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Mappers.IDisbursedChequesFileDetailMapper"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "void",
						"Name": "MapFromFile",
						"Hash": "8DC50845CA5FF201BBA069BBCC33A00BC9C3496FCAF1A950972C58F72EBFDEBB",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail disbursedChequesFileDetail",
							"System.String record"
						],
						"Body": {
							"BodyText": "            disbursedChequesFileDetail.Record = record;\r\n            string[] columnData = record.Split(\u0027,\u0027);\r\n            if (columnData.Length == 11)\r\n            {\r\n                disbursedChequesFileDetail.Date = disbursedChequesFileParser.GetDateTime(columnData[0]);\r\n                disbursedChequesFileDetail.DateText = columnData[0];\r\n                disbursedChequesFileDetail.CompanyAccounts = columnData[1];\r\n                disbursedChequesFileDetail.Account = columnData[2];\r\n                disbursedChequesFileDetail.Description = columnData[3];\r\n                disbursedChequesFileDetail.Debit = ParsingHelper.ParseNullableDecimal(columnData[4]);\r\n                disbursedChequesFileDetail.Credit = ParsingHelper.ParseNullableDecimal(columnData[5]);\r\n                disbursedChequesFileDetail.OffsetAccountType = columnData[6];\r\n                disbursedChequesFileDetail.OffsetAccount = columnData[7];\r\n                disbursedChequesFileDetail.PaymentReference = columnData[8];\r\n                disbursedChequesFileDetail.PaymentStatus = columnData[9];\r\n                disbursedChequesFileDetail.AccountIdentification = columnData[10];\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDisbursedChequesFileParser"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Date",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDisbursedChequesFileParser GetDateTime",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail DateText",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail CompanyAccounts",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Account",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Description",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Debit",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Credit",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail OffsetAccountType",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail OffsetAccount",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail PaymentReference",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail PaymentStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail AccountIdentification"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Mappers",
				"Name": "IntegrationBankExtractFileDetailMapper",
				"BaseType": "Unlinked.GenericBusinessObjectMapper",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Mappers.IIntegrationBankExtractFileDetailMapper"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "void",
						"Name": "MapFromFile",
						"Hash": "D7B2B9EB1654434CA54B8C50BB34B18BFF7803B892E57027C765C9273216E6ED",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail integrationBankExtractFileDetail",
							"System.String record"
						],
						"Body": {
							"BodyText": "            integrationBankExtractFileDetail.Record = record;\r\n            string[] columnData = record.Split(\u0027,\u0027);\r\n            if (columnData.Length == 18)\r\n            {\r\n                integrationBankExtractFileDetail.SortCode = ParsingHelper.ParseNullableInt(columnData[0]);\r\n                integrationBankExtractFileDetail.AccountNumber = ParsingHelper.ParseNullableInt(columnData[1]);\r\n                integrationBankExtractFileDetail.AccountAlias = columnData[2];\r\n                integrationBankExtractFileDetail.AccountShortName = columnData[3];\r\n                integrationBankExtractFileDetail.Currency = columnData[4];\r\n                integrationBankExtractFileDetail.AccountType = columnData[5];\r\n                integrationBankExtractFileDetail.BIC = columnData[6];\r\n                integrationBankExtractFileDetail.BankName = columnData[7];\r\n                integrationBankExtractFileDetail.BranchName = columnData[8];\r\n                integrationBankExtractFileDetail.Date = integrationBankExtractFileParser.GetDateTime(columnData[9]);\r\n                integrationBankExtractFileDetail.DateText = columnData[9];\r\n                integrationBankExtractFileDetail.Narrative1 = columnData[10];\r\n                integrationBankExtractFileDetail.Narrative2 = columnData[11];\r\n                integrationBankExtractFileDetail.Narrative3 = columnData[12];\r\n                integrationBankExtractFileDetail.Narrative4 = columnData[13];\r\n                integrationBankExtractFileDetail.Narrative5 = columnData[14];\r\n                integrationBankExtractFileDetail.Type = columnData[15];\r\n                integrationBankExtractFileDetail.Debit = ParsingHelper.ParseNullableDecimal(columnData[16]);\r\n                integrationBankExtractFileDetail.Credit = ParsingHelper.ParseNullableDecimal(columnData[17]);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IIntegrationBankExtractFileParser"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail SortCode",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail AccountNumber",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail AccountAlias",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail AccountShortName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Currency",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail AccountType",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail BIC",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail BankName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail BranchName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Date",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IIntegrationBankExtractFileParser GetDateTime",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail DateText",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Narrative1",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Narrative2",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Narrative3",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Narrative4",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Narrative5",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Type",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Debit",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Credit"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Mappers",
				"Name": "ScheduledProcessIntegrationMapper",
				"BaseType": "Unlinked.GenericBusinessObjectMapper",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "void",
						"Name": "MapFromDataRow",
						"Hash": "ED4BAC793E8F53B5AFD214D7C9BC6F11C46EE8D9C90525FBB4E14C0644FD7DE4",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IScheduledProcessIntegration businessObject",
							"System.Data.DataRow dataRow"
						],
						"Body": {
							"BodyText": "            base.MapFromDataRow(businessObject, dataRow);\r\n            businessObject.IntegrationType = (ScheduledProcessIntegrationType)dataRow[\u0022ScheduledProcessIntegrationTypeID\u0022];\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IScheduledProcessIntegration",
								"DataTorque.IsleOfMan.Interfaces.Integration.ScheduledProcessIntegrationType"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IScheduledProcessIntegration IntegrationType"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Mappers",
				"Name": "StrikeOffDissolutionFileDetailMapper",
				"BaseType": "Unlinked.GenericBusinessObjectMapper",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Mappers.IStrikeOffDissolutionFileDetailMapper"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "void",
						"Name": "MapFromFile",
						"Hash": "21726155F217FDE5A51EE7B414613169F637C7B05D1D2A84E7BE802EAB02FF90",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail strikeOffDissolutionFileDetail",
							"System.String record"
						],
						"Body": {
							"BodyText": "            strikeOffDissolutionFileDetail.Record = record;\r\n            string[] columnData = record.Split(\u0027,\u0027);\r\n            if (columnData.Length == 4)\r\n            {\r\n                strikeOffDissolutionFileDetail.CompanyNumber = columnData[0];\r\n                strikeOffDissolutionFileDetail.CompanyName = columnData[1];\r\n                strikeOffDissolutionFileDetail.StrikeOffDissolution = columnData[2];\r\n                strikeOffDissolutionFileDetail.DateOfStatusChange = strikeOffDissolutionFileParser.GetDateTime(columnData[3]);\r\n                strikeOffDissolutionFileDetail.DateOfStatusChangeText = columnData[3];\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IStrikeOffDissolutionFileParser"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail CompanyNumber",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail CompanyName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail StrikeOffDissolution",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail DateOfStatusChange",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IStrikeOffDissolutionFileParser GetDateTime",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail DateOfStatusChangeText"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "RepaymentSetup",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IRepaymentSetup"
				],
				"Properties": [
					"System.String Line",
					"System.String Description",
					"System.Nullable Length",
					"System.String Type",
					"System.String Value"
				],
				"Methods": [
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            throw new System.NotImplementedException();\r\n"
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            throw new System.NotImplementedException();\r\n"
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            throw new System.NotImplementedException();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "AuditRepository",
				"BaseType": "DataTorque.Iho.BusinessObjects.Repositories.AuditRepository",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.IList",
						"Name": "FindAuditPeriods",
						"Hash": "8EB9BB31CDF1B0F6D3A0658573C122542BCA2C90A72B7508724BE64567243687",
						"Parameters": [
							"DataTorque.Iho.Interfaces.Criteria.IAuditPeriodSearchCriteria criteria",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IList\u003CIAuditPeriod\u003E auditPeriods = new List\u003CIAuditPeriod\u003E();\r\n\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_ReturnPeriod_selectByTaxTypeAndDateRange\u0022, transaction);\r\n            query.AddParameter(\u0022@TaxpayerID\u0022, SqlDbType.Int, 0, criteria.TaxpayerID);\r\n            query.AddParameter(\u0022@TaxTypeID\u0022, SqlDbType.Int, 0, criteria.TaxTypeID);\r\n            query.AddParameter(\u0022@FromDate\u0022, SqlDbType.DateTime, 0, criteria.FromDate);\r\n            query.AddParameter(\u0022@ToDate\u0022, SqlDbType.DateTime, 0, criteria.ToDate);\r\n            query.AddParameter(\u0022@ExistingReturnsOnly\u0022, SqlDbType.Int, 0, criteria.ExistingReturnsOnly);\r\n            query.ExecuteQuery();\r\n\r\n            if (query.DataTable.Rows.Count \u003E 0)\r\n            {\r\n                ITaxpayerSummarySearchResult taxpayer = taxpayerSummarySearcher.FindByTaxpayerID(criteria.TaxpayerID, transaction);\r\n\r\n                int yearsInPastScope = systemConstantRepository.GetInteger(\u0022AuditScopePastYears\u0022);\r\n                DateTime minimumDate = DateTime.MinValue;\r\n                if (yearsInPastScope \u003E 0)\r\n                {\r\n                    minimumDate = executingEnvironment.CurrentDateTime.Date.AddYears(-yearsInPastScope);\r\n                }\r\n\r\n                foreach (DataRow dataRow in query.DataTable.Rows)\r\n                {\r\n                    DateTime periodToDate = ParsingHelper.ParseDateTime(dataRow[\u0022PeriodToDate\u0022]);\r\n                    if (periodToDate \u003C minimumDate)\r\n                    {\r\n                        continue;\r\n                    }\r\n\r\n                    IAuditPeriod auditPeriod = CreateAuditPeriod();\r\n                    auditPeriod.Taxpayer = taxpayer;\r\n                    auditPeriod.TaxpayerID = taxpayer.ID;\r\n                    auditPeriod.TaxTypeID = criteria.TaxTypeID;\r\n                    auditPeriod.YearID = ParsingHelper.ParseInt(dataRow[\u0022YearID\u0022]);\r\n                    auditPeriod.PeriodID = ParsingHelper.ParseInt(dataRow[\u0022PeriodID\u0022]);\r\n\r\n                    auditPeriods.Add(auditPeriod);\r\n                }\r\n            }\r\n\r\n            return auditPeriods;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IAuditPeriod",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.Criteria.IAuditPeriodSearchCriteria",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment"
							],
							"ReferencedStoredProcedures": [
								"spf_ReturnPeriod_selectByTaxTypeAndDateRange"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.Criteria.IAuditPeriodSearchCriteria TaxpayerID",
								"DataTorque.Iho.Interfaces.Criteria.IAuditPeriodSearchCriteria TaxTypeID",
								"DataTorque.Iho.Interfaces.Criteria.IAuditPeriodSearchCriteria FromDate",
								"DataTorque.Iho.Interfaces.Criteria.IAuditPeriodSearchCriteria ToDate",
								"DataTorque.Iho.Interfaces.Criteria.IAuditPeriodSearchCriteria ExistingReturnsOnly",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher FindByTaxpayerID",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment CurrentDateTime",
								"DataTorque.Iho.Interfaces.BusinessObjects.IAuditPeriod Taxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IAuditPeriod TaxpayerID",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult ID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IAuditPeriod TaxTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IAuditPeriod YearID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IAuditPeriod PeriodID"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "BankStatementFileRepository",
				"BaseType": "Unlinked.BaseRepository",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Repositories.IBankStatementFileRepository"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
						"Name": "CreateBankStatementFileHeader",
						"Hash": "801D5C072A7AA7F9DA9D13FCDEA67D193E8F6A24224E04E56EB7907B8833E803",
						"Parameters": [
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            BankStatementFileHeader header = new BankStatementFileHeader(queryBuilder, bankStatementFileHeaderValidator);\r\n            header.DistributedSQLTransaction = transaction;\r\n            header.ImportFileStatus = ImportFileStatus.PartialImport;\r\n            header.UpdateInitialValues();\r\n            return header;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.BankStatementFileHeader",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.BankStatementFileHeader DistributedSQLTransaction",
								"DataTorque.IsleOfMan.BusinessObjects.BankStatementFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.BusinessObjects.BankStatementFileHeader UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail",
						"Name": "CreateBankStatementFileDetail",
						"Hash": "4702FF880571F336807DB1D2E5DDF8B942694BD09AB284C34384CC5F25D165BD",
						"Parameters": [
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            BankStatementFileDetail detail = new BankStatementFileDetail(queryBuilder, bankStatementFileDetailValidator);\r\n            detail.DistributedSQLTransaction = transaction;\r\n            detail.UpdateInitialValues();\r\n            return detail;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.BankStatementFileDetail",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.BankStatementFileDetail DistributedSQLTransaction",
								"DataTorque.IsleOfMan.BusinessObjects.BankStatementFileDetail UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
						"Name": "ReadBankStatementFileData",
						"Hash": "C2728F90C259E3270CEC30AF7EF7FF2153CE327CEAA4D69A6EB2087A8C4A448F",
						"Parameters": [
							"System.String filePath",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IBankStatementFileHeader bankStatementFileHeader = CreateBankStatementFileHeader(transaction);\r\n            bankStatementFileHeader.DistributedSQLTransaction = transaction;\r\n            bankStatementFileHeader.FileName = Path.GetFileName(filePath);\r\n            bankStatementFileHeader.ProcessedDate = DateTime.Today;\r\n\r\n            // TODO: What should this be? We don\u0027t have any statement date details in the file.\r\n            // We process each day\u0027s files on the day, so DateTime.Today seems like a reasonable choice, but need to confirm\r\n            bankStatementFileHeader.StatementDate = DateTime.Today;\r\n\r\n            bankStatementFileHeader.SourceBankAccountID = GetBankAccountIDFromCode(GetBankAccountCodeFromFilename(bankStatementFileHeader.FileName), transaction);\r\n            bankStatementFileHeader.Contents = File.ReadAllText(filePath); // load contents here so we can validate the checksum without having to load the contents again\r\n\r\n            if (!bankStatementFileHeader.Validate())\r\n            {\r\n                SaveHeaderValidationErrors(bankStatementFileHeader, ImportFileStatus.Failed, transaction);\r\n            }\r\n            //only map if the file extension is validated otherwise reading/mapping is pointless  \r\n            else if (SaveBankStatementFileHeader(bankStatementFileHeader, transaction))\r\n            {\r\n                bankStatementFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n                SaveBankStatementFileHeader(bankStatementFileHeader, transaction);\r\n            }\r\n\r\n            return bankStatementFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader FileName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader ProcessedDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader StatementDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader SourceBankAccountID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader Contents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "ImportBankStatementFileDetails",
						"Hash": "A4057E305380CD9722DC86EA4A85D48EB52B2DCFDEFDF37CA02BC0277DAC3FA6",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader bankStatementFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success = false;\r\n            try\r\n            {\r\n                if (bankStatementFileHeader.Contents == null)\r\n                {\r\n                    success = false;\r\n                    bankStatementFileHeader.Notes = \u0022No data in the file\u0022;\r\n                    bankStatementFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveBankStatementFileHeader(bankStatementFileHeader, transaction);\r\n                    return false;\r\n                }\r\n\r\n                string[] contentLines = bankStatementFileHeader.Contents.Split(_lineSplits, StringSplitOptions.RemoveEmptyEntries);\r\n                if (contentLines.Length \u003C 2)\r\n                {\r\n                    success = false;\r\n                    bankStatementFileHeader.Notes = \u0022No data in the file\u0022;\r\n                    bankStatementFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveBankStatementFileHeader(bankStatementFileHeader, transaction);\r\n                    return false;\r\n                }\r\n\r\n                if (IsInvalidColumnCount(contentLines[0], 18))\r\n                {\r\n                    success = false;\r\n                    bankStatementFileHeader.Notes = \u0022File header validation error.\u0022;\r\n                    bankStatementFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveBankStatementFileHeader(bankStatementFileHeader, transaction);\r\n                    return false;\r\n                }\r\n\r\n                bool hasInvalidRows = MapBankStatementFileDetails(bankStatementFileHeader, contentLines, transaction);\r\n                if (hasInvalidRows)\r\n                {\r\n                    success = false;\r\n                    List\u003CIBankStatementFileDetail\u003E invalidRows = bankStatementFileHeader.BankStatementFileDetails\r\n                                                                                        .Where(d =\u003E d.ImportFileDetailStatus == ImportFileDetailStatus.Invalid)\r\n                                                                                        .ToList();\r\n                    StringBuilder rowValidationErrors = new StringBuilder();\r\n                    foreach (IBankStatementFileDetail row in invalidRows)\r\n                    {\r\n                        rowValidationErrors.Append(\u0022 Row \u0022 \u002B (bankStatementFileHeader.BankStatementFileDetails.IndexOf(row) \u002B 2) \u002B \u0022: \u0022 \u002B row.ErrorMessage);\r\n                    }\r\n\r\n                    bankStatementFileHeader.Notes = rowValidationErrors.ToString();\r\n                    bankStatementFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveBankStatementFileHeader(bankStatementFileHeader, transaction);\r\n                }\r\n                else\r\n                {\r\n                    foreach (IBankStatementFileDetail recordFileDetail in bankStatementFileHeader.BankStatementFileDetails)\r\n                    {\r\n                        SaveBankStatementFileDetail(recordFileDetail, transaction);\r\n                    }\r\n\r\n                    ProcessBankStatementFileDetails(bankStatementFileHeader, transaction);\r\n\r\n                    success = CompleteBankStatementFileFileProcessing(bankStatementFileHeader, transaction);\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                success = false;\r\n                bankStatementFileHeader.Notes = ex.Message;\r\n                bankStatementFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n            }\r\n\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader Contents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader BankStatementFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "protected virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveBankStatementFileDetail",
						"Hash": "7F3EDBB4134F248AD8E619E4AD14A8C1E52457B5348B26D2AF46C00FB46FB843",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail bankExtractFileDetail"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveBankStatementFileDetail, bankExtractFileDetail);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveBankStatementFileDetail",
						"Hash": "7F35CC5A07A1DC061AE6DBD91FA6D097808731B9D1C56FB9A8DBBE4A7A7EB729",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail bankStatementFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n\r\n            if (transaction == null)\r\n            {\r\n                result = SaveBankStatementFileDetail(bankStatementFileDetail);\r\n            }\r\n            else\r\n            {\r\n                if (bankStatementFileDetail.IsDirty() || bankStatementFileDetail.IsSavedWhenClean)\r\n                {\r\n                    bankStatementFileDetail.DistributedSQLTransaction = transaction;\r\n                    if (bankStatementFileDetail.Validate())\r\n                    {\r\n                        result = bankStatementFileDetail.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail SaveData"
							]
						}
					},
					{
						"Modifiers": "protected virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveBankStatementFileHeader",
						"Hash": "BFF3E3D369CF0F9B9870691E6E49D52089261C754C1EC9181E0901DF769182A1",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader bankStatementFileHeader"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveBankStatementFileHeader, bankStatementFileHeader);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveBankStatementFileHeader",
						"Hash": "47F5C47BBBDD1CC77CC8EDAA2359308BD21182B6F053383F433C1DE3DD4C775C",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader bankStatementFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            if (transaction == null)\r\n            {\r\n                result = SaveBankStatementFileHeader(bankStatementFileHeader);\r\n            }\r\n            else\r\n            {\r\n                if (bankStatementFileHeader.IsDirty() || bankStatementFileHeader.IsSavedWhenClean)\r\n                {\r\n                    bankStatementFileHeader.DistributedSQLTransaction = transaction;\r\n                    if (bankStatementFileHeader.Validate())\r\n                    {\r\n                        result = bankStatementFileHeader.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader SaveData"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Int32",
						"Name": "GetBankAccountIDFromCode",
						"Hash": "BE9D08EF866589C49BD9E758066008D9015B639C05F7347F037AAA3B6A594CA8",
						"Parameters": [
							"System.String code",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            if (string.IsNullOrEmpty(code))\r\n            {\r\n                return 0;\r\n            }\r\n\r\n            IScalarQuery bankAccountQuery = queryFactory.CreateScalarQuery(\u0022spf_BankStatementFileRepository_GetBankAccountIDFromCode\u0022, transaction);\r\n            bankAccountQuery.AddParameter(\u0022@Code\u0022, SqlDbType.VarChar, 0, code);\r\n            bankAccountQuery.ExecuteQuery();\r\n\r\n            return ParsingHelper.ParseInt(bankAccountQuery.ScalarValue);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_BankStatementFileRepository_GetBankAccountIDFromCode"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.String",
						"Name": "GetBankAccountNumberFromBankAccountID",
						"Hash": "C6658C47C267F735AD1796173E401C9BA980768519FC7F187A4A5C1AB80804CB",
						"Parameters": [
							"System.Int32 bankAccountID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            if (bankAccountID == 0)\r\n            {\r\n                return string.Empty;\r\n            }\r\n\r\n            IScalarQuery bankAccountQuery = queryFactory.CreateScalarQuery(\u0022spf_BankStatementFileRepository_GetBankAccountNumberFromBankAccountID\u0022, transaction);\r\n            bankAccountQuery.AddParameter(\u0022@BankAccountID\u0022, SqlDbType.VarChar, 0, bankAccountID);\r\n            bankAccountQuery.ExecuteQuery();\r\n\r\n            return ParsingHelper.ParseString(bankAccountQuery.ScalarValue, string.Empty);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_BankStatementFileRepository_GetBankAccountNumberFromBankAccountID"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveHeaderValidationErrors",
						"Hash": "B7C2D469D2829308039FEE08ECE8F006AEEBC156D1A5554721EB37B73AA5F7EC",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader bankStatementFileHeader",
							"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus fileStatus",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bankStatementFileHeader.ImportFileStatus = fileStatus;\r\n            bankStatementFileHeader.Notes = string.Join(\u0022; \u0022, bankStatementFileHeader.ValidationErrorDictionary.Values);\r\n            SaveBankStatementFileHeader(bankStatementFileHeader, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveDetailValidationErrors",
						"Hash": "0FD16FA3F58AB81B6B04BE5F7C8807501CAAEA4D387D7AB981323C222EE3FE72",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail bankStatementFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bankStatementFileDetail.ImportFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n            bankStatementFileDetail.ErrorMessage = string.Join(\u0022; \u0022, bankStatementFileDetail.ValidationErrorDictionary.Values);\r\n            SaveBankStatementFileDetail(bankStatementFileDetail, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "MapBankStatementFileDetails",
						"Hash": "6AE8C4DAE60ECAB2A0547D9581174025B341A759971630BF741269C61CF549BB",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader bankStatementFileHeader",
							" contentLines",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            string accountNumber = GetBankAccountNumberFromBankAccountID(bankStatementFileHeader.SourceBankAccountID, transaction);\r\n\r\n            bool hasInvalidRows = false;\r\n            foreach (string record in contentLines.Skip(1).Take(contentLines.Length - 1))\r\n            {\r\n                IBankStatementFileDetail bankStatementFileDetail = CreateBankStatementFileDetail(transaction);\r\n                bankStatementFileDetail.BankStatementFileHeaderID = bankStatementFileHeader.ID;\r\n                bankStatementFileDetail.Record = record;\r\n                bankStatementFileDetail.ImportFileDetailStatus = ImportFileDetailStatus.ReadingFileContent;\r\n                bankStatementFileHeader.BankStatementFileDetails.Add(bankStatementFileDetail);\r\n\r\n                bankStatementFileDetailMapper.MapFromFile(bankStatementFileDetail, bankStatementFileDetail.Record, accountNumber, transaction);\r\n                if (bankStatementFileDetail.ValidationErrorDictionary.Count == 0 \u0026\u0026 bankStatementFileDetail.Validate())\r\n                {\r\n                    bool shouldIgnore = SkipProccessingBankStatementFileDetail(bankStatementFileDetail);\r\n                    bankStatementFileDetail.ImportFileDetailStatus = shouldIgnore ? ImportFileDetailStatus.Ignored : ImportFileDetailStatus.Processing;\r\n                }\r\n                else\r\n                {\r\n                    bankStatementFileDetail.ImportFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                    bankStatementFileDetail.ErrorMessage = string.Join(\u0022; \u0022, bankStatementFileDetail.ValidationErrorDictionary.Values.OrderBy(v =\u003E v));\r\n                    hasInvalidRows = true;\r\n                }\r\n            }\r\n            return hasInvalidRows;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Mappers.IBankStatementFileDetailMapper"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader SourceBankAccountID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail BankStatementFileHeaderID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus ReadingFileContent",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader BankStatementFileDetails",
								"DataTorque.IsleOfMan.Interfaces.Mappers.IBankStatementFileDetailMapper MapFromFile",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ValidationErrorDictionary",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Processing",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ProcessBankStatementFileDetails",
						"Hash": "62732466A17B525E98E0ACC36061B840D1539BBAE42047B3ADFB45ED61F12024",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader bankStatementFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            string bankAccountNumber = GetBankAccountNumberFromBankAccountID(bankStatementFileHeader.SourceBankAccountID, transaction);\r\n\r\n            foreach (IBankStatementFileDetail bankStatementFileDetail in bankStatementFileHeader.BankStatementFileDetails)\r\n            {\r\n                //only process if there were no errors from mapping\r\n                if (bankStatementFileDetail.ImportFileDetailStatus == ImportFileDetailStatus.Ignored)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                if (!bankStatementFileDetail.Validate())\r\n                {\r\n                    SaveDetailValidationErrors(bankStatementFileDetail, transaction);\r\n                    continue;\r\n                }\r\n\r\n                if (!SaveBankStatementFileDetail(bankStatementFileDetail, transaction))\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                bankStatementFileHeader.TotalProcessedPaymentCount \u002B= 1;\r\n\r\n                if (AddPaymentRecord(bankStatementFileDetail, transaction))\r\n                {\r\n                    if (!string.IsNullOrEmpty(bankStatementFileDetail.ErrorMessage))\r\n                    {\r\n                        bankStatementFileDetail.ImportFileDetailStatus = ImportFileDetailStatus.Failed;\r\n                    }\r\n                }\r\n\r\n                SaveBankStatementFileDetail(bankStatementFileDetail, transaction);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader SourceBankAccountID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader BankStatementFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader TotalProcessedPaymentCount",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "AddPaymentRecord",
						"Hash": "9ECA9445079504F4A444708B15723FA6D3C46A5FB8D52FF79BE4A6058BE27D05",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail bankStatementFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            if (bankStatementFileDetail.IsCredit == false)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            bool success = true;\r\n\r\n            try\r\n            {\r\n                // Create the payment so we can load it with the details\r\n                IPaymentHeader paymentHeader = paymentRepository.CreatePaymentHeader();\r\n                IPayment payment = paymentHeader.Payment;\r\n                payment.PaymentDate = bankStatementFileDetail.TransactionDate;\r\n                IPaymentHeader subPaymentHeader = paymentRepository.CreatePaymentHeader();\r\n                IPayment subPayment = subPaymentHeader.Payment;\r\n                subPayment.PaymentDate = bankStatementFileDetail.TransactionDate;\r\n                bool paymentRequiresTransaction = true;\r\n                decimal importCreditAmount = bankStatementFileDetail.IsCredit ? bankStatementFileDetail.Amount : 0;\r\n                int taxTypeId = 0;\r\n                int? taxpayerId = null;\r\n                bool isSuspenseCaseRequired = false;\r\n                IOnlinePaymentBankTransferReferenceHeader paymentReferenceHeader = GetTaxpayerDetailsFromNarratives1To5(bankStatementFileDetail, out taxpayerId, out taxTypeId, out isSuspenseCaseRequired, transaction);\r\n\r\n                if (taxpayerId.HasValue)\r\n                {\r\n                    bankStatementFileDetail.TaxpayerID = taxpayerId;\r\n                    payment.TaxpayerID = taxpayerId ?? 0;\r\n                }\r\n\r\n                if (paymentReferenceHeader != null)\r\n                {\r\n                    bankStatementFileDetail.TaxpayerID = taxpayerId;\r\n                    payment.TaxpayerID = taxpayerId ?? 0;\r\n\r\n                    if (!IsBankReferenceUnique(paymentReferenceHeader.BankReference, transaction))\r\n                    {\r\n                        isSuspenseCaseRequired = true;\r\n                        bankStatementFileDetail.ErrorList.Add(\u0022Bank reference has already been used.\u0022);\r\n                    }\r\n\r\n                    if (!IsBankReferenceAmountCorrect(paymentReferenceHeader, importCreditAmount))\r\n                    {\r\n                        isSuspenseCaseRequired = true;\r\n                        bankStatementFileDetail.ErrorList.Add(\u0022Bank reference amount does not match.\u0022);\r\n                    }\r\n\r\n                    if (!isSuspenseCaseRequired)\r\n                    {\r\n                        paymentHeader.PaymentReferenceCode = paymentReferenceHeader.BankReference;\r\n                        paymentUpdater.UpdatePaymentFromBankReference(payment, paymentReferenceHeader, transaction);\r\n                        paymentRequiresTransaction = false;\r\n                    }\r\n                }\r\n\r\n                if (payment.TaxpayerID \u003C= 0)\r\n                {\r\n                    // Could not work out who the payment was for so must set to a suspense case\r\n                    paymentUpdater.UpdatePaymentToSuspenseAccount(payment);\r\n                }\r\n\r\n                if (paymentRequiresTransaction)\r\n                {\r\n                    paymentUpdater.UpdatePaymentFromAmount(payment, importCreditAmount, taxTypeId, transaction);\r\n                }\r\n\r\n                paymentUpdater.UpdatePaymentNonCashType(payment, bankStatementFileDetail.BankStatementLineType, transaction);\r\n\r\n                // if the payment requires a suspense case, we need to save the payment without payment allocation\r\n                // so that the payment isn\u0027t automatically allocated around where it should not be.\r\n                // Instead, we need to save the payment without processing it, and then create a SUSR case manually\r\n                if (isSuspenseCaseRequired)\r\n                {\r\n                    if (paymentRepository.SavePaymentHeader(paymentHeader, transaction, false, false))\r\n                    {\r\n                        // append the narratives to the error list, so it will show up in the case Other Reasons field.\r\n                        bankStatementFileDetail.ErrorList.Add(ConcatenateNarratives(bankStatementFileDetail));\r\n\r\n                        bankStatementFileDetail.PaymentHeaderID = paymentHeader.ID;\r\n\r\n                        bankStatementFileDetail.ImportFileDetailStatus = ImportFileDetailStatus.Suspense;\r\n\r\n                        // Find any suspense case already created with RelatedRecordID = PaymentTransaction.ID, and set the suspense case details on the bankStatementFileDetail\r\n                        // if no case was found, then create one, and update the detail to reference the case.\r\n                        if (UpdatePaymentSuspenseCaseDetails(payment, bankStatementFileDetail, bankStatementFileDetail.ErrorList, transaction) == false)\r\n                        {\r\n                            paymentUpdater.CreateSuspenseCaseForPayment(payment, importCreditAmount, taxTypeId, transaction);\r\n                            UpdatePaymentSuspenseCaseDetails(payment, bankStatementFileDetail, bankStatementFileDetail.ErrorList, transaction);\r\n                        }\r\n\r\n                        SaveBankStatementFileDetail(bankStatementFileDetail, transaction);\r\n                    }\r\n                    else\r\n                    {\r\n                        // update the error message and save the details to the database\r\n                        bankStatementFileDetail.ImportFileDetailStatus = ImportFileDetailStatus.Failed;\r\n                        bankStatementFileDetail.ErrorMessage = string.Join(\u0022; \u0022, paymentHeader.Payment.ValidationErrorDictionary.Values);\r\n                        SaveBankStatementFileDetail(bankStatementFileDetail, transaction);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    // Save and process payment as normal\r\n                    // paymentRepository.SavePaymentHeader should create a case with RelatedRecordID = PaymentTransaction.ID if suspense case is created\r\n                    if (paymentRepository.SavePaymentHeader(paymentHeader, transaction))\r\n                    {\r\n                        bankStatementFileDetail.PaymentHeaderID = paymentHeader.ID;\r\n\r\n                        bankStatementFileDetail.ImportFileDetailStatus = ImportFileDetailStatus.Imported;\r\n\r\n                        // Find any suspense case created with RelatedRecordID = PaymentTransaction.ID, and set the suspense case details on the bankStatementFileDetail\r\n                        if (UpdatePaymentSuspenseCaseDetails(payment, bankStatementFileDetail, null, transaction))\r\n                        {\r\n                            bankStatementFileDetail.ImportFileDetailStatus = ImportFileDetailStatus.Suspense;\r\n                        }\r\n\r\n                        SaveBankStatementFileDetail(bankStatementFileDetail, transaction);\r\n                    }\r\n                    else\r\n                    {\r\n                        // update the error message and save the details to the database\r\n                        bankStatementFileDetail.ImportFileDetailStatus = ImportFileDetailStatus.Failed;\r\n                        bankStatementFileDetail.ErrorMessage = string.Join(\u0022; \u0022, paymentHeader.Payment.ValidationErrorDictionary.Values);\r\n                        SaveBankStatementFileDetail(bankStatementFileDetail, transaction);\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                bankStatementFileDetail.ErrorMessage = $\u0022Adding the payment record failed because of the following error: {ex.Message}\u0022;\r\n                success = false;\r\n            }\r\n\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentHeader",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail IsCredit",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository CreatePaymentHeader",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentHeader Payment",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment PaymentDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail TransactionDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Amount",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail TaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment TaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader BankReference",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ErrorList",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentHeader PaymentReferenceCode",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater UpdatePaymentFromBankReference",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater UpdatePaymentToSuspenseAccount",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater UpdatePaymentFromAmount",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater UpdatePaymentNonCashType",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail BankStatementLineType",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository SavePaymentHeader",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail PaymentHeaderID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentHeader ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Suspense",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater CreateSuspenseCaseForPayment",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Imported"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.String",
						"Name": "ConcatenateNarratives",
						"Hash": "AC6E5E4B1961948F21D3A7C4B9E7A7B637A8418119E7F3E5815DB526B421866F",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail detail"
						],
						"Body": {
							"BodyText": "            return string.Join(\u0022,\u0022, detail.Narrative1, detail.Narrative2, detail.Narrative3, detail.Narrative4, detail.Narrative5);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative1",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative2",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative3",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative4",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative5"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "CompleteBankStatementFileFileProcessing",
						"Hash": "6581B6EA17629D3858511DCF9888621DA7EEB35DE0DF95E60EF1F471AC17D182",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader bankStatementFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            if (bankStatementFileHeader.Validate())\r\n            {\r\n                bool hasAnyUnimportedRows = bankStatementFileHeader.BankStatementFileDetails.Any(d =\u003E d.ImportFileDetailStatus == ImportFileDetailStatus.Failed || d.ImportFileDetailStatus == ImportFileDetailStatus.Ignored);\r\n                bankStatementFileHeader.ImportFileStatus = hasAnyUnimportedRows ? ImportFileStatus.PartialImport : ImportFileStatus.Complete;\r\n                SaveBankStatementFileHeader(bankStatementFileHeader, transaction);\r\n            }\r\n            else\r\n            {\r\n                SaveHeaderValidationErrors(bankStatementFileHeader, ImportFileStatus.PartialImport, transaction);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader BankStatementFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Complete"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.String",
						"Name": "GetBankAccountCodeFromFilename",
						"Hash": "2379CEFDEBA7D756F75CB0A1C6421206A8BFAB4C6766C2139503B5AEF56575A6",
						"Parameters": [
							"System.String fileName"
						],
						"Body": {
							"BodyText": "            if (fileName.StartsWith(\u0022BankExtractCED\u0022) || fileName.StartsWith(\u0022BankExtract_CED\u0022))\r\n            {\r\n                return \u0022CED\u0022;\r\n            }\r\n            else if (fileName.StartsWith(\u0022BankExtractEPU\u0022) || fileName.StartsWith(\u0022BankExtract_EPU\u0022))\r\n            {\r\n                return \u0022EPU\u0022;\r\n            }\r\n\r\n            // We haven\u0027t found either \u0027CED\u0027 or \u0027EPU\u0027 in the filename, but the BankStatementFileHeader table requires a SourceBankAccountID,\r\n            // so we need to return a default code in order for the invalid record to be saved to the database. \r\n            return \u0022CED\u0022;\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "SkipProccessingBankStatementFileDetail",
						"Hash": "1A6CCF0727EE0ABA0ECFA0A46FA85A71DF85483B40F35192AE74DA268A7AA7EF",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail bankStatementFileDetail"
						],
						"Body": {
							"BodyText": "            bool shouldIgnore = bankStatementFileDetail.IsDebit ||\r\n                                bankStatementFileDetail.Currency != \u0022GBP\u0022;\r\n\r\n            return shouldIgnore;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail IsDebit",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Currency"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsInvalidColumnCount",
						"Hash": "9ED839CF5B41B5D24671534303AC75757763A0448EC7EFB0DB7A4C882D014BFC",
						"Parameters": [
							"System.String stringToCheck",
							"System.Int32 expectedColumnCount"
						],
						"Body": {
							"BodyText": "            string[] columnData = stringToCheck.Split(\u0027,\u0027);\r\n            return columnData.Length != expectedColumnCount;\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader",
						"Name": "GetTaxpayerDetailsFromNarratives1To5",
						"Hash": "D42FC3AD352B3FE1EE746DDEBBDB7DA274F2A6B76C0C0808BC8AE7E765838EEF",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail bankStatementFileDetail",
							"System.Nullable taxpayerId",
							"System.Int32 vatTaxTypeID",
							"System.Boolean isSuspenseCaseRequired",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            List\u003Cstring\u003E narratives = new List\u003Cstring\u003E()\r\n            {\r\n                bankStatementFileDetail.Narrative1,\r\n                bankStatementFileDetail.Narrative2,\r\n                bankStatementFileDetail.Narrative3,\r\n                bankStatementFileDetail.Narrative4,\r\n                bankStatementFileDetail.Narrative5\r\n            };\r\n            List\u003Cint\u003E taxpayerIDs = new List\u003Cint\u003E();\r\n\r\n            // we might set this later, but if not, we want to return 0.\r\n            vatTaxTypeID = 0;\r\n            isSuspenseCaseRequired = false;\r\n\r\n            IOnlinePaymentBankTransferReferenceHeader paymentReferenceHeader = null; // a header which matches a provided Online Payment Reference\r\n            int paymentReferenceTaxpayerID = 0;\r\n\r\n            foreach (string narrative in narratives)\r\n            {\r\n                // first see if we have a payment reference number in any of the narratives\r\n                if (paymentReferenceHeader == null)\r\n                {\r\n                    paymentReferenceHeader = paymentRepository.FindOnlinePaymentBankTransferReferenceHeader(narrative, transaction);\r\n                    if (paymentReferenceHeader != null)\r\n                    {\r\n                        paymentReferenceTaxpayerID = paymentReferenceCodeParser.GetTaxpayerID(narrative);\r\n                        taxpayerIDs.Add(paymentReferenceTaxpayerID);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    // if we already have a payment reference, and now we have a SECOND payment reference, then this is a situation\r\n                    // where we cannot uniquely identify where the payment is supposed to go, so we need to exit with no details and \r\n                    // let it go to a SUSR case.\r\n                    IOnlinePaymentBankTransferReferenceHeader secondPaymentReferenceHeader = paymentRepository.FindOnlinePaymentBankTransferReferenceHeader(narrative, transaction);\r\n                    if (secondPaymentReferenceHeader != null)\r\n                    {\r\n                        // if the second payment reference has the same number, then ignore it.\r\n                        if (secondPaymentReferenceHeader.BankReference == paymentReferenceHeader.BankReference)\r\n                        {\r\n                            continue;\r\n                        }\r\n\r\n                        int secondPaymentTaxpayerID = paymentReferenceCodeParser.GetTaxpayerID(narrative);\r\n                        if (paymentReferenceTaxpayerID == secondPaymentTaxpayerID)\r\n                        {\r\n                            taxpayerId = paymentReferenceTaxpayerID;\r\n                        }\r\n                        else\r\n                        {\r\n                            taxpayerId = null;\r\n                        }\r\n\r\n                        isSuspenseCaseRequired = true;\r\n                        bankStatementFileDetail.ErrorList.Add(\u0022More than one payment reference provided.\u0022);\r\n\r\n                        return null;\r\n                    }\r\n                }\r\n\r\n                // lookup the taxpayer by the TIN or VAT number. If a vatTaxTypeID is returned, then it came from VAT number\r\n                int? lookupTaxpayerID = bankStatementFileParser.GetTaxpayerId(narrative, out int? lookupVatTaxTypeID, transaction);\r\n                if (lookupTaxpayerID == null)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                // then see if we had a TIN in the narrative\r\n                if (lookupVatTaxTypeID == null)\r\n                {\r\n                    taxpayerIDs.Add(lookupTaxpayerID.Value);\r\n                }\r\n\r\n                // and finally see if we had a VAT number in the narrative.\r\n                if (lookupVatTaxTypeID != null)\r\n                {\r\n                    taxpayerIDs.Add(lookupTaxpayerID.Value);\r\n                    vatTaxTypeID = lookupVatTaxTypeID.Value;\r\n                }\r\n            }\r\n\r\n            // if we had no taxpayerIDs, or they were looked up as 0, then return nothing. A suspense resolution case will be required.\r\n            if (taxpayerIDs.Count == 0 || taxpayerIDs.Contains(0))\r\n            {\r\n                taxpayerId = null;\r\n                isSuspenseCaseRequired = true;\r\n                bankStatementFileDetail.ErrorList.Add(\u0022No taxpayer found in narratives.\u0022);\r\n\r\n                return null;\r\n            }\r\n\r\n            // if we have no match between the three records, then return nothing. A suspense resolution case will be required.\r\n            int firstTaxpayerID = taxpayerIDs.First();\r\n            if (!taxpayerIDs.All(t =\u003E t == firstTaxpayerID))\r\n            {\r\n                taxpayerId = null;\r\n                isSuspenseCaseRequired = true;\r\n                bankStatementFileDetail.ErrorList.Add(\u0022Multiple taxpayers found in narratives.\u0022);\r\n\r\n                return null;\r\n            }\r\n\r\n            // no payment reference header or no VAT tax type? Cool, we\u0027re done here then, populate the taxpayerID and return the paymentReferenceHeader if we had one.\r\n            if (paymentReferenceHeader == null || vatTaxTypeID == 0)\r\n            {\r\n                taxpayerId = firstTaxpayerID;\r\n                return paymentReferenceHeader;\r\n            }\r\n\r\n            // we have a payment reference header, and also a VAT Tax Type, so now we need to ensure that the payment is paying only VAT. \r\n            bool isValidPayment = true;\r\n            foreach (IOnlinePaymentBankTransferReferenceDetail detail in paymentReferenceHeader.Details)\r\n            {\r\n                if (detail.TaxTypeID != vatTaxTypeID)\r\n                {\r\n                    isValidPayment = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // At least one of the details on the payment weren\u0027t for VAT, so we can\u0027t tell it to use VAT for the payment (since it would pay EVERYTHING to VAT)\r\n            // but we can use the taxpayer and the payment reference.\r\n            if (isValidPayment == false)\r\n            {\r\n                taxpayerId = firstTaxpayerID;\r\n                vatTaxTypeID = 0;\r\n                isSuspenseCaseRequired = true;\r\n                bankStatementFileDetail.ErrorList.Add(\u0022VAT Taxpayer identified alongside a non-VAT payment reference.\u0022);\r\n\r\n                return paymentReferenceHeader;\r\n            }\r\n\r\n            // everything is fine, proceed as normal and use the taxpayer and/or payment reference.\r\n            taxpayerId = firstTaxpayerID;\r\n            return paymentReferenceHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentReferenceCodeParser",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IBankStatementFileParser",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative1",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative2",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative3",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative4",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail Narrative5",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository FindOnlinePaymentBankTransferReferenceHeader",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentReferenceCodeParser GetTaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader BankReference",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail ErrorList",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IBankStatementFileParser GetTaxpayerId",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader Details",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail TaxTypeID"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsBankReferenceUnique",
						"Hash": "94F39BDA73C63E001DFE59766A4FE1762C16E2FAAF0E4A3B6D383C5D4FD879A4",
						"Parameters": [
							"System.String bankReference",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IScalarQuery query = queryFactory.CreateScalarQuery(\u0022spf_GetCountOfPaymentHeaderWithSamePaymentReferenceCode\u0022, transaction);\r\n            query.AddParameter(\u0022@PaymentReferenceCode\u0022, SqlDbType.NVarChar, 0, bankReference);\r\n            query.ExecuteQuery();\r\n\r\n            return (int)query.ScalarValue == 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_GetCountOfPaymentHeaderWithSamePaymentReferenceCode"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsBankReferenceAmountCorrect",
						"Hash": "B8DFBDB39209014B4E32B5ADEE1FD8DE55A3355A37CE7B09B067F4B2A1BEDE4A",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader bankReference",
							"System.Decimal amount"
						],
						"Body": {
							"BodyText": "            if (bankReference.Details == null \u0026\u0026 amount == 0)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            return bankReference.Details.Sum(r =\u003E r.AmountToBePaid) == amount;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader Details",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail AmountToBePaid"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "UpdatePaymentSuspenseCaseDetails",
						"Hash": "B8B0DC8C7A6C1923905216B8F86C3FDF1D65F03D2930251D3C31A3B555BF6097",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IPayment payment",
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail bankStatementFileDetail",
							"System.Collections.Generic.List reasons",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            // Find any suspense case created with RelatedRecordID = PaymentTransaction.ID, and set the suspense case details on the bankStatementFileDetail\r\n            if (bankStatementFileDetail == null)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            // any suspense case will be attached to the 1st one\r\n            IPaymentTransaction paymentTransaction = payment.Transactions.FirstOrDefault();\r\n            if (paymentTransaction == null)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            //Look up any suspense case with: RelatedRecordID = paymentTransaction.ID\r\n            int suspenseCaseID = FindRelatedPaymentSuspenseCaseID(paymentTransaction, transaction);\r\n\r\n            if (suspenseCaseID == 0)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            // if found, set the case details onto the BankStatementFileDetail\r\n            bankStatementFileDetail.CaseID = suspenseCaseID;\r\n\r\n            SetCaseOtherReasons(suspenseCaseID, reasons, transaction);\r\n\r\n            return true;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment Transactions",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail CaseID"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SetCaseOtherReasons",
						"Hash": "FEC2AEDD6AC6B1FD6E71BEA295041D5B231F9EDE41CC45FC58B3B0F780DC89BC",
						"Parameters": [
							"System.Int32 caseID",
							"System.Collections.Generic.List reasons",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            if (reasons == null || reasons.Count == 0)\r\n            {\r\n                return;\r\n            }\r\n\r\n            ICaseWorkflowState caseWorkflowState = caseWorkflowRepository.FindCaseWorkflowStateForCase(caseID, transaction);\r\n            if (caseWorkflowState == null || caseWorkflowState.CurrentCase == null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (string.IsNullOrEmpty(caseWorkflowState.CurrentCase.OtherReasons))\r\n            {\r\n                caseWorkflowState.CurrentCase.OtherReasons = string.Join(Environment.NewLine, reasons);\r\n            }\r\n            else\r\n            {\r\n                caseWorkflowState.CurrentCase.OtherReasons \u002B= Environment.NewLine \u002B string.Join(Environment.NewLine, reasons);\r\n            }\r\n\r\n            caseWorkflowState.CurrentCase.SaveData();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState",
								"DataTorque.Iho.Interfaces.Repositories.ICaseWorkflowRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ICaseWorkflowRepository FindCaseWorkflowStateForCase",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState CurrentCase"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Int32",
						"Name": "FindRelatedPaymentSuspenseCaseID",
						"Hash": "8112330E8768C299DDFEBFB02B92D6DD7AB928608ED727542EBECB146D32258A",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction paymentTransaction",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            //Look up any suspense case with: RelatedRecordID = paymentTransaction.ID\r\n\r\n            if (paymentTransaction == null)\r\n            {\r\n                return 0;\r\n            }\r\n\r\n            // TODO: Check that PYT is still the correct type, and code not changed to SAT or SAP\r\n            int caseRelatedRecordType = standardLookupRepository.FindItemByCode(\u0022CaseRelatedRecordType\u0022, \u0022PYT\u0022)?.ID ?? 0;\r\n            int suspenseCaseID = 0;\r\n\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_GetCaseNoByRelatedRecordID\u0022, transaction);\r\n            query.AddParameter(\u0022@CaseRelatedRecordType\u0022, SqlDbType.Int, 0, caseRelatedRecordType);\r\n            query.AddParameter(\u0022@RelatedRecordID\u0022, SqlDbType.Int, 0, paymentTransaction.ID);\r\n            query.ExecuteQuery();\r\n\r\n            if (query.DataTable.Rows.Count \u003E 0)\r\n            {\r\n                suspenseCaseID = ParsingHelper.ParseInt(query.DataTable.Rows[0][\u0022CaseID\u0022]);\r\n            }\r\n\r\n            return suspenseCaseID;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_GetCaseNoByRelatedRecordID"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction ID",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "CaseRepository",
				"BaseType": "DataTorque.Iho.BusinessObjects.Repositories.CaseRepository",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.CaseManagement.ICaseTask",
						"Name": "CreateCaseTask",
						"Hash": "5493FECE085BF2E22F17F9DAA5DC63CB3955C2453517575CDFE521510B1EEDD5",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeTask caseTypeTask"
						],
						"Body": {
							"BodyText": "            if (caseTypeTask == null || !caseTypeTask.IsConfigurationValid())\r\n            {\r\n                throw new InvalidOperationException(\u0022Cannot create task for null or invalid configuration\u0022);\r\n            }\r\n\r\n            ICaseTask caseTask = instantiator.InstantiateByDependencyInjection(caseTypeTask.BusinessObjectAssembly, caseTypeTask.BusinessObjectType) as ICaseTask;\r\n\r\n            if (caseTask != null)\r\n            {\r\n                caseTask.CaseTypeTaskID = caseTypeTask.ID;\r\n                caseTask.Alerts = new SmartBindingList\u003CICaseAlert\u003E();\r\n                caseTask.Answers = new SmartBindingList\u003CICaseTaskAnswer\u003E();\r\n\r\n                // MM - if we are loading a specific case type task then we may have default answers we need to load up\r\n                foreach (ICaseTaskQuestion caseTaskQuestion in caseTypeTask.Questions)\r\n                {\r\n                    ICaseTaskAnswer answer = CreateCaseTaskAnswer();\r\n                    answer.CaseTaskQuestionID = caseTaskQuestion.ID;\r\n                    answer.QuestionCaption = caseTaskQuestion.Caption;\r\n                    answer.QuestionCode = caseTaskQuestion.Code;\r\n                    answer.CaseTaskQuestionTypeID = caseTaskQuestion.CaseTaskQuestionTypeID;\r\n\r\n                    //this part is the change\r\n                    //\r\n                    //Iho has built in functionality to have a datepicker default to \u0027now\u0027. However, only if the answer doesnt have a value yet, meaning\r\n                    //it doesnt work at all (must have been conflicting changes over the years) *See CaseQuestionsController.AddDatePicker\r\n                    //Adding this override to not set the answer if its going to be set later anyways solves the problem - Fynn BD - Feb 2024\r\n                    if (caseTaskQuestion.CaseTaskQuestionTypeID != (int)CaseTaskQuestionType.Date \u0026\u0026 caseTaskQuestion.DefaultAnswer != \u0022Now\u0022)\r\n                    {\r\n                        answer.Answer = caseTaskQuestion.DefaultAnswer;\r\n                    }\r\n\r\n                    caseTask.Answers.Add(answer);\r\n                }\r\n\r\n                caseTask.RegisterMonitoredProperty\u003CICaseAlert\u003E(\u0022Alerts\u0022);\r\n                caseTask.RegisterMonitoredProperty\u003CICaseTaskAnswer\u003E(\u0022Answers\u0022);\r\n            }\r\n\r\n            return caseTask;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeTask",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseAlert",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskAnswer",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskQuestion",
								"DataTorque.Iho.BusinessObjects.CaseTaskQuestionType"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeTask IsConfigurationValid",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeTask BusinessObjectAssembly",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeTask BusinessObjectType",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask CaseTypeTaskID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeTask ID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask Alerts",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask Answers",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeTask Questions",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskAnswer CaseTaskQuestionID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskQuestion ID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskAnswer QuestionCaption",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskQuestion Caption",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskAnswer QuestionCode",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskQuestion Code",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskAnswer CaseTaskQuestionTypeID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskQuestion CaseTaskQuestionTypeID",
								"DataTorque.Iho.BusinessObjects.CaseTaskQuestionType Date",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskQuestion DefaultAnswer",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTaskAnswer Answer",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask RegisterMonitoredProperty"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "CaseWorkflowRepository",
				"BaseType": "DataTorque.Iho.BusinessObjects.Repositories.CaseWorkflowRepository",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.IList",
						"Name": "CreateCases",
						"Hash": "120D5D31F85FAD875355665D4FD973249ED4ADB53788E542ADA6D87580EC8FCF",
						"Parameters": [
							"System.Collections.Generic.IList results",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "\r\n            IList\u003CICase\u003E caseList = new List\u003CICase\u003E();\r\n            ICaseType caseType = null;\r\n\r\n            foreach (IResult result in results.Where(r =\u003E r.IsSelected).ToList())\r\n            {\r\n                if (caseType == null)\r\n                {\r\n                    // MM - always creating the same type of case, so fetch this object once\r\n                    caseType = caseConfigurationRepository.FindCaseType(result.CaseTypeID, transaction);\r\n                }\r\n\r\n                ICaseWorkflowState state = CreateCaseWorkflowState(caseType, transaction);\r\n\r\n                // MM - set the transaction immediately, there are database hits when you set properties\r\n                state.DistributedSQLTransaction = transaction;\r\n\r\n                // attempt to get the case type reason matching the reason belonging to the case selection rule type configuration\r\n                ICaseTypeReason caseTypeReason = caseType?.Reasons.FirstOrDefault(r =\u003E r.CaseReasonID == result.CaseReasonID);\r\n                if (caseTypeReason == null)\r\n                {\r\n                    throw new Exception(\u0022cannot continue without a case type reason\u0022);\r\n                }\r\n\r\n                ICaseCaseTypeReason reason = caseRepository.CreateCaseCaseTypeReason();\r\n                reason.CaseTypeReasonID = caseTypeReason.ID;\r\n                reason.IsSelected = true;\r\n\r\n                if (caseType.TaxpayerRequired)\r\n                {\r\n                    state.CurrentCase.TaxpayerID = result.TaxpayerID;\r\n                }\r\n\r\n                if (caseType.InteractionRequired)\r\n                {\r\n                    state.CurrentCase.TaxTypeID = result.TaxTypeID;\r\n                }\r\n\r\n                IList\u003CICaseYearPeriod\u003E caseYearPeriods = casePeriodRepository.GetCaseSelectionReturnPeriods(result.CaseSelectionRunID, result.TaxpayerID.GetValueOrDefault(0), transaction);\r\n                state.CurrentCase.CaseYearPeriod.AddRange(caseYearPeriods);\r\n\r\n                if (result.RelatedRecordID \u003E 0)\r\n                {\r\n                    state.CurrentCase.RelatedRecordID = result.RelatedRecordID;\r\n                }\r\n\r\n                if (result.RelatedRecordTypeID \u003E 0)\r\n                {\r\n                    state.CurrentCase.RelatedRecordTypeID = result.RelatedRecordTypeID;\r\n                }\r\n\r\n                state.CurrentCase.RelatedCaseID = result.RelatedCaseID;\r\n                state.CurrentCase.CaseStatusID = (int)CaseStatus.New;\r\n                state.CurrentCase.CasePriorityID = state.CurrentCase.CaseProcessor.CalculatePriority(state.CurrentCase);\r\n                state.CurrentCase.ManagerID = result.AssignedToID;\r\n                state.CurrentCase.CalculateCompletionDate();\r\n\r\n                ICaseCaseTypeReason existingReason = state.CurrentCase.CaseTypeReasons.FirstOrDefault(r =\u003E r.CaseTypeReasonID == reason.CaseTypeReasonID);\r\n                if (existingReason == null)\r\n                {\r\n                    state.CurrentCase.CaseTypeReasons.Add(reason);\r\n                }\r\n                else\r\n                {\r\n                    existingReason.IsSelected = true;\r\n                    foreach (ICaseCaseTypeReason caseCaseTypeReason in state.CurrentCase.CaseTypeReasons.Where(r =\u003E r.CaseTypeReasonID != reason.CaseTypeReasonID))\r\n                    {\r\n                        caseCaseTypeReason.IsSelected = false;\r\n                    }\r\n                }\r\n\r\n                /*\r\n                 * This is the reason for the override. Client wants the info from OnlineAssessmentReason to appear in the case,\r\n                 * so if its a return assessment, grab that info and add it to the CaseReason\r\n                 */\r\n                if (caseType.Code == \u0022ASC\u0022)\r\n                {\r\n                    ICaseYearPeriod caseYearPeriod = caseYearPeriods.FirstOrDefault();\r\n                    if (caseYearPeriod != null)\r\n                    {\r\n                        ITaxReturn taxReturn = FindTaxReturn(caseYearPeriod, transaction);\r\n                        if (taxReturn != null)\r\n                        {\r\n                            state.CurrentCase.OtherReasons = GetOnlineAmendmentReason(taxReturn, transaction);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (SaveCaseWorkflow(state, transaction))\r\n                {\r\n                    caseList.Add(state.CurrentCase);\r\n\r\n                    // MM - store the created case details so we can report on them\r\n                    INonQuery query = queryFactory.CreateNonQuery(\u0022spg_CaseSelectionRunCase_insert\u0022, transaction);\r\n                    query.AddParameter(\u0022@CaseSelectionRunCaseID\u0022, SqlDbType.Int, 0, 0);\r\n                    query.AddParameter(\u0022@CaseSelectionRunID\u0022, SqlDbType.Int, 0, result.CaseSelectionRunID);\r\n                    query.AddParameter(\u0022@CaseID\u0022, SqlDbType.Int, 0, state.CurrentCase.ID);\r\n                    query.AddParameter(\u0022@TotalPoints\u0022, SqlDbType.Int, 0, result.TotalPoints);\r\n                    query.AddParameter(\u0022@UserEID\u0022, SqlDbType.Int, 0, currentUserRepository.GetCurrentUserID());\r\n                    query.ExecuteQuery();\r\n                }\r\n            }\r\n\r\n            return caseList;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseType",
								"DataTorque.Iho.Interfaces.CaseSelection.IResult",
								"DataTorque.Iho.Interfaces.Repositories.ICaseConfigurationRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeReason",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseCaseTypeReason",
								"DataTorque.Iho.Interfaces.Repositories.ICaseRepository",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseYearPeriod",
								"DataTorque.Iho.Interfaces.Repositories.ICasePeriodRepository",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.BusinessObjects.CaseStatus",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseProcessor",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.Repositories.ICurrentUserRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.CaseSelection.IResult IsSelected",
								"DataTorque.Iho.Interfaces.Repositories.ICaseConfigurationRepository FindCaseType",
								"DataTorque.Iho.Interfaces.CaseSelection.IResult CaseTypeID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState DistributedSQLTransaction",
								"DataTorque.Iho.Interfaces.CaseSelection.IResult CaseReasonID",
								"DataTorque.Iho.Interfaces.Repositories.ICaseRepository CreateCaseCaseTypeReason",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseCaseTypeReason CaseTypeReasonID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTypeReason ID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseCaseTypeReason IsSelected",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseType TaxpayerRequired",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState CurrentCase",
								"DataTorque.Iho.Interfaces.CaseSelection.IResult TaxpayerID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseType InteractionRequired",
								"DataTorque.Iho.Interfaces.CaseSelection.IResult TaxTypeID",
								"DataTorque.Iho.Interfaces.Repositories.ICasePeriodRepository GetCaseSelectionReturnPeriods",
								"DataTorque.Iho.Interfaces.CaseSelection.IResult CaseSelectionRunID",
								"DataTorque.Iho.Interfaces.CaseSelection.IResult RelatedRecordID",
								"DataTorque.Iho.Interfaces.CaseSelection.IResult RelatedRecordTypeID",
								"DataTorque.Iho.Interfaces.CaseSelection.IResult RelatedCaseID",
								"DataTorque.Iho.BusinessObjects.CaseStatus New",
								"DataTorque.Iho.Interfaces.CaseSelection.IResult AssignedToID",
								"DataTorque.Iho.Interfaces.CaseSelection.IResult CaseTypeReasonID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseType Code",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateNonQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.CaseSelection.IResult TotalPoints",
								"DataTorque.Iho.Interfaces.Repositories.ICurrentUserRepository GetCurrentUserID",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
						"Name": "FindTaxReturn",
						"Hash": "98EFA659354F70134D6C3480CFBDAEA0B6A871C494A528DEFCD3258C80A4E003",
						"Parameters": [
							"DataTorque.Iho.Interfaces.CaseManagement.ICaseYearPeriod caseYearPeriod",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IReturnConfiguration returnConfiguration = taxReturnRepository.CreateReturnConfigurationForTaxPeriod(caseYearPeriod.TaxpayerID, caseYearPeriod.TaxTypeID, caseYearPeriod.YearID, caseYearPeriod.PeriodID);\r\n            returnConfiguration.ExistingOnly = true;\r\n            return taxReturnRepository.FindTaxReturnByConfiguration(returnConfiguration, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnConfiguration",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseYearPeriod",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository CreateReturnConfigurationForTaxPeriod",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseYearPeriod TaxpayerID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseYearPeriod TaxTypeID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseYearPeriod YearID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseYearPeriod PeriodID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnConfiguration ExistingOnly",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository FindTaxReturnByConfiguration"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.String",
						"Name": "GetOnlineAmendmentReason",
						"Hash": "1CABFFF97DF89BE0A271129F4399126F60B2C2F366B4EA0AFF7751414F786EE4",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn taxReturn",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_TaxReturnOnlineAmendment_FindByTaxReturnID\u0022, transaction);\r\n            query.AddParameter(\u0022@TaxReturnID\u0022, SqlDbType.Int, 0, taxReturn.ID);\r\n            query.ExecuteQuery();\r\n            if (query.DataTable.Rows.Count \u003E 0)\r\n            {\r\n                DataRow row = query.DataTable.Rows[0];\r\n                return FormatAmendmentReason(ParsingHelper.ParseString(row[\u0022Description\u0022]), ParsingHelper.ParseString(row[\u0022Text\u0022]));\r\n            }\r\n            return null;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn"
							],
							"ReferencedStoredProcedures": [
								"spf_TaxReturnOnlineAmendment_FindByTaxReturnID"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn ID",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.String",
						"Name": "FormatAmendmentReason",
						"Hash": "CDFE1AFFCA130D0E7B461A176282E68AE05B0A64FF005299C48877B081359E7B",
						"Parameters": [
							"System.String descriptionText",
							"System.String text"
						],
						"Body": {
							"BodyText": "            return string.Format(ResourceHelper.GetApplicationResource(\u0022Text_AmendmentReasonFormatString\u0022, \u0022{0} - {1}\u0022), descriptionText, text);\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "ChangeOfCompanyNameRepository",
				"BaseType": "Unlinked.BaseRepository",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Repositories.IChangeOfCompanyNameRepository"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
						"Name": "CreateChangeOfCompanyNameFileHeader",
						"Hash": "7398DBBF36390B19B13D5C470781F10078A03996E9AFC17409C11C5025C87CCD",
						"Body": {
							"BodyText": "            ChangeOfCompanyNameFileHeader changeOfCompanyNameFileHeader = new ChangeOfCompanyNameFileHeader(queryBuilder, changeOfCompanyNameFileHeaderValidator);\r\n            changeOfCompanyNameFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n            changeOfCompanyNameFileHeader.UpdateInitialValues();\r\n            return changeOfCompanyNameFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.ChangeOfCompanyNameFileHeader",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.ChangeOfCompanyNameFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.BusinessObjects.ChangeOfCompanyNameFileHeader UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail",
						"Name": "CreateChangeOfCompanyNameFileDetail",
						"Hash": "91B0CA1FCCA37C22783554DBCEC7EB56D1FA1E32CD7CD70B517978E244B1E30C",
						"Body": {
							"BodyText": "            ChangeOfCompanyNameFileDetail changeOfCompanyNameFileDetail = new ChangeOfCompanyNameFileDetail(queryBuilder, changeOfCompanyNameFileDetailValidator);\r\n            changeOfCompanyNameFileDetail.UpdateInitialValues();\r\n            return changeOfCompanyNameFileDetail;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.ChangeOfCompanyNameFileDetail",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.ChangeOfCompanyNameFileDetail UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
						"Name": "ReadChangeOfCompanyNameFileData",
						"Hash": "C7FCB0C5732A69E801B9EF9170FB14D360D133118A20522BC7153E8B7225F58E",
						"Parameters": [
							"System.String filePath",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IChangeOfCompanyNameFileHeader changeOfCompanyNameFileHeader = CreateChangeOfCompanyNameFileHeader();\r\n\r\n            changeOfCompanyNameFileHeader.FileName = Path.GetFileName(filePath);\r\n            changeOfCompanyNameFileHeader.FileProcessedDate = DateTime.Today;\r\n\r\n            //validate the file while it is new to check the file extension\r\n            if (!changeOfCompanyNameFileHeader.Validate())\r\n            {\r\n                SaveHeaderValidationErrors(changeOfCompanyNameFileHeader, ImportFileStatus.Failed, transaction);\r\n            }\r\n            else if (!ValidateChangeOfCompanyNameFileChecksum(changeOfCompanyNameFileHeader, filePath, transaction))\r\n            {\r\n                SaveHeaderValidationErrors(changeOfCompanyNameFileHeader, ImportFileStatus.Failed, transaction);\r\n            }\r\n            //only map if the file extension is validated otherwise reading/mapping is pointless  \r\n            else if (SaveChangeOfCompanyNameFileHeader(changeOfCompanyNameFileHeader, transaction))\r\n            {\r\n                changeOfCompanyNameFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n\r\n                changeOfCompanyNameFileHeader.FileContents = ReadFileContents(filePath);\r\n\r\n                SaveChangeOfCompanyNameFileHeader(changeOfCompanyNameFileHeader, transaction);\r\n\r\n            }\r\n\r\n            return changeOfCompanyNameFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader FileName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader FileProcessedDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader FileContents"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "ImportChangeOfCompanyNameFileDetails",
						"Hash": "E8DFA89359E140445DE3F3D4F57E960A11B181872375A500E58DD0A31BD39338",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader changeOfCompanyNameFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success;\r\n            try\r\n            {\r\n                if (changeOfCompanyNameFileHeader.FileContents == null || changeOfCompanyNameFileHeader.FileContents.Length \u003C 2)\r\n                {\r\n                    success = false;\r\n                    changeOfCompanyNameFileHeader.Notes = \u0022Importing the change of company name file content failed because of the following error: No data in the file\u0022;\r\n                    changeOfCompanyNameFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveChangeOfCompanyNameFileHeader(changeOfCompanyNameFileHeader, transaction);\r\n                }\r\n                else if (IsInvalidColumnCount(changeOfCompanyNameFileHeader.FileContents[0], 3))\r\n                {\r\n                    success = false;\r\n                    changeOfCompanyNameFileHeader.Notes = \u0022Importing the  change of company name file content failed because of the following error: Invalid column count\u0022;\r\n                    changeOfCompanyNameFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveChangeOfCompanyNameFileHeader(changeOfCompanyNameFileHeader, transaction);\r\n                }\r\n                else\r\n                {\r\n                    bool hasInvalidRows = MapChangeOfCompanyNameFileDetails(changeOfCompanyNameFileHeader, transaction);\r\n                    if (hasInvalidRows)\r\n                    {\r\n                        success = false;\r\n                        List\u003CIChangeOfCompanyNameFileDetail\u003E invalidRows = changeOfCompanyNameFileHeader.ChangeOfCompanyNameFileDetails\r\n                                                                                                              .Where(d =\u003E d.ChangeOfCompanyNameFileDetailStatus == ImportFileDetailStatus.Invalid)\r\n                                                                                                              .ToList();\r\n                        StringBuilder rowValidationErrors = new StringBuilder();\r\n                        foreach (IChangeOfCompanyNameFileDetail row in invalidRows)\r\n                        {\r\n                            rowValidationErrors.Append(\u0022 Row \u0022 \u002B (changeOfCompanyNameFileHeader.ChangeOfCompanyNameFileDetails.IndexOf(row) \u002B 2) \u002B \u0022: \u0022 \u002B row.ErrorMessage);\r\n                        }\r\n\r\n                        changeOfCompanyNameFileHeader.Notes = $\u0022Importing the change of company name file content failed because of the following errors:{rowValidationErrors}\u0022;\r\n                        changeOfCompanyNameFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                        SaveChangeOfCompanyNameFileHeader(changeOfCompanyNameFileHeader, transaction);\r\n                    }\r\n                    else\r\n                    {\r\n                        SaveChangeOfCompanyNameFileDetails(changeOfCompanyNameFileHeader.ChangeOfCompanyNameFileDetails, transaction);\r\n\r\n                        ProcessChangeOfCompanyNameFileDetails(changeOfCompanyNameFileHeader, transaction);\r\n\r\n                        success = CompleteChangeOfCompanyNameFileProcessing(changeOfCompanyNameFileHeader, transaction);\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                success = false;\r\n                changeOfCompanyNameFileHeader.Notes = $\u0022Importing the change of company name file content failed because of the following error: {ex.Message}\u0022;\r\n                changeOfCompanyNameFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n            }\r\n\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader ChangeOfCompanyNameFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ChangeOfCompanyNameFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveChangeOfCompanyNameFileHeader",
						"Hash": "7E530059C3072E992E8E0340117EA2C2994D64D81B6C88DBD6DE0036336A2088",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader changeOfCompanyNameFileHeader"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveChangeOfCompanyNameFileHeader, changeOfCompanyNameFileHeader);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveChangeOfCompanyNameFileHeader",
						"Hash": "C3BEDFDE943A4D26163521541CEC35137A92115348C783C4ACDFB586F1382312",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader changeOfCompanyNameFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            if (transaction == null)\r\n            {\r\n                result = SaveChangeOfCompanyNameFileHeader(changeOfCompanyNameFileHeader);\r\n            }\r\n            else\r\n            {\r\n                if (changeOfCompanyNameFileHeader.IsDirty() || changeOfCompanyNameFileHeader.IsSavedWhenClean)\r\n                {\r\n                    changeOfCompanyNameFileHeader.DistributedSQLTransaction = transaction;\r\n                    if (changeOfCompanyNameFileHeader.Validate())\r\n                    {\r\n                        result = changeOfCompanyNameFileHeader.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader SaveData"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveChangeOfCompanyNameFileDetail",
						"Hash": "5C3B861A68E5727198099B3DC1B2C433E3CB8EB27A1D01078B30EADD71711C39",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail changeOfCompanyNameFileDetail"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveChangeOfCompanyNameFileDetail, changeOfCompanyNameFileDetail);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveChangeOfCompanyNameFileDetail",
						"Hash": "A33B13AA0D8C0A7BBC4DE71C0F14DB5C5A1CBCDAE4F4FFB1F6EC98D89B46F8D6",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail changeOfCompanyNameFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n\r\n            if (transaction == null)\r\n            {\r\n                result = SaveChangeOfCompanyNameFileDetail(changeOfCompanyNameFileDetail);\r\n            }\r\n            else\r\n            {\r\n                if (changeOfCompanyNameFileDetail.IsDirty() || changeOfCompanyNameFileDetail.IsSavedWhenClean)\r\n                {\r\n                    changeOfCompanyNameFileDetail.DistributedSQLTransaction = transaction;\r\n                    if (changeOfCompanyNameFileDetail.Validate())\r\n                    {\r\n                        result = changeOfCompanyNameFileDetail.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail SaveData"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveChangeOfCompanyNameFileDetails",
						"Hash": "4ADCB377A1D9D1E47796A84BC649A3929F130ABA9D0FF1448F2A8E80571F1511",
						"Parameters": [
							"System.Collections.Generic.IList changeOfCompanyNameFileDetails",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            foreach (IChangeOfCompanyNameFileDetail recordFileDetail in changeOfCompanyNameFileDetails)\r\n            {\r\n                result = SaveChangeOfCompanyNameFileDetail(recordFileDetail, transaction);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "",
						"Name": "ReadFileContents",
						"Hash": "A185D1D80C861672A2DB2B0F8005CC5CA765C4552CE9CAE782547ECD6F2D7019",
						"Parameters": [
							"System.String filePath"
						],
						"Body": {
							"BodyText": "            //Read in the file contents\r\n            using (StreamReader reader = new StreamReader(filePath))\r\n            {\r\n                List\u003Cstring\u003E fileContents = new List\u003Cstring\u003E();\r\n                string line;\r\n\r\n                while ((line = reader.ReadLine()) != null)\r\n                {\r\n                    fileContents.Add(line);\r\n                }\r\n\r\n                return fileContents.ToArray();\r\n            }\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveHeaderValidationErrors",
						"Hash": "B622E74FF185E5BC97471761CC452E5F5B848331772BBD95BD6087B6BC981C9A",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader changeOfCompanyNameFileHeader",
							"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus fileStatus",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            changeOfCompanyNameFileHeader.ImportFileStatus = fileStatus;\r\n\r\n            changeOfCompanyNameFileHeader.Notes = string.Join(\u0022; \u0022, changeOfCompanyNameFileHeader.ValidationErrorDictionary.Values);\r\n\r\n            SaveChangeOfCompanyNameFileHeader(changeOfCompanyNameFileHeader, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateChangeOfCompanyNameFileChecksum",
						"Hash": "98A7044B1F118A75CEE685E489976BE252675222793DD1CBABC491CA54BE39F5",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader changeOfCompanyNameFileHeader",
							"System.String filePath",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool isValid = false;\r\n\r\n            using (MD5 md5 = MD5.Create())\r\n            {\r\n                using (FileStream stream = File.OpenRead(filePath))\r\n                {\r\n                    byte[] hash = md5.ComputeHash(stream);\r\n                    changeOfCompanyNameFileHeader.Checksum = BitConverter.ToString(hash).Replace(\u0022-\u0022, \u0022\u0022).ToLowerInvariant();\r\n                }\r\n            }\r\n\r\n            if (IsExistingChangeOfCompanyNameFileHeader(changeOfCompanyNameFileHeader.Checksum, transaction))\r\n            {\r\n                changeOfCompanyNameFileHeader.ValidationErrorDictionary.Add(\u0022Checksum\u0022, \u0022File checksum already exists in the database.\u0022);\r\n            }\r\n            else\r\n            {\r\n                isValid = true;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader Checksum",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsExistingChangeOfCompanyNameFileHeader",
						"Hash": "24B0AD232B1029C088A0D3659A55F54826FD0A6209BA50C1604FEBA067A9B85C",
						"Parameters": [
							"System.String checksum",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_ChangeOfCompanyNameFileHeader_FindByChecksum\u0022, transaction);\r\n            query.AddParameter(\u0022@Checksum\u0022, SqlDbType.NVarChar, 0, checksum);\r\n            query.ExecuteQuery();\r\n\r\n            return query.DataTable.Rows.Count \u003E 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_ChangeOfCompanyNameFileHeader_FindByChecksum"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsInvalidColumnCount",
						"Hash": "9ED839CF5B41B5D24671534303AC75757763A0448EC7EFB0DB7A4C882D014BFC",
						"Parameters": [
							"System.String stringToCheck",
							"System.Int32 expectedColumnCount"
						],
						"Body": {
							"BodyText": "            string[] columnData = stringToCheck.Split(\u0027,\u0027);\r\n            return columnData.Length != expectedColumnCount;\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveDetailValidationErrors",
						"Hash": "F8518A6B42FD554AFB36FECFB4F0EAB012E5CE860262D236814759EE6841CFB1",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail changeOfCompanyNameFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            changeOfCompanyNameFileDetail.ChangeOfCompanyNameFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n\r\n            changeOfCompanyNameFileDetail.ErrorMessage = string.Join(\u0022; \u0022, changeOfCompanyNameFileDetail.ValidationErrorDictionary.Values);\r\n\r\n            SaveChangeOfCompanyNameFileDetail(changeOfCompanyNameFileDetail, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ChangeOfCompanyNameFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "MapChangeOfCompanyNameFileDetails",
						"Hash": "6F3815473A9EC22948931541E6D64E14E329D278203055CDD2DD96799F7566C9",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader changeOfCompanyNameFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool hasInvalidRows = false;\r\n            foreach (string record in changeOfCompanyNameFileHeader.FileContents.Skip(1).Take(changeOfCompanyNameFileHeader.FileContents.Length - 1))\r\n            {\r\n                IChangeOfCompanyNameFileDetail changeOfCompanyNameFileDetail = CreateChangeOfCompanyNameFileDetail();\r\n                changeOfCompanyNameFileDetail.ChangeOfCompanyNameFileHeaderID = changeOfCompanyNameFileHeader.ID;\r\n                changeOfCompanyNameFileDetail.Record = record;\r\n                changeOfCompanyNameFileDetail.ChangeOfCompanyNameFileDetailStatus = ImportFileDetailStatus.ReadingFileContent;\r\n                changeOfCompanyNameFileHeader.ChangeOfCompanyNameFileDetails.Add(changeOfCompanyNameFileDetail);\r\n\r\n                changeOfCompanyNameFileDetailMapper.MapFromFile(changeOfCompanyNameFileDetail, changeOfCompanyNameFileDetail.Record);\r\n                if (changeOfCompanyNameFileDetail.Validate())\r\n                {\r\n                    bool shouldIgnore = SkipProccessingChangeOfCompanyNameFileDetail(changeOfCompanyNameFileDetail, transaction);\r\n                    changeOfCompanyNameFileDetail.ChangeOfCompanyNameFileDetailStatus = shouldIgnore ? ImportFileDetailStatus.Ignored : ImportFileDetailStatus.Processing;\r\n                }\r\n                else\r\n                {\r\n                    changeOfCompanyNameFileDetail.ChangeOfCompanyNameFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                    changeOfCompanyNameFileDetail.ErrorMessage = string.Join(\u0022; \u0022, changeOfCompanyNameFileDetail.ValidationErrorDictionary.Values);\r\n                    hasInvalidRows = true;\r\n                }\r\n            }\r\n            return hasInvalidRows;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Mappers.IChangeOfCompanyNameFileDetailMapper",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ChangeOfCompanyNameFileHeaderID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ChangeOfCompanyNameFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus ReadingFileContent",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader ChangeOfCompanyNameFileDetails",
								"DataTorque.IsleOfMan.Interfaces.Mappers.IChangeOfCompanyNameFileDetailMapper MapFromFile",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Processing",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "SkipProccessingChangeOfCompanyNameFileDetail",
						"Hash": "C58690E42CC3E67AF1E6A622886E08CEEEBA55D75F8994954FB0810C69CC25DD",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail changeOfCompanyNameFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool shouldIgnore = false;\r\n\r\n            changeOfCompanyNameFileDetail.TaxpayerID = changeOfCompanyNameFileParser.GetTaxpayerID(changeOfCompanyNameFileDetail.CompanyNumber, transaction);\r\n            if (changeOfCompanyNameFileDetail.TaxpayerID.HasValue)\r\n            {\r\n                if (IsValidCompanyName(changeOfCompanyNameFileDetail.TaxpayerID.Value, changeOfCompanyNameFileDetail.CompanyName, changeOfCompanyNameFileDetail.TradeName, transaction))\r\n                {\r\n\r\n                    if (OpenChangeOfRegistrationCaseExists(changeOfCompanyNameFileDetail.TaxpayerID.Value, transaction))\r\n                    {\r\n                        shouldIgnore = true;\r\n                        changeOfCompanyNameFileDetail.ErrorMessage = \u0022Open Change of Registration Case\u0022;\r\n                    }\r\n\r\n                }\r\n                else\r\n                {\r\n                    shouldIgnore = true;\r\n                    changeOfCompanyNameFileDetail.ErrorMessage = \u0022Company name / trade name match\u0022;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                shouldIgnore = true;\r\n                changeOfCompanyNameFileDetail.ErrorMessage = \u0022No link to TIN\u0022;\r\n            }\r\n\r\n            return shouldIgnore;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IChangeOfCompanyNameFileParser",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IChangeOfCompanyNameFileParser GetTaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail CompanyNumber",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail CompanyName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail TradeName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsValidCompanyName",
						"Hash": "3DC2A3DAF718A8C32C110AA362B46C2DE88C3255E878D72DF6C1718CD5FE02DF",
						"Parameters": [
							"System.Int32 taxpayerID",
							"System.String companyName",
							"System.String tradeName",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IScalarQuery query = queryFactory.CreateScalarQuery(\u0022spf_GetCountOfTaxpayerNamesWithSameCompanyNameAndTradeName\u0022, transaction);\r\n            query.AddParameter(\u0022TaxpayerID\u0022, SqlDbType.Int, 0, taxpayerID);\r\n            query.AddParameter(\u0022@CompanyName\u0022, SqlDbType.NVarChar, 0, companyName);\r\n            query.AddParameter(\u0022@TradeName\u0022, SqlDbType.NVarChar, 0, tradeName);\r\n            query.ExecuteQuery();\r\n\r\n            return (int)query.ScalarValue == 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_GetCountOfTaxpayerNamesWithSameCompanyNameAndTradeName"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "OpenChangeOfRegistrationCaseExists",
						"Hash": "FEFFE68F2C19FFE789B4F1D9FDE0FE566EC2CD682CE51580C5173AD82FC537A6",
						"Parameters": [
							"System.Int32 taxpayerID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IStandardLookupItem caseTypeCode = standardLookupRepository.FindItemByCode(\u0022CaseType\u0022, \u0022CHG\u0022);\r\n            IScalarQuery query = queryFactory.CreateScalarQuery(\u0022spf_CaseTypeOpenCasesByTaxpayer\u0022, transaction);\r\n            query.AddParameter(\u0022TaxpayerID\u0022, SqlDbType.Int, 0, taxpayerID);\r\n            query.AddParameter(\u0022CaseTypeId\u0022, SqlDbType.NVarChar, 0, caseTypeCode.ID);\r\n            query.ExecuteQuery();\r\n\r\n            return (int)query.ScalarValue \u003E 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_CaseTypeOpenCasesByTaxpayer"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem ID",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ProcessChangeOfCompanyNameFileDetails",
						"Hash": "1E10030047D417008F19DAF29844CE4AAFD3874E50AD8C678E657EB6E91826F0",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader changeOfCompanyNameFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            foreach (IChangeOfCompanyNameFileDetail changeOfCompanyNameFileDetail in changeOfCompanyNameFileHeader.ChangeOfCompanyNameFileDetails)\r\n            {\r\n                //only process if there were no errors from mapping\r\n                if (changeOfCompanyNameFileDetail.ChangeOfCompanyNameFileDetailStatus != ImportFileDetailStatus.Ignored)\r\n                {\r\n                    if (changeOfCompanyNameFileDetail.Validate())\r\n                    {\r\n                        if (SaveChangeOfCompanyNameFileDetail(changeOfCompanyNameFileDetail, transaction))\r\n                        {\r\n                            //This to double check if a CHG case is created by any other records from the same file\r\n                            if (OpenChangeOfRegistrationCaseExists(changeOfCompanyNameFileDetail.TaxpayerID ?? 0, transaction))\r\n                            {\r\n                                changeOfCompanyNameFileDetail.ChangeOfCompanyNameFileDetailStatus = ImportFileDetailStatus.Ignored;\r\n                                changeOfCompanyNameFileDetail.ErrorMessage = \u0022Open Change of Registration Case\u0022;\r\n                            }\r\n                            else if (CreateChangeOfRegistrationCase(changeOfCompanyNameFileDetail, transaction))\r\n                            {\r\n                                changeOfCompanyNameFileHeader.TotalProcessedChangeOfCompanyNameCount \u002B= 1;\r\n\r\n                                changeOfCompanyNameFileDetail.ChangeOfCompanyNameFileDetailStatus = string.IsNullOrEmpty(changeOfCompanyNameFileDetail.ErrorMessage) ? ImportFileDetailStatus.Imported : ImportFileDetailStatus.Failed;\r\n                            }\r\n                            else\r\n                            {\r\n                                changeOfCompanyNameFileDetail.ChangeOfCompanyNameFileDetailStatus = ImportFileDetailStatus.Failed;\r\n                            }\r\n\r\n                            SaveChangeOfCompanyNameFileDetail(changeOfCompanyNameFileDetail, transaction);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        SaveDetailValidationErrors(changeOfCompanyNameFileDetail, transaction);\r\n                    }\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader ChangeOfCompanyNameFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ChangeOfCompanyNameFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader TotalProcessedChangeOfCompanyNameCount",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Imported",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "CreateChangeOfRegistrationCase",
						"Hash": "001D136ED30A45CB2E3B22B3D86B4C03E2B0B0CC27A7AF6DF81B79DBD5F1C80D",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail changeOfCompanyNameFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success = true;\r\n\r\n            try\r\n            {\r\n                using (ICaseWorkflowState state = caseGenerator.GenerateCaseForTaxpayer(changeOfCompanyNameFileDetail.TaxpayerID ?? 0, \u0022CHG\u0022, \u0022CON\u0022, \u0022REGCON\u0022, null, transaction))\r\n                {\r\n                    changeOfCompanyNameFileDetail.CaseID = state.CurrentCase.ID;\r\n\r\n                    if (state.CurrentCase.CurrentBusinessObject is ITaxpayer taxpayer)\r\n                    {\r\n                        // Assume that the taxpayer must have a company name and there is one in the file\r\n                        if (changeOfCompanyNameFileDetail.CompanyName != null)\r\n                        {\r\n                            taxpayer.PrimaryTaxpayerContact.RegisteredName.ResolvedName = changeOfCompanyNameFileDetail.CompanyName;\r\n                        }\r\n\r\n                        if (!string.IsNullOrEmpty(changeOfCompanyNameFileDetail.TradeName))\r\n                        {\r\n                            if (taxpayer.PrimaryTaxpayerContact.TradeName == null)\r\n                            {\r\n                                ITaxpayerContactDetailConfiguration taxpayerContactDetailConfiguration = new TaxpayerContactDetailConfiguration();\r\n                                taxpayerContactDetailConfiguration.ID = systemConstantRepository.GetInteger(\u0022TradeNameType\u0022, 2);\r\n                                taxpayerContactDetailConfiguration.IsPrimary = false;\r\n\r\n                                IContactName contactName = contactRepository.CreateContactName(taxpayerContactDetailConfiguration, taxpayer.IsBranch, taxpayer.PrimaryTaxpayerContact.PropertyChangedHandler);\r\n                                taxpayer.PrimaryTaxpayerContact.Names.AddOrUpdate(null, contactName);\r\n                            }\r\n\r\n                            taxpayer.PrimaryTaxpayerContact.TradeName.ResolvedName = changeOfCompanyNameFileDetail.TradeName;\r\n                        }\r\n                    }\r\n\r\n                    caseWorkflowRepository.SaveCaseWorkflow(state, transaction);\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                changeOfCompanyNameFileDetail.ErrorMessage = $\u0022Creating the change of registration case is failed because of the following error: {ex.Message}\u0022;\r\n                success = false;\r\n            }\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ICaseGenerator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactName",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContact",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerContactDetailConfiguration",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.Repositories.IContactRepository",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.Repositories.ICaseWorkflowRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Calculators.ICaseGenerator GenerateCaseForTaxpayer",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail CaseID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState CurrentCase",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail CompanyName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.ITaxpayer PrimaryTaxpayerContact",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail TradeName",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerContactDetailConfiguration ID",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerContactDetailConfiguration IsPrimary",
								"DataTorque.Iho.Interfaces.Repositories.IContactRepository CreateContactName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.ITaxpayer IsBranch",
								"DataTorque.Iho.Interfaces.Repositories.ICaseWorkflowRepository SaveCaseWorkflow",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "CompleteChangeOfCompanyNameFileProcessing",
						"Hash": "728CACDBB4B88F90B6D55F3F47E9BA20A85A4B093FA82AB631CD75234E0CD7DC",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader changeOfCompanyNameFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            if (changeOfCompanyNameFileHeader.Validate())\r\n            {\r\n                changeOfCompanyNameFileHeader.ImportFileStatus = changeOfCompanyNameFileHeader.ChangeOfCompanyNameFileDetails.Any(d =\u003E d.ChangeOfCompanyNameFileDetailStatus == ImportFileDetailStatus.Failed ||\r\n                                                                                                                                                d.ChangeOfCompanyNameFileDetailStatus == ImportFileDetailStatus.Ignored) ? ImportFileStatus.PartialImport : ImportFileStatus.Complete;\r\n                SaveChangeOfCompanyNameFileHeader(changeOfCompanyNameFileHeader, transaction);\r\n            }\r\n            else\r\n            {\r\n                SaveHeaderValidationErrors(changeOfCompanyNameFileHeader, ImportFileStatus.PartialImport, transaction);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader ChangeOfCompanyNameFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileDetail ChangeOfCompanyNameFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Complete"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "ChangeOfRegisteredOfficeRepository",
				"BaseType": "Unlinked.BaseRepository",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Repositories.IChangeOfRegisteredOfficeRepository"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
						"Name": "CreateChangeOfRegisteredOfficeFileHeader",
						"Hash": "F05CF4697AB6503B4A23D30B9A500EB11072F4B9C2FA6BE8FC68961346E8966B",
						"Body": {
							"BodyText": "            ChangeOfRegisteredOfficeFileHeader changeOfRegisteredOfficeFileHeader = new ChangeOfRegisteredOfficeFileHeader(queryBuilder, changeOfRegisteredOfficeFileHeaderValidator);\r\n            changeOfRegisteredOfficeFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n            changeOfRegisteredOfficeFileHeader.UpdateInitialValues();\r\n            return changeOfRegisteredOfficeFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.ChangeOfRegisteredOfficeFileHeader",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.ChangeOfRegisteredOfficeFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.BusinessObjects.ChangeOfRegisteredOfficeFileHeader UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail",
						"Name": "CreateChangeOfRegisteredOfficeFileDetail",
						"Hash": "68B616B926F1A9C92BC73E52E31EFCB0FCD7986C697E86B744C3E95908843BBF",
						"Body": {
							"BodyText": "            ChangeOfRegisteredOfficeFileDetail changeOfRegisteredOfficeFileDetail = new ChangeOfRegisteredOfficeFileDetail(queryBuilder, changeOfRegisteredOfficeFileDetailValidator);\r\n            changeOfRegisteredOfficeFileDetail.UpdateInitialValues();\r\n            return changeOfRegisteredOfficeFileDetail;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.ChangeOfRegisteredOfficeFileDetail",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.ChangeOfRegisteredOfficeFileDetail UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
						"Name": "ReadChangeOfRegisteredOfficeFileData",
						"Hash": "4208DE345C0F58400D855A68F2543736E25A3F72FD8484430AA849982506C009",
						"Parameters": [
							"System.String filePath",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IChangeOfRegisteredOfficeFileHeader changeOfRegisteredOfficeFileHeader = CreateChangeOfRegisteredOfficeFileHeader();\r\n\r\n            changeOfRegisteredOfficeFileHeader.FileName = Path.GetFileName(filePath);\r\n            changeOfRegisteredOfficeFileHeader.FileProcessedDate = DateTime.Today;\r\n\r\n            //validate the file while it is new to check the file extension\r\n            if (!changeOfRegisteredOfficeFileHeader.Validate())\r\n            {\r\n                SaveHeaderValidationErrors(changeOfRegisteredOfficeFileHeader, ImportFileStatus.Failed, transaction);\r\n            }\r\n            else if (!ValidateChangeOfRegisteredOfficeFileChecksum(changeOfRegisteredOfficeFileHeader, filePath, transaction))\r\n            {\r\n                SaveHeaderValidationErrors(changeOfRegisteredOfficeFileHeader, ImportFileStatus.Failed, transaction);\r\n            }\r\n            //only map if the file extension is validated otherwise reading/mapping is pointless  \r\n            else if (SaveChangeOfRegisteredOfficeFileHeader(changeOfRegisteredOfficeFileHeader, transaction))\r\n            {\r\n                changeOfRegisteredOfficeFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n\r\n                changeOfRegisteredOfficeFileHeader.FileContents = ReadFileContents(filePath);\r\n\r\n                SaveChangeOfRegisteredOfficeFileHeader(changeOfRegisteredOfficeFileHeader, transaction);\r\n\r\n            }\r\n\r\n            return changeOfRegisteredOfficeFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader FileName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader FileProcessedDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader FileContents"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "ImportChangeOfRegisteredOfficeFileDetails",
						"Hash": "15EAA1EA5C3039DC9704F665C90E1206D3C4AE703C53FCCD11BFF394F9BE04A8",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader changeOfRegisteredOfficeFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success;\r\n            try\r\n            {\r\n                if (changeOfRegisteredOfficeFileHeader.FileContents == null || changeOfRegisteredOfficeFileHeader.FileContents.Length \u003C 2)\r\n                {\r\n                    success = false;\r\n                    changeOfRegisteredOfficeFileHeader.Notes = \u0022Importing the change of registered office file content failed because of the following error: No data in the file\u0022;\r\n                    changeOfRegisteredOfficeFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveChangeOfRegisteredOfficeFileHeader(changeOfRegisteredOfficeFileHeader, transaction);\r\n                }\r\n                else if (IsInvalidColumnCount(changeOfRegisteredOfficeFileHeader.FileContents[0], 8))\r\n                {\r\n                    success = false;\r\n                    changeOfRegisteredOfficeFileHeader.Notes = \u0022Importing the  change of registered office file content failed because of the following error: Invalid column count\u0022;\r\n                    changeOfRegisteredOfficeFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveChangeOfRegisteredOfficeFileHeader(changeOfRegisteredOfficeFileHeader, transaction);\r\n                }\r\n                else\r\n                {\r\n                    bool hasInvalidRows = MapChangeOfRegisteredOfficeFileDetails(changeOfRegisteredOfficeFileHeader, transaction);\r\n                    if (hasInvalidRows)\r\n                    {\r\n                        success = false;\r\n                        List\u003CIChangeOfRegisteredOfficeFileDetail\u003E invalidRows = changeOfRegisteredOfficeFileHeader.ChangeOfRegisteredOfficeFileDetails\r\n                                                                                                              .Where(d =\u003E d.ChangeOfRegisteredOfficeFileDetailStatus == ImportFileDetailStatus.Invalid)\r\n                                                                                                              .ToList();\r\n                        StringBuilder rowValidationErrors = new StringBuilder();\r\n                        foreach (IChangeOfRegisteredOfficeFileDetail row in invalidRows)\r\n                        {\r\n                            rowValidationErrors.Append(\u0022 Row \u0022 \u002B (changeOfRegisteredOfficeFileHeader.ChangeOfRegisteredOfficeFileDetails.IndexOf(row) \u002B 2) \u002B \u0022: \u0022 \u002B row.ErrorMessage);\r\n                        }\r\n\r\n                        changeOfRegisteredOfficeFileHeader.Notes = $\u0022Importing the change of registered office file content failed because of the following errors:{rowValidationErrors}\u0022;\r\n                        changeOfRegisteredOfficeFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                        SaveChangeOfRegisteredOfficeFileHeader(changeOfRegisteredOfficeFileHeader, transaction);\r\n                    }\r\n                    else\r\n                    {\r\n                        SaveChangeOfRegisteredOfficeFileDetails(changeOfRegisteredOfficeFileHeader.ChangeOfRegisteredOfficeFileDetails, transaction);\r\n\r\n                        ProcessChangeOfRegisteredOfficeFileDetails(changeOfRegisteredOfficeFileHeader, transaction);\r\n\r\n                        success = CompleteChangeOfRegisteredOfficeFileProcessing(changeOfRegisteredOfficeFileHeader, transaction);\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                success = false;\r\n                changeOfRegisteredOfficeFileHeader.Notes = $\u0022Importing the change of registered office file content failed because of the following error: {ex.Message}\u0022;\r\n                changeOfRegisteredOfficeFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n            }\r\n\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader ChangeOfRegisteredOfficeFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ChangeOfRegisteredOfficeFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveChangeOfRegisteredOfficeFileHeader",
						"Hash": "549561D2ACF2448B3B897C1ACE2C58DDE2F48C4AD60C5D3268E62384E88EE6D0",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader changeOfRegisteredOfficeFileHeader"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveChangeOfRegisteredOfficeFileHeader, changeOfRegisteredOfficeFileHeader);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveChangeOfRegisteredOfficeFileHeader",
						"Hash": "E2CF030900D92745C3BC3967CF0BD0DC246B18663A6BBB078262BDAA1CEE61F9",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader changeOfRegisteredOfficeFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            if (transaction == null)\r\n            {\r\n                result = SaveChangeOfRegisteredOfficeFileHeader(changeOfRegisteredOfficeFileHeader);\r\n            }\r\n            else\r\n            {\r\n                if (changeOfRegisteredOfficeFileHeader.IsDirty() || changeOfRegisteredOfficeFileHeader.IsSavedWhenClean)\r\n                {\r\n                    changeOfRegisteredOfficeFileHeader.DistributedSQLTransaction = transaction;\r\n                    if (changeOfRegisteredOfficeFileHeader.Validate())\r\n                    {\r\n                        result = changeOfRegisteredOfficeFileHeader.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader SaveData"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveChangeOfRegisteredOfficeFileDetail",
						"Hash": "67368F939CE8B80B64676EB6A95A53CD90037862DD25941040E9B85BC6D63355",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail changeOfRegisteredOfficeFileDetail"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveChangeOfRegisteredOfficeFileDetail, changeOfRegisteredOfficeFileDetail);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveChangeOfRegisteredOfficeFileDetail",
						"Hash": "91FA29160C4B91343A9713A25CAF39F183021DD88BDAD3294508DEF87F5B5ABB",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail changeOfRegisteredOfficeFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n\r\n            if (transaction == null)\r\n            {\r\n                result = SaveChangeOfRegisteredOfficeFileDetail(changeOfRegisteredOfficeFileDetail);\r\n            }\r\n            else\r\n            {\r\n                if (changeOfRegisteredOfficeFileDetail.IsDirty() || changeOfRegisteredOfficeFileDetail.IsSavedWhenClean)\r\n                {\r\n                    changeOfRegisteredOfficeFileDetail.DistributedSQLTransaction = transaction;\r\n                    if (changeOfRegisteredOfficeFileDetail.Validate())\r\n                    {\r\n                        result = changeOfRegisteredOfficeFileDetail.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail SaveData"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveChangeOfRegisteredOfficeFileDetails",
						"Hash": "D98E398D42E99CB98BBC89059270C7AB35ADCECF53D5ADAD0A02033F23CB608D",
						"Parameters": [
							"System.Collections.Generic.IList changeOfRegisteredOfficeFileDetails",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            foreach (IChangeOfRegisteredOfficeFileDetail recordFileDetail in changeOfRegisteredOfficeFileDetails)\r\n            {\r\n                result = SaveChangeOfRegisteredOfficeFileDetail(recordFileDetail, transaction);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "",
						"Name": "ReadFileContents",
						"Hash": "A185D1D80C861672A2DB2B0F8005CC5CA765C4552CE9CAE782547ECD6F2D7019",
						"Parameters": [
							"System.String filePath"
						],
						"Body": {
							"BodyText": "            //Read in the file contents\r\n            using (StreamReader reader = new StreamReader(filePath))\r\n            {\r\n                List\u003Cstring\u003E fileContents = new List\u003Cstring\u003E();\r\n                string line;\r\n\r\n                while ((line = reader.ReadLine()) != null)\r\n                {\r\n                    fileContents.Add(line);\r\n                }\r\n\r\n                return fileContents.ToArray();\r\n            }\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveHeaderValidationErrors",
						"Hash": "412A6024EA670A53E91BAD60BBBD49E7970FAE5EAF46F79D2C91799B66BA4DDC",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader changeOfRegisteredOfficeFileHeader",
							"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus fileStatus",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            changeOfRegisteredOfficeFileHeader.ImportFileStatus = fileStatus;\r\n\r\n            changeOfRegisteredOfficeFileHeader.Notes = string.Join(\u0022; \u0022, changeOfRegisteredOfficeFileHeader.ValidationErrorDictionary.Values);\r\n\r\n            SaveChangeOfRegisteredOfficeFileHeader(changeOfRegisteredOfficeFileHeader, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateChangeOfRegisteredOfficeFileChecksum",
						"Hash": "23D95AC17967BCDB3315F66291EEE6F580FF222B8A5EA99596805C26518286D4",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader changeOfRegisteredOfficeFileHeader",
							"System.String filePath",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool isValid = false;\r\n\r\n            using (MD5 md5 = MD5.Create())\r\n            {\r\n                using (FileStream stream = File.OpenRead(filePath))\r\n                {\r\n                    byte[] hash = md5.ComputeHash(stream);\r\n                    changeOfRegisteredOfficeFileHeader.Checksum = BitConverter.ToString(hash).Replace(\u0022-\u0022, \u0022\u0022).ToLowerInvariant();\r\n                }\r\n            }\r\n\r\n            if (IsExistingChangeOfRegisteredOfficeFileHeader(changeOfRegisteredOfficeFileHeader.Checksum, transaction))\r\n            {\r\n                changeOfRegisteredOfficeFileHeader.ValidationErrorDictionary.Add(\u0022Checksum\u0022, \u0022File checksum already exists in the database.\u0022);\r\n            }\r\n            else\r\n            {\r\n                isValid = true;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader Checksum",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsExistingChangeOfRegisteredOfficeFileHeader",
						"Hash": "84EA4E7D4B2915236DA8BD24377CD9453F30FB5F2D2FDC9A8692EEF587D9780A",
						"Parameters": [
							"System.String checksum",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_ChangeOfRegisteredOfficeFileHeader_FindByChecksum\u0022, transaction);\r\n            query.AddParameter(\u0022@Checksum\u0022, SqlDbType.NVarChar, 0, checksum);\r\n            query.ExecuteQuery();\r\n\r\n            return query.DataTable.Rows.Count \u003E 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_ChangeOfRegisteredOfficeFileHeader_FindByChecksum"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsInvalidColumnCount",
						"Hash": "9ED839CF5B41B5D24671534303AC75757763A0448EC7EFB0DB7A4C882D014BFC",
						"Parameters": [
							"System.String stringToCheck",
							"System.Int32 expectedColumnCount"
						],
						"Body": {
							"BodyText": "            string[] columnData = stringToCheck.Split(\u0027,\u0027);\r\n            return columnData.Length != expectedColumnCount;\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveDetailValidationErrors",
						"Hash": "8C182A874E83989F4E33F4150CFF2CE41DCEC23B7E8D2CC42812E0AAB65DD64F",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail changeOfRegisteredOfficeFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            changeOfRegisteredOfficeFileDetail.ChangeOfRegisteredOfficeFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n\r\n            changeOfRegisteredOfficeFileDetail.ErrorMessage = string.Join(\u0022; \u0022, changeOfRegisteredOfficeFileDetail.ValidationErrorDictionary.Values);\r\n\r\n            SaveChangeOfRegisteredOfficeFileDetail(changeOfRegisteredOfficeFileDetail, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ChangeOfRegisteredOfficeFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "MapChangeOfRegisteredOfficeFileDetails",
						"Hash": "1E2455B6629D52E0486B1FCD1AC4A5A7B4676E03AA25ADD293E96BFB124C350C",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader changeOfRegisteredOfficeFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool hasInvalidRows = false;\r\n            foreach (string record in changeOfRegisteredOfficeFileHeader.FileContents.Skip(1).Take(changeOfRegisteredOfficeFileHeader.FileContents.Length - 1))\r\n            {\r\n                IChangeOfRegisteredOfficeFileDetail changeOfRegisteredOfficeFileDetail = CreateChangeOfRegisteredOfficeFileDetail();\r\n                changeOfRegisteredOfficeFileDetail.ChangeOfRegisteredOfficeFileHeaderID = changeOfRegisteredOfficeFileHeader.ID;\r\n                changeOfRegisteredOfficeFileDetail.Record = record;\r\n                changeOfRegisteredOfficeFileDetail.ChangeOfRegisteredOfficeFileDetailStatus = ImportFileDetailStatus.ReadingFileContent;\r\n                changeOfRegisteredOfficeFileHeader.ChangeOfRegisteredOfficeFileDetails.Add(changeOfRegisteredOfficeFileDetail);\r\n\r\n                changeOfRegisteredOfficeFileDetailMapper.MapFromFile(changeOfRegisteredOfficeFileDetail, changeOfRegisteredOfficeFileDetail.Record);\r\n                if (changeOfRegisteredOfficeFileDetail.Validate())\r\n                {\r\n                    bool shouldIgnore = SkipProccessingChangeOfRegisteredOfficeFileDetail(changeOfRegisteredOfficeFileDetail, transaction);\r\n                    changeOfRegisteredOfficeFileDetail.ChangeOfRegisteredOfficeFileDetailStatus = shouldIgnore ? ImportFileDetailStatus.Ignored : ImportFileDetailStatus.Processing;\r\n                }\r\n                else\r\n                {\r\n                    changeOfRegisteredOfficeFileDetail.ChangeOfRegisteredOfficeFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                    changeOfRegisteredOfficeFileDetail.ErrorMessage = string.Join(\u0022; \u0022, changeOfRegisteredOfficeFileDetail.ValidationErrorDictionary.Values);\r\n                    hasInvalidRows = true;\r\n                }\r\n            }\r\n            return hasInvalidRows;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Mappers.IChangeOfRegisteredOfficeFileDetailMapper",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ChangeOfRegisteredOfficeFileHeaderID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ChangeOfRegisteredOfficeFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus ReadingFileContent",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader ChangeOfRegisteredOfficeFileDetails",
								"DataTorque.IsleOfMan.Interfaces.Mappers.IChangeOfRegisteredOfficeFileDetailMapper MapFromFile",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Processing",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "SkipProccessingChangeOfRegisteredOfficeFileDetail",
						"Hash": "10755C7173EFE975E3AD05FCA8EFAB3DE6B2A13F347FC5F4AFF54D3D6FA36E7A",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail changeOfRegisteredOfficeFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool shouldIgnore = false;\r\n\r\n            changeOfRegisteredOfficeFileDetail.TaxpayerID = changeOfRegisteredOfficeFileParser.GetTaxpayerID(changeOfRegisteredOfficeFileDetail.CompanyNumber, transaction);\r\n            if (changeOfRegisteredOfficeFileDetail.TaxpayerID.HasValue)\r\n            {\r\n                if (IsValidAddress(changeOfRegisteredOfficeFileDetail.TaxpayerID.Value, changeOfRegisteredOfficeFileDetail.AddressLine1, transaction))\r\n                {\r\n                    if (IsValidVillage(changeOfRegisteredOfficeFileDetail))\r\n                    {\r\n                        if (OpenChangeOfRegistrationCaseExists(changeOfRegisteredOfficeFileDetail.TaxpayerID.Value, transaction))\r\n                        {\r\n                            shouldIgnore = true;\r\n                            changeOfRegisteredOfficeFileDetail.ErrorMessage = \u0022Open Change of Registration Case\u0022;\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        shouldIgnore = true;\r\n                        changeOfRegisteredOfficeFileDetail.ErrorMessage = \u0022Town/Village validation error\u0022;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    shouldIgnore = true;\r\n                    changeOfRegisteredOfficeFileDetail.ErrorMessage = \u0022Address Line 1 match\u0022;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                shouldIgnore = true;\r\n                changeOfRegisteredOfficeFileDetail.ErrorMessage = \u0022No link to TIN\u0022;\r\n            }\r\n\r\n            return shouldIgnore;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IChangeOfRegisteredOfficeFileParser",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IChangeOfRegisteredOfficeFileParser GetTaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail CompanyNumber",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail AddressLine1",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsValidAddress",
						"Hash": "1CA95E002002F9EBE8FF2F22F40471CEFC806EB21D2705462E63F5364B980F5D",
						"Parameters": [
							"System.Int32 taxpayerID",
							"System.String addressLine1",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IScalarQuery query = queryFactory.CreateScalarQuery(\u0022spf_GetCountOfTaxpayerLegalAddressesWithSameAddressLine1\u0022, transaction);\r\n            query.AddParameter(\u0022TaxpayerID\u0022, SqlDbType.Int, 0, taxpayerID);\r\n            query.AddParameter(\u0022@AddressLine1\u0022, SqlDbType.NVarChar, 0, addressLine1);\r\n            query.ExecuteQuery();\r\n\r\n            return (int)query.ScalarValue == 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_GetCountOfTaxpayerLegalAddressesWithSameAddressLine1"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsValidVillage",
						"Hash": "88E7AA468A309DF45252DAFBD54D6079A9E113B9D765B868651974375742D029",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail changeOfRegisteredOfficeFileDetail"
						],
						"Body": {
							"BodyText": "            bool isValid = false;\r\n            IList\u003CIListItem\u003E villagesList = standardLookupRepository.FindItemsByTableName(\u0022Village\u0022);\r\n            IListItem village;\r\n            if (!string.IsNullOrEmpty(changeOfRegisteredOfficeFileDetail.Village))\r\n            {\r\n                village = villagesList.FirstOrDefault(v =\u003E v.Description == changeOfRegisteredOfficeFileDetail.Village);\r\n                if (village != null)\r\n                {\r\n                    changeOfRegisteredOfficeFileDetail.VillageID = village.ID;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            if (!string.IsNullOrEmpty(changeOfRegisteredOfficeFileDetail.AddressLine2))\r\n            {\r\n                village = villagesList.FirstOrDefault(v =\u003E v.Description == changeOfRegisteredOfficeFileDetail.AddressLine2);\r\n                if (village != null)\r\n                {\r\n                    changeOfRegisteredOfficeFileDetail.VillageID = village.ID;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            if (!string.IsNullOrEmpty(changeOfRegisteredOfficeFileDetail.AddressLine3))\r\n            {\r\n                village = villagesList.FirstOrDefault(v =\u003E v.Description == changeOfRegisteredOfficeFileDetail.AddressLine3);\r\n                if (village != null)\r\n                {\r\n                    changeOfRegisteredOfficeFileDetail.VillageID = village.ID;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            village = villagesList.FirstOrDefault(v =\u003E v.Description == changeOfRegisteredOfficeFileDetail.AddressLine1);\r\n            if (village != null)\r\n            {\r\n                changeOfRegisteredOfficeFileDetail.VillageID = village.ID;\r\n                isValid = true;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IListItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemsByTableName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail Village",
								"DataTorque.Iho.Interfaces.Common.IListItem Description",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail VillageID",
								"DataTorque.Iho.Interfaces.Common.IListItem ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail AddressLine2",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail AddressLine3",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail AddressLine1"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "OpenChangeOfRegistrationCaseExists",
						"Hash": "FEFFE68F2C19FFE789B4F1D9FDE0FE566EC2CD682CE51580C5173AD82FC537A6",
						"Parameters": [
							"System.Int32 taxpayerID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IStandardLookupItem caseTypeCode = standardLookupRepository.FindItemByCode(\u0022CaseType\u0022, \u0022CHG\u0022);\r\n            IScalarQuery query = queryFactory.CreateScalarQuery(\u0022spf_CaseTypeOpenCasesByTaxpayer\u0022, transaction);\r\n            query.AddParameter(\u0022TaxpayerID\u0022, SqlDbType.Int, 0, taxpayerID);\r\n            query.AddParameter(\u0022CaseTypeId\u0022, SqlDbType.NVarChar, 0, caseTypeCode.ID);\r\n            query.ExecuteQuery();\r\n\r\n            return (int)query.ScalarValue \u003E 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_CaseTypeOpenCasesByTaxpayer"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem ID",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ProcessChangeOfRegisteredOfficeFileDetails",
						"Hash": "3E9553478B0952B3EC360C09B5F36C905D85D2EE460638C28585CCC29830A65E",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader changeOfRegisteredOfficeFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            foreach (IChangeOfRegisteredOfficeFileDetail changeOfRegisteredOfficeFileDetail in changeOfRegisteredOfficeFileHeader.ChangeOfRegisteredOfficeFileDetails)\r\n            {\r\n                //only process if there were no errors from mapping\r\n                if (changeOfRegisteredOfficeFileDetail.ChangeOfRegisteredOfficeFileDetailStatus != ImportFileDetailStatus.Ignored)\r\n                {\r\n                    if (changeOfRegisteredOfficeFileDetail.Validate())\r\n                    {\r\n                        if (SaveChangeOfRegisteredOfficeFileDetail(changeOfRegisteredOfficeFileDetail, transaction))\r\n                        {\r\n                            //This to double check if a CHG case is created by any other records from the same file\r\n                            if (OpenChangeOfRegistrationCaseExists(changeOfRegisteredOfficeFileDetail.TaxpayerID ?? 0, transaction))\r\n                            {\r\n                                changeOfRegisteredOfficeFileDetail.ChangeOfRegisteredOfficeFileDetailStatus = ImportFileDetailStatus.Ignored;\r\n                                changeOfRegisteredOfficeFileDetail.ErrorMessage = \u0022Open Change of Registration Case\u0022;\r\n                            }\r\n                            else if (CreateChangeOfRegistrationCase(changeOfRegisteredOfficeFileDetail, transaction))\r\n                            {\r\n                                changeOfRegisteredOfficeFileHeader.TotalProcessedChangeOfRegisteredOfficeCount \u002B= 1;\r\n\r\n                                changeOfRegisteredOfficeFileDetail.ChangeOfRegisteredOfficeFileDetailStatus = string.IsNullOrEmpty(changeOfRegisteredOfficeFileDetail.ErrorMessage) ? ImportFileDetailStatus.Imported : ImportFileDetailStatus.Failed;\r\n                            }\r\n                            else\r\n                            {\r\n                                changeOfRegisteredOfficeFileDetail.ChangeOfRegisteredOfficeFileDetailStatus = ImportFileDetailStatus.Failed;\r\n                            }\r\n\r\n                            SaveChangeOfRegisteredOfficeFileDetail(changeOfRegisteredOfficeFileDetail, transaction);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        SaveDetailValidationErrors(changeOfRegisteredOfficeFileDetail, transaction);\r\n                    }\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader ChangeOfRegisteredOfficeFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ChangeOfRegisteredOfficeFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader TotalProcessedChangeOfRegisteredOfficeCount",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Imported",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "CreateChangeOfRegistrationCase",
						"Hash": "9769DF50AF6A7A6C57412484F6E00A177019742B6C1830861CC5112EE090167A",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail changeOfRegisteredOfficeFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success = true;\r\n\r\n            try\r\n            {\r\n                using (ICaseWorkflowState state = caseGenerator.GenerateCaseForTaxpayer(changeOfRegisteredOfficeFileDetail.TaxpayerID ?? 0, \u0022CHG\u0022, \u0022CRCOA\u0022, \u0022REGCON\u0022, null, transaction))\r\n                {\r\n                    changeOfRegisteredOfficeFileDetail.CaseID = state.CurrentCase.ID;\r\n                    if (state.CurrentCase.CurrentBusinessObject is ITaxpayer taxpayer)\r\n                    {\r\n                        IContactAddress address = taxpayer.PrimaryTaxpayerContact.Addresses.FirstOrDefault(a =\u003E a.AddressTypeID == (int)AddressTypes.RegisteredOffice);\r\n\r\n                        if (address != null)\r\n                        {\r\n                            address.Address1 = changeOfRegisteredOfficeFileDetail.AddressLine1;\r\n                            address.Address2 = changeOfRegisteredOfficeFileDetail.AddressLine2;\r\n                            address.Address3 = changeOfRegisteredOfficeFileDetail.AddressLine3;\r\n                            address.VillageID = changeOfRegisteredOfficeFileDetail.VillageID;\r\n                            address.POBox = changeOfRegisteredOfficeFileDetail.POBox;\r\n                            address.PostCode = changeOfRegisteredOfficeFileDetail.PostCode;\r\n                            address.Invalid = false;\r\n                        }\r\n                        else\r\n                        {\r\n                            IContactAddress contactAddress = contactRepository.CreateContactAddress((int?)AddressTypes.RegisteredOffice);\r\n                            contactAddress.Address1 = changeOfRegisteredOfficeFileDetail.AddressLine1;\r\n                            contactAddress.Address2 = changeOfRegisteredOfficeFileDetail.AddressLine2;\r\n                            contactAddress.Address3 = changeOfRegisteredOfficeFileDetail.AddressLine3;\r\n                            contactAddress.VillageID = changeOfRegisteredOfficeFileDetail.VillageID;\r\n                            contactAddress.POBox = changeOfRegisteredOfficeFileDetail.POBox;\r\n                            contactAddress.PostCode = changeOfRegisteredOfficeFileDetail.PostCode;\r\n                            contactAddress.Invalid = false;\r\n                            taxpayer.PrimaryTaxpayerContact.Addresses.AddOrUpdate(null, contactAddress);\r\n                        }\r\n                    }\r\n\r\n                    caseWorkflowRepository.SaveCaseWorkflow(state, transaction);\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                changeOfRegisteredOfficeFileDetail.ErrorMessage = $\u0022Creating the change of registration case is failed because of the following error: {ex.Message}\u0022;\r\n                success = false;\r\n            }\r\n\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ICaseGenerator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContact",
								"DataTorque.Iho.BusinessObjects.AddressTypes",
								"DataTorque.Iho.Interfaces.Repositories.IContactRepository",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.Repositories.ICaseWorkflowRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Calculators.ICaseGenerator GenerateCaseForTaxpayer",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail CaseID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState CurrentCase",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.ITaxpayer PrimaryTaxpayerContact",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress AddressTypeID",
								"DataTorque.Iho.BusinessObjects.AddressTypes RegisteredOffice",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Address1",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail AddressLine1",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Address2",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail AddressLine2",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Address3",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail AddressLine3",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress VillageID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail VillageID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress POBox",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail POBox",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress PostCode",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail PostCode",
								"DataTorque.Iho.Interfaces.BusinessObjects.IContactAddress Invalid",
								"DataTorque.Iho.Interfaces.Repositories.IContactRepository CreateContactAddress",
								"DataTorque.Iho.Interfaces.Repositories.ICaseWorkflowRepository SaveCaseWorkflow",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "CompleteChangeOfRegisteredOfficeFileProcessing",
						"Hash": "253A669DCB2F943F08E962C235F486564672680EA3A36FC98E0609F016410C16",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader changeOfRegisteredOfficeFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            if (changeOfRegisteredOfficeFileHeader.Validate())\r\n            {\r\n                changeOfRegisteredOfficeFileHeader.ImportFileStatus = changeOfRegisteredOfficeFileHeader.ChangeOfRegisteredOfficeFileDetails.Any(d =\u003E d.ChangeOfRegisteredOfficeFileDetailStatus == ImportFileDetailStatus.Failed ||\r\n                                                                                                                                                d.ChangeOfRegisteredOfficeFileDetailStatus == ImportFileDetailStatus.Ignored) ? ImportFileStatus.PartialImport : ImportFileStatus.Complete;\r\n                SaveChangeOfRegisteredOfficeFileHeader(changeOfRegisteredOfficeFileHeader, transaction);\r\n            }\r\n            else\r\n            {\r\n                SaveHeaderValidationErrors(changeOfRegisteredOfficeFileHeader, ImportFileStatus.PartialImport, transaction);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader ChangeOfRegisteredOfficeFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileDetail ChangeOfRegisteredOfficeFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Complete"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "DebtLegalStatusRepository",
				"BaseType": "Unlinked.BaseRepository",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Repositories.IDebtLegalStatusRepository"
				],
				"Methods": [
					{
						"Modifiers": "public",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDebtLegalStatus",
						"Name": "CreateDebtLegalStatus",
						"Hash": "16E2373F191CB82CC6B685B4087FE867451C5356B0F1D25D04BD571EAA4B67A5",
						"Body": {
							"BodyText": "            return new DebtLegalStatus();\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDebtLegalStatus"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDebtLegalStatus",
						"Name": "PopulateDebtLegalStatus",
						"Hash": "7CA06285EA763131E226E1BAB22FA40C18ACBA9A6B2DA327A3DA7C4D9083D7D6",
						"Body": {
							"BodyText": "            throw new System.NotImplementedException();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "DefermentStatementRepository",
				"BaseType": "Unlinked.BaseRepository",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Repositories.IDefermentStatementRepository"
				],
				"Methods": [
					{
						"Modifiers": "public",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
						"Name": "CreateDefermentStatementFileHeader",
						"Hash": "0888F57074F195983BAE1A71ED58B2068D877097514D5207BF53A819CEA260AA",
						"Body": {
							"BodyText": "            DefermentStatementFileHeader defermentStatementFileHeader = new DefermentStatementFileHeader(queryBuilder, headerValidator);\r\n            defermentStatementFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n            defermentStatementFileHeader.UpdateInitialValues();\r\n            return defermentStatementFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.DefermentStatementFileHeader",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.DefermentStatementFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.BusinessObjects.DefermentStatementFileHeader UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
						"Name": "CreateDefermentStatementFileDetail",
						"Hash": "054C9AA8EA51036A27E770F14FFED4DF48C2B083E5ACE066C2362084C62D7352",
						"Body": {
							"BodyText": "            DefermentStatementFileDetail defermentStatementFileDetail = new DefermentStatementFileDetail(queryBuilder, detailValidator);\r\n            defermentStatementFileDetail.UpdateInitialValues();\r\n            return defermentStatementFileDetail;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.DefermentStatementFileDetail",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.DefermentStatementFileDetail UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
						"Name": "ReadFileData",
						"Hash": "A1E870B40A1EA14A34EB88FF0C73C1C09D7FDCEB22662DCED4E4E992AD124433",
						"Parameters": [
							"System.String filePath",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IDefermentStatementFileHeader defermentStatementFileHeader = CreateDefermentStatementFileHeader();\r\n\r\n            // Populate basic file information\r\n            string[] content = ReadFileContents(filePath);\r\n            defermentStatementFileHeader.FileContents = content;\r\n            defermentStatementFileHeader.FileName = Path.GetFileName(filePath);\r\n            defermentStatementFileHeader.FileProcessedDate = DateTime.Today;\r\n            string fileChecksum = ComputeFileChecksum(filePath);\r\n            defermentStatementFileHeader.Checksum = fileChecksum;\r\n            int statementNumber = defermentStatementParser.GetStatementNumber(content);\r\n            defermentStatementFileHeader.StatementNumber = statementNumber;\r\n            string period = defermentStatementParser.GetPeriod(content);\r\n            defermentStatementFileHeader.FileHeaderPeriod = period;\r\n\r\n            // Validate header\r\n            IValidationResult validationResult = headerValidator.Validate(defermentStatementFileHeader);\r\n            if (!validationResult.IsValid)\r\n            {\r\n                foreach (KeyValuePair\u003Cstring, string\u003E error in validationResult.GetErrors())\r\n                {\r\n                    defermentStatementFileHeader.ValidationErrorDictionary.Add(error.Key, error.Value);\r\n                }\r\n                SaveHeaderValidationErrors(defermentStatementFileHeader, ImportFileStatus.Failed, transaction);\r\n                return defermentStatementFileHeader;\r\n            }\r\n\r\n            // Validate checksum and statement details in one db call\r\n            ValidationResultEnum validationResultEnum = CheckFileHeaderExistence(fileChecksum, period, statementNumber, transaction);\r\n\r\n            if (validationResultEnum == ValidationResultEnum.ChecksumExists)\r\n            {\r\n                defermentStatementFileHeader.ValidationErrorDictionary.Add(\u0022Checksum\u0022, \u0022File checksum already exists in the database.\u0022);\r\n                SaveHeaderValidationErrors(defermentStatementFileHeader, ImportFileStatus.Failed, transaction);\r\n                return defermentStatementFileHeader;\r\n            }\r\n\r\n            if (validationResultEnum == ValidationResultEnum.StatementNumberAndPeriodExist)\r\n            {\r\n                defermentStatementFileHeader.ValidationErrorDictionary.Add(\u0022StatementNumberAndPeriodExist\u0022, \u0022Identical matching imported statement error.\u0022);\r\n                SaveHeaderValidationErrors(defermentStatementFileHeader, ImportFileStatus.Failed, transaction);\r\n                return defermentStatementFileHeader;\r\n            }\r\n\r\n            defermentStatementFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n            SaveHeader(defermentStatementFileHeader, transaction);\r\n\r\n            return defermentStatementFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser",
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ValidationResultEnum"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader FileName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader FileProcessedDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader Checksum",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser GetStatementNumber",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader StatementNumber",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser GetPeriod",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader FileHeaderPeriod",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate",
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid",
								"DataTorque.Iho.Interfaces.Common.IValidationResult GetErrors",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader ValidationErrorDictionary",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ValidationResultEnum ChecksumExists",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ValidationResultEnum StatementNumberAndPeriodExist",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "ImportFileDetails",
						"Hash": "90F22093753220E56053554BA992EB103DBF17F37A74B46DDA1BFFB526E1C108",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader defermentStatementFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success;\r\n            try\r\n            {\r\n                // 1. Map and validate file details.\r\n                bool hasInvalidRows = MapDefermentStatementFileDetails(defermentStatementFileHeader, transaction);\r\n                if (hasInvalidRows)\r\n                {\r\n                    // Collect validation errors for invalid rows.\r\n                    List\u003CIDefermentStatementFileDetail\u003E invalidRows = defermentStatementFileHeader.DefermentStatementFileDetails\r\n                                                                                                          .Where(d =\u003E d.DefermentStatementFileDetailStatus == ImportFileDetailStatus.Invalid)\r\n                                                                                                          .ToList();\r\n                    StringBuilder rowValidationErrors = new StringBuilder();\r\n                    foreach (IDefermentStatementFileDetail row in invalidRows)\r\n                    {\r\n                        rowValidationErrors.Append($\u0022 Row {row.RowIndex}: {row.ErrorMessage}\u0022);\r\n                    }\r\n\r\n                    // Save validation errors to the header and mark the file as failed.\r\n                    defermentStatementFileHeader.Notes = $\u0022Importing Deferment Statement file content failed because of the following errors:{rowValidationErrors}\u0022;\r\n                    defermentStatementFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveHeader(defermentStatementFileHeader, transaction);\r\n                    return false;\r\n                }\r\n\r\n                // 2. Check for locked / corrected returns\r\n                (bool hasLocked, bool hasCorrected) = ValidateReturnConflicts(defermentStatementFileHeader, transaction);\r\n\r\n                if (hasLocked || hasCorrected)\r\n                {\r\n                    defermentStatementFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    defermentStatementFileHeader.Notes = hasCorrected\r\n                        ? \u0022Import failed due to Corrected returns in the database.\u0022\r\n                        : \u0022Import failed due to locked returns in the database.\u0022;\r\n\r\n                    StringBuilder errorDetails = new StringBuilder();\r\n                    foreach (IDefermentStatementFileDetail detail in defermentStatementFileHeader.DefermentStatementFileDetails\r\n                                 .Where(d =\u003E d.DefermentStatementFileDetailStatus == ImportFileDetailStatus.Invalid))\r\n                    {\r\n                        errorDetails.AppendLine(detail.ErrorMessage);\r\n                    }\r\n\r\n                    defermentStatementFileHeader.Notes \u002B= Environment.NewLine \u002B errorDetails.ToString();\r\n                    SaveHeader(defermentStatementFileHeader, transaction);\r\n                    return false;\r\n                }\r\n\r\n                // 3. Process and save valid details\r\n                SaveFileDetails(defermentStatementFileHeader.DefermentStatementFileDetails, transaction);\r\n                ProcessDefermentStatementFileDetails(defermentStatementFileHeader, transaction);\r\n                success = CompleteDefermentStatementFileProcessing(defermentStatementFileHeader, transaction);\r\n\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                // Handle any exceptions that occur during the import process.\r\n                success = false;\r\n                defermentStatementFileHeader.Notes = $\u0022Importing the Deferment Statement file content failed because of the following error: {ex.Message}\u0022;\r\n                defermentStatementFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n            }\r\n\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader DefermentStatementFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail DefermentStatementFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail RowIndex",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "SaveHeader",
						"Hash": "FD55B36200C8F28E1312F309904F976CCFA89F4C0199DAE135EBEDBD74E40455",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader defermentStatementFileHeader"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveHeader, defermentStatementFileHeader);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "SaveHeader",
						"Hash": "FF639E78BB4A512A10902A3E1F19A03D8AFC571F3C77A2EA5BFAFC2D0FDCCA84",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader defermentStatementFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            if (transaction == null)\r\n            {\r\n                result = SaveHeader(defermentStatementFileHeader);\r\n            }\r\n            else\r\n            {\r\n                if (defermentStatementFileHeader.IsDirty() || defermentStatementFileHeader.IsSavedWhenClean)\r\n                {\r\n                    defermentStatementFileHeader.DistributedSQLTransaction = transaction;\r\n                    if (defermentStatementFileHeader.Validate())\r\n                    {\r\n                        result = defermentStatementFileHeader.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true; // Return true if no changes need to be saved.\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader SaveData"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "SaveFileDetail",
						"Hash": "08A016935A7558944FDD83E3F92448026C02C5E080529F0F700BB593844F82E9",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail defermentStatementFileDetail"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveFileDetail, defermentStatementFileDetail);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "SaveFileDetail",
						"Hash": "900A66EAD9EDEE4AC79996C9E483B5318F3BEEC5B8D8D7C182DC11EAA1CF091E",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail defermentStatementFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n\r\n            if (transaction == null)\r\n            {\r\n                result = SaveFileDetail(defermentStatementFileDetail);\r\n            }\r\n            else\r\n            {\r\n                if (defermentStatementFileDetail.IsDirty() || defermentStatementFileDetail.IsSavedWhenClean)\r\n                {\r\n                    defermentStatementFileDetail.DistributedSQLTransaction = transaction;\r\n                    if (defermentStatementFileDetail.Validate())\r\n                    {\r\n                        result = defermentStatementFileDetail.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true; // Return true if no changes need to be saved.\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail SaveData"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "SaveFileDetails",
						"Hash": "19126BA1AB428F3CBF2695992CB135F1B1287DC58501944AEF21B927CC90C187",
						"Parameters": [
							"System.Collections.Generic.IList defermentStatementFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            foreach (IDefermentStatementFileDetail recordFileDetail in defermentStatementFileDetail)\r\n            {\r\n                result = SaveFileDetail(recordFileDetail, transaction);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "CompleteDefermentStatementFileProcessing",
						"Hash": "63D84B9145C1E778E2B513C6A8BE37A6938A5BB5C01802E84CE6D968377F1079",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader defermentStatementFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            if (defermentStatementFileHeader.Validate())\r\n            {\r\n                defermentStatementFileHeader.ImportFileStatus = defermentStatementFileHeader.DefermentStatementFileDetails.Any(d =\u003E d.DefermentStatementFileDetailStatus == ImportFileDetailStatus.Failed ||\r\n                    d.DefermentStatementFileDetailStatus == ImportFileDetailStatus.Ignored) ? ImportFileStatus.PartialImport : ImportFileStatus.Complete;\r\n                SaveHeader(defermentStatementFileHeader, transaction);\r\n            }\r\n            else\r\n            {\r\n                SaveHeaderValidationErrors(defermentStatementFileHeader, ImportFileStatus.PartialImport, transaction);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader DefermentStatementFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail DefermentStatementFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Complete"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ProcessDefermentStatementFileDetails",
						"Hash": "7771F4E6EE9DF58203E4D0966310E958A6D877CC31597AC82C0CFEB28B78E308",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader defermentStatementFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            // Get Period and Year IDs for both tax types\r\n            int taxReturnTypeReturnID = GetTaxReturnTypeReturnID() ?? throw new InvalidOperationException(\u0022TaxReturnTypeReturnID is null\u0022);\r\n            (int PeriodNameID, int YearNameID) periodAndYearIdsForCUSDV = defermentStatementParser.GetPeriodAndYearIds(defermentStatementFileHeader.FileContents, TaxTypeCodes.CUSDV);\r\n            (int PeriodNameID, int YearNameID) periodAndYearIdsForCUSDEX = defermentStatementParser.GetPeriodAndYearIds(defermentStatementFileHeader.FileContents, TaxTypeCodes.CUSDEX);\r\n\r\n            // Prepare a list to hold processed detail data\r\n            List\u003CDetailData\u003E detailDataList = PrepareDetailDataList(defermentStatementFileHeader);\r\n\r\n            // Group details by TaxpayerID and TaxTypeCode\r\n            IEnumerable\u003CIGrouping\u003CDetailGroupKey, DetailData\u003E\u003E groupedDetails = detailDataList\r\n                .GroupBy(d =\u003E new DetailGroupKey { TaxpayerID = (int)d.TaxpayerID, TaxTypeCode = d.TaxTypeCode });\r\n\r\n            // Process each group\r\n            foreach (IGrouping\u003CDetailGroupKey, DetailData\u003E group in groupedDetails)\r\n            {\r\n                ProcessDetailGroup(group, taxReturnTypeReturnID, periodAndYearIdsForCUSDV, periodAndYearIdsForCUSDEX, transaction, defermentStatementFileHeader);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailGroupKey",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser GetPeriodAndYearIds",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader FileContents",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes CUSDV",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes CUSDEX",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData TaxpayerID",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData TaxTypeCode"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Collections.Generic.List",
						"Name": "PrepareDetailDataList",
						"Hash": "625E9BB2BF45A28F337E13976FDC8D2D78F7014F2CE247D74D0F13CA73629D24",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader defermentStatementFileHeader"
						],
						"Body": {
							"BodyText": "            List\u003CDetailData\u003E detailDataList = new List\u003CDetailData\u003E();\r\n\r\n            foreach (IDefermentStatementFileDetail detail in defermentStatementFileHeader.DefermentStatementFileDetails)\r\n            {\r\n                if (detail.DefermentStatementFileDetailStatus == ImportFileDetailStatus.Ignored)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                IDictionary\u003Cstring, object\u003E record = defermentStatementParser.GetDataRow(detail.Record);\r\n                if (record == null)\r\n                {\r\n                    detail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                    detail.ErrorMessage = \u0022Failed to parse record.\u0022;\r\n                    continue;\r\n                }\r\n\r\n                if (detail.TaxpayerID == null)\r\n                {\r\n                    detail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                    detail.ErrorMessage = \u0022TaxpayerID is null.\u0022;\r\n                    continue;\r\n                }\r\n\r\n                if (string.IsNullOrEmpty(detail.TaxTypeCode))\r\n                {\r\n                    detail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                    detail.ErrorMessage = \u0022TaxTypeCode is null or empty.\u0022;\r\n                    continue;\r\n                }\r\n\r\n                if (detail.TaxTypeID == null)\r\n                {\r\n                    detail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                    detail.ErrorMessage = \u0022TaxTypeID is null.\u0022;\r\n                    continue;\r\n                }\r\n\r\n                // Create and add valid DetailData\r\n                detailDataList.Add(new DetailData\r\n                {\r\n                    Detail = detail,\r\n                    Record = record,\r\n                    TaxpayerID = detail.TaxpayerID.Value,\r\n                    TaxTypeCode = detail.TaxTypeCode,\r\n                    TaxTypeID = detail.TaxTypeID.Value,\r\n                    DutyDue = record.GetValueOrDefault(DefermentStatementParser.Keys.DutyDue) as decimal? ?? 0m,\r\n                    VATDue = record.GetValueOrDefault(DefermentStatementParser.Keys.VATDue) as decimal? ?? 0m,\r\n                    ExciseDue = record.GetValueOrDefault(DefermentStatementParser.Keys.ExciseDue) as decimal? ?? 0m,\r\n                    TotalDue = record.GetValueOrDefault(DefermentStatementParser.Keys.TotalDue) as decimal? ?? 0m\r\n                });\r\n            }\r\n\r\n            return detailDataList;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.DefermentStatementParser"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader DefermentStatementFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail DefermentStatementFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser GetDataRow",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail TaxTypeCode",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail TaxTypeID",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.DefermentStatementParser Keys"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ProcessDetailGroup",
						"Hash": "44646117DC6C8A49FAC56CC20760846D632F4A006680FC7A075663B56628CA9B",
						"Parameters": [
							"System.Linq.IGrouping group",
							"System.Int32 taxReturnTypeReturnID",
							"System.ValueTuple periodAndYearIdsForCUSDV",
							"System.ValueTuple periodAndYearIdsForCUSDEX",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction",
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader defermentStatementFileHeader"
						],
						"Body": {
							"BodyText": "            int taxpayerID = group.Key.TaxpayerID;\r\n            string taxTypeCode = group.Key.TaxTypeCode;\r\n            int taxTypeID = (int)group.First().TaxTypeID;\r\n\r\n            (int PeriodNameID, int YearNameID) periodAndYearIds = taxTypeCode == TaxTypeCodes.CUSDV ? periodAndYearIdsForCUSDV : periodAndYearIdsForCUSDEX;\r\n\r\n            (int TaxReturnHeaderID, int TaxReturnID) dummyTaxReturn = taxReturnRepository.CreateAndReturnDummyTaxReturn(taxpayerID, taxTypeID, periodAndYearIds.YearNameID, periodAndYearIds.PeriodNameID, transaction);\r\n\r\n            ITaxReturnHeader returnHeader = taxReturnRepository.FindTaxReturnHeaderByTaxReturn(dummyTaxReturn.TaxReturnID, taxpayerID, transaction) ?? throw new Exception(\u0022Tax Return Header not found.\u0022);\r\n\r\n            // Initialize tax return\r\n            InitializeTaxReturn(returnHeader, taxReturnTypeReturnID);\r\n\r\n            // Compute total amounts\r\n            decimal totalDutyDue, totalVATDue, totalExciseDue, totalTotalDue;\r\n            ComputeTotalAmounts(group, out totalDutyDue, out totalVATDue, out totalExciseDue, out totalTotalDue);\r\n\r\n            // Set the summed values on the tax return\r\n            SetSummedValuesOnTaxReturn(returnHeader, taxTypeCode, totalDutyDue, totalVATDue, totalExciseDue, totalTotalDue);\r\n\r\n            // Process each detail in the group\r\n            foreach (DetailData detailData in group)\r\n            {\r\n                ProcessDetail(detailData, returnHeader, taxTypeCode, transaction, defermentStatementFileHeader);\r\n            }\r\n\r\n            // Save the tax return\r\n            taxReturnRepository.SaveTaxReturnHeader(returnHeader, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes CUSDV",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository CreateAndReturnDummyTaxReturn",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository FindTaxReturnHeaderByTaxReturn",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository SaveTaxReturnHeader"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "InitializeTaxReturn",
						"Hash": "19AA2149755B4A10254C888B00B96CFDB135527AB42D55E09546EE8699B7E8E3",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader returnHeader",
							"System.Int32 taxReturnTypeReturnID"
						],
						"Body": {
							"BodyText": "            returnHeader.TaxReturn.TaxReturnTypeID = taxReturnTypeReturnID;\r\n            returnHeader.TaxReturn.DateReceived = DateTime.Today;\r\n            returnHeader.TaxReturn.Correct = false;\r\n            returnHeader.TaxReturn.CorrectDate = null;\r\n            returnHeader.TaxReturn.NotRequired = false;\r\n            returnHeader.TaxReturn.DummyReturn = false;\r\n            returnHeader.SubmissionTypeID = SubmissionType.Electronic;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader",
								"DataTorque.Iho.Interfaces.TaxReturn.SubmissionType"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader TaxReturn",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader SubmissionTypeID",
								"DataTorque.Iho.Interfaces.TaxReturn.SubmissionType Electronic"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ComputeTotalAmounts",
						"Hash": "68ED090947682696D7C8F6229E8B83472152F21108A8464C0A9198D9E84603F9",
						"Parameters": [
							"System.Collections.Generic.IEnumerable group",
							"System.Decimal totalDutyDue",
							"System.Decimal totalVATDue",
							"System.Decimal totalExciseDue",
							"System.Decimal totalTotalDue"
						],
						"Body": {
							"BodyText": "            totalDutyDue = 0m;\r\n            totalVATDue = 0m;\r\n            totalExciseDue = 0m;\r\n            totalTotalDue = 0m;\r\n\r\n            foreach (DetailData detailData in group)\r\n            {\r\n                totalDutyDue \u002B= detailData.DutyDue;\r\n                totalVATDue \u002B= detailData.VATDue;\r\n                totalExciseDue \u002B= detailData.ExciseDue;\r\n                totalTotalDue \u002B= detailData.TotalDue;\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData DutyDue",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData VATDue",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData ExciseDue",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData TotalDue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SetSummedValuesOnTaxReturn",
						"Hash": "13F0BACA750F53438A1F37D89DBCDD93B34DA5E8D8E0BCC864DF6C07B92527DB",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader returnHeader",
							"System.String taxTypeCode",
							"System.Decimal totalDutyDue",
							"System.Decimal totalVATDue",
							"System.Decimal totalExciseDue",
							"System.Decimal totalTotalDue"
						],
						"Body": {
							"BodyText": "            if (returnHeader.TaxReturn.TaxPayable == null)\r\n            {\r\n                returnHeader.TaxReturn.TaxPayable = 0;\r\n            }\r\n            if (taxTypeCode == TaxTypeCodes.CUSDV)\r\n            {\r\n                // Set TaxPayable to the total of TotalDue\r\n                returnHeader.TaxReturn.TaxPayable \u002B= totalTotalDue;\r\n\r\n                // Update TaxReturnItems\r\n                SetTaxReturnItemValue(returnHeader, QuestionCodes.CUSDV.DutyDue, totalDutyDue);\r\n                SetTaxReturnItemValue(returnHeader, QuestionCodes.CUSDV.VATDue, totalVATDue);\r\n                SetTaxReturnItemValue(returnHeader, QuestionCodes.CUSDV.TotalDue, totalTotalDue);\r\n            }\r\n            else if (taxTypeCode == TaxTypeCodes.CUSDEX)\r\n            {\r\n\r\n                // Set TaxPayable to the total of ExciseDue\r\n                returnHeader.TaxReturn.TaxPayable \u002B= totalExciseDue;\r\n\r\n                // Update TaxReturnItems\r\n                SetTaxReturnItemValue(returnHeader, QuestionCodes.CUSDEX.TotalExciseDue, totalExciseDue);\r\n            }\r\n            else\r\n            {\r\n                throw new Exception($\u0022Unsupported Tax Type Code: {taxTypeCode}\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.CUSDV",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.QuestionCodes",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.CUSDEX"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader TaxReturn",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes CUSDV",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.QuestionCodes CUSDV",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes CUSDEX",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.QuestionCodes CUSDEX"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SetTaxReturnItemValue",
						"Hash": "F8F3638AEAC42ADCB601B5170082DD884CE8C7BD109D9C97520207F571212F3B",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader returnHeader",
							"System.String questionCode",
							"System.Decimal value"
						],
						"Body": {
							"BodyText": "            ITaxReturnItem taxReturnItem = returnHeader.TaxReturn.TaxReturnItemList.FirstOrDefault(c =\u003E c.Question.Code == questionCode)\r\n                                           ?? throw new Exception($\u0022TaxReturnItem with Question Code \u0027{questionCode}\u0027 not found.\u0022);\r\n            if (taxReturnItem.Return == null)\r\n            {\r\n                taxReturnItem.Return = 0;\r\n            }\r\n            taxReturnItem.Return \u002B= value;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnQuestion"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader TaxReturn",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem Question",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem Return"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ProcessDetail",
						"Hash": "59F8072E38BA18E36625C75C72B09A5EACD981E070DD54BAB7EC3EA31A35AE2B",
						"Parameters": [
							"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData detailData",
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader returnHeader",
							"System.String taxTypeCode",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction",
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader defermentStatementFileHeader"
						],
						"Body": {
							"BodyText": "            IDefermentStatementFileDetail detail = detailData.Detail;\r\n            IDictionary\u003Cstring, object\u003E record = detailData.Record;\r\n\r\n            try\r\n            {\r\n                // Create TaxReturnItemDetails\r\n                CreateTaxReturnItemDetails(returnHeader, record, taxTypeCode, transaction);\r\n\r\n                // Update processed count and detail status\r\n                defermentStatementFileHeader.TotalProcessedCount \u002B= 1;\r\n                detail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Imported;\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                detail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Failed;\r\n                detail.ErrorMessage = ex.Message;\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData Detail",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailData Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader TotalProcessedCount",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail DefermentStatementFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Imported",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "CreateTaxReturnItemDetails",
						"Hash": "2C59A1C8BE3DC2F049AF325A06097DE5D1AAE8A2F01E15F416FC531756484CA6",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader returnHeader",
							"System.Collections.Generic.IDictionary record",
							"System.String taxTypeCode",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IList\u003CITaxReturnDetailQuestion\u003E detailQuestions = taxReturnDesignRepository\r\n                .FindTaxReturnDetailQuestionsByTaxReturnDesign(returnHeader.TaxReturn.Design.ID, transaction);\r\n\r\n            string questionCode = taxTypeCode == TaxTypeCodes.CUSDV\r\n                ? QuestionCodes.CUSDV.TotalDue\r\n                : QuestionCodes.CUSDEX.TotalExciseDue;\r\n\r\n            ITaxReturnItem taxReturnItem = returnHeader.TaxReturn.TaxReturnItemList\r\n                .First(c =\u003E c.Question.Code == questionCode);\r\n\r\n            ITaxReturnItemDetail itemDetail = taxReturnRepository.CreateTaxReturnItemDetail();\r\n            itemDetail.TaxReturnItem = taxReturnItem;\r\n            taxReturnItem.DetailList.Add(itemDetail);\r\n\r\n            // Map record fields to detail questions\r\n            foreach (ITaxReturnDetailQuestion question in detailQuestions)\r\n            {\r\n                if (QuestionCodeMappings.TryGetValue(question.Code, out var mapping))\r\n                {\r\n                    ITaxReturnItemDetailItem itemDetailItem = taxReturnRepository.CreateTaxReturnItemDetailItem();\r\n                    itemDetailItem.DetailQuestion = question;\r\n                    itemDetailItem.TaxReturnItemDetail = itemDetail;\r\n                    itemDetail.DetailItemList.Add(itemDetailItem);\r\n\r\n                    object value = record.GetValueOrDefault(mapping.RecordKey);\r\n                    mapping.Setter(itemDetailItem, value);\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnDetailQuestion",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnDesignRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnDesign",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.CUSDV",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.QuestionCodes",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.CUSDEX",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnQuestion",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnDesignRepository FindTaxReturnDetailQuestionsByTaxReturnDesign",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader TaxReturn",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes CUSDV",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.QuestionCodes CUSDV",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.QuestionCodes CUSDEX",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem Question",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository CreateTaxReturnItemDetail",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail TaxReturnItem",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem DetailList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnDetailQuestion Code",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository CreateTaxReturnItemDetailItem",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem DetailQuestion",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetailItem TaxReturnItemDetail",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItemDetail DetailItemList"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "MapDefermentStatementFileDetails",
						"Hash": "A15B5DEBCBC8A4A975DB0580A0BB9FD380E31F154D632A81798E364C5B7E85CC",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader defermentStatementFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool hasInvalidRows = false;\r\n\r\n            int? cusdevID = GetTaxTypeID(TaxTypeCodes.CUSDV);\r\n            int? cusdexID = GetTaxTypeID(TaxTypeCodes.CUSDEX);\r\n\r\n            // Start tracking the row index (assuming CSV starts at line 1 and data at line 6)\r\n            int csvRowIndex = DataStartRowIndex;\r\n\r\n            foreach (string record in defermentStatementFileHeader.FileContents.Skip(HeaderRowCount))\r\n            {\r\n                // Parse the record once\r\n                IDictionary\u003Cstring, object\u003E recordData = defermentStatementParser.GetDataRow(record);\r\n\r\n                if (recordData == null || recordData.Count == 0)\r\n                {\r\n                    // Handle invalid record format\r\n                    IDefermentStatementFileDetail invalidDetail = CreateAndInitializeFileDetail(defermentStatementFileHeader, record);\r\n                    invalidDetail.RowIndex = csvRowIndex;\r\n                    invalidDetail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                    invalidDetail.ErrorMessage = \u0022Failed to parse record.\u0022;\r\n                    hasInvalidRows = true;\r\n                    csvRowIndex\u002B\u002B;\r\n                    continue;\r\n                }\r\n\r\n                bool hasCUSDVData = defermentStatementParser.HasCUSDVData(recordData);\r\n                bool hasCUSDEXData = defermentStatementParser.HasCUSDEXData(recordData);\r\n\r\n                // Process CUSDV data\r\n                if (hasCUSDVData)\r\n                {\r\n                    IDefermentStatementFileDetail detailCUSDV = CreateAndInitializeFileDetail(defermentStatementFileHeader, record);\r\n                    detailCUSDV.RowIndex = csvRowIndex;\r\n                    detailCUSDV.Record = record;\r\n                    detailCUSDV.TaxTypeID = cusdevID;\r\n                    detailCUSDV.TaxTypeCode = TaxTypeCodes.CUSDV;\r\n\r\n                    AssignTaxpayerID(recordData, detailCUSDV, TaxTypeCodes.CUSDV, ref hasInvalidRows);\r\n                    ValidateAndFinalizeDetail(detailCUSDV, transaction, ref hasInvalidRows);\r\n                }\r\n\r\n                // Process CUSDEX data\r\n                if (hasCUSDEXData)\r\n                {\r\n                    IDefermentStatementFileDetail detailCUSDEX = CreateAndInitializeFileDetail(defermentStatementFileHeader, record);\r\n                    detailCUSDEX.RowIndex = csvRowIndex;\r\n                    detailCUSDEX.Record = record;\r\n                    detailCUSDEX.TaxTypeID = cusdexID;\r\n                    detailCUSDEX.TaxTypeCode = TaxTypeCodes.CUSDEX;\r\n\r\n                    AssignTaxpayerID(recordData, detailCUSDEX, TaxTypeCodes.CUSDEX, ref hasInvalidRows);\r\n                    ValidateAndFinalizeDetail(detailCUSDEX, transaction, ref hasInvalidRows);\r\n                }\r\n\r\n                if (!hasCUSDVData \u0026\u0026 !hasCUSDEXData)\r\n                {\r\n                    IDefermentStatementFileDetail ignoredDetail = CreateAndInitializeFileDetail(defermentStatementFileHeader, record);\r\n                    ignoredDetail.RowIndex = csvRowIndex;\r\n                    ignoredDetail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Ignored;\r\n                }\r\n\r\n                csvRowIndex\u002B\u002B;\r\n            }\r\n\r\n            return hasInvalidRows;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes CUSDV",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxTypeCodes CUSDEX",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser GetDataRow",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail RowIndex",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail DefermentStatementFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser HasCUSDVData",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser HasCUSDEXData",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail TaxTypeID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail TaxTypeCode",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
						"Name": "CreateAndInitializeFileDetail",
						"Hash": "D285EE3E36DFB73350EA0D8C7F031EEA49E383D960E2ABB25CCA44ADEC49FAAF",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader header",
							"System.String record"
						],
						"Body": {
							"BodyText": "            IDefermentStatementFileDetail detail = CreateDefermentStatementFileDetail();\r\n            detail.DefermentStatementFileHeaderID = header.ID;\r\n            detail.Record = record;\r\n            detail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.ReadingFileContent;\r\n            header.DefermentStatementFileDetails.Add(detail);\r\n            return detail;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail DefermentStatementFileHeaderID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail DefermentStatementFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus ReadingFileContent",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader DefermentStatementFileDetails"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ValidateAndFinalizeDetail",
						"Hash": "6D7E38DB988ACB3DCD66BF04D593B41C5303795AD00FA42D04D4C200B5F2034C",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail detail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction",
							"System.Boolean hasInvalidRows"
						],
						"Body": {
							"BodyText": "            if (!detail.Validate())\r\n            {\r\n                detail.ErrorMessage = string.Join(\u0022; \u0022, detail.ValidationErrorDictionary.Values);\r\n                detail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                hasInvalidRows = true;\r\n            }\r\n            else\r\n            {\r\n                detail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Processing;\r\n            }\r\n\r\n            FinalizeFileDetailStatus(detail, transaction, ref hasInvalidRows);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail ValidationErrorDictionary",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail DefermentStatementFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Processing"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.ValueTuple",
						"Name": "ValidateReturnConflicts",
						"Hash": "B926157928117A415D4D8E2C3646A526E1728026F0B850005DEAF1FB23FA85A4",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader defermentStatementFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "\r\n            // Cache to store period and year IDs for each tax type. The dictionary will contain at most 2 records,\r\n            // as each file will only have data for 1 year/period per tax type.\r\n            Dictionary\u003Cstring, (int PeriodNameID, int YearNameID)\u003E periodAndYearCache = new Dictionary\u003Cstring, (int PeriodNameID, int YearNameID)\u003E();\r\n\r\n            // Prepare a list of ReturnDetail objects to check\r\n            List\u003CReturnDetail\u003E returnDetails = defermentStatementFileHeader.DefermentStatementFileDetails\r\n                .Where(d =\u003E d.DefermentStatementFileDetailStatus != ImportFileDetailStatus.Ignored)\r\n                .Select(detail =\u003E\r\n                {\r\n                    // Get cached Period and Year IDs, or query and cache the result\r\n                    if (!periodAndYearCache.TryGetValue(detail.TaxTypeCode, out var periodAndYear))\r\n                    {\r\n                        // While the lookup repository already caches the result from the database, I don\u0027t want to perform the parsing part every time, so let\u0027s cache it here as well.\r\n                        periodAndYear = defermentStatementParser.GetPeriodAndYearIds(defermentStatementFileHeader.FileContents, detail.TaxTypeCode);\r\n                        periodAndYearCache[detail.TaxTypeCode] = periodAndYear;\r\n                    }\r\n\r\n                    return new\r\n                    {\r\n                        detail.RowIndex,\r\n                        detail.TaxTypeID,\r\n                        TaxpayerID = detail.TaxpayerID,\r\n                        PeriodAndYear = periodAndYear\r\n                    };\r\n                })\r\n                .Where(d =\u003E d.TaxpayerID != null \u0026\u0026 d.PeriodAndYear != (0, 0) \u0026\u0026 d.TaxTypeID != null)\r\n                .Select(d =\u003E new ReturnDetail\r\n                {\r\n                    RowIndex = d.RowIndex,\r\n                    TaxTypeId = (int)d.TaxTypeID,\r\n                    TaxpayerId = d.TaxpayerID.Value,\r\n                    YearId = d.PeriodAndYear.YearNameID,\r\n                    PeriodId = d.PeriodAndYear.PeriodNameID\r\n                })\r\n                .ToList();\r\n\r\n            if (returnDetails.Count == 0)\r\n            {\r\n                return (false, false);\r\n            }\r\n\r\n            //Fetch problems (locked / corrected) from DB\r\n            List\u003CReturnDetail\u003E problemReturns = GetProblemReturns(returnDetails, transaction);\r\n            Dictionary\u003C(int RowIndex, int TaxTypeId), ReturnDetail\u003E conflictLookup = problemReturns.ToDictionary(\r\n                c =\u003E (c.RowIndex, c.TaxTypeId), c =\u003E c);\r\n\r\n            bool hasLocked = false, hasCorrected = false;\r\n            // Update the details\r\n            foreach (IDefermentStatementFileDetail detail in defermentStatementFileHeader.DefermentStatementFileDetails)\r\n            {\r\n                if (!detail.TaxTypeID.HasValue)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                if (!conflictLookup.TryGetValue((detail.RowIndex, detail.TaxTypeID.Value), out ReturnDetail hit))\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                detail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n\r\n                if (hit.Problem == ReturnProblem.Locked)\r\n                {\r\n                    detail.ErrorMessage =\r\n                        $\u0022Row {detail.RowIndex}: Return for TaxTypeCode \u0027{detail.TaxTypeCode}\u0027, \u0022 \u002B\r\n                        $\u0022Period \u0027{hit.PeriodId}\u0027, Year \u0027{hit.YearId}\u0027, TaxpayerID \u0027{detail.TaxpayerID}\u0027 \u0022 \u002B\r\n                        $\u0022is locked.\u0022;\r\n                    hasLocked = true;\r\n                }\r\n                else        // Corrected\r\n                {\r\n                    detail.ErrorMessage =\r\n                        $\u0022Row {detail.RowIndex}: Return for TaxTypeCode \u0027{detail.TaxTypeCode}\u0027, \u0022 \u002B\r\n                        $\u0022Period \u0027{hit.PeriodId}\u0027, Year \u0027{hit.YearId}\u0027, TaxpayerID \u0027{detail.TaxpayerID}\u0027 \u0022 \u002B\r\n                        $\u0022has already been corrected.\u0022;\r\n                    hasCorrected = true;\r\n\r\n                }\r\n            }\r\n\r\n            return (hasLocked, hasCorrected);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ReturnDetail",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ReturnProblem"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader DefermentStatementFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail DefermentStatementFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail TaxTypeCode",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser GetPeriodAndYearIds",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail RowIndex",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail TaxTypeID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail PeriodAndYear",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ReturnDetail RowIndex",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ReturnDetail TaxTypeId",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ReturnDetail Problem",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ReturnProblem Locked",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ReturnDetail PeriodId",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ReturnDetail YearId"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Collections.Generic.List",
						"Name": "GetProblemReturns",
						"Hash": "260627408D1AB222CF8EAFC8AF081CB9600B53BFE289E5BA3D0E7604AD2F3242",
						"Parameters": [
							"System.Collections.Generic.List returnDetails",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            string jsonPayload = Newtonsoft.Json.JsonConvert.SerializeObject(returnDetails);\r\n\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_DefermentStatement_CheckReturnConflicts_Bulk\u0022, transaction);\r\n            query.AddParameter(\u0022@ReturnDetailsJson\u0022, SqlDbType.NVarChar, -1, jsonPayload);\r\n            query.ExecuteQuery();\r\n\r\n            List\u003CReturnDetail\u003E problemReturns = query.DataTable\r\n                .AsEnumerable()\r\n                .Select(r =\u003E\r\n                {\r\n                    ReturnProblem problem;\r\n                    if (!Enum.TryParse(r.Field\u003Cstring\u003E(\u0022Problem\u0022), ignoreCase: true, out problem))\r\n                    {\r\n                        problem = ReturnProblem.None;\r\n                    }\r\n\r\n                    return new ReturnDetail\r\n                    {\r\n                        RowIndex = r.Field\u003Cint\u003E(\u0022RowIndex\u0022),\r\n                        TaxTypeId = r.Field\u003Cint\u003E(\u0022TaxTypeId\u0022),\r\n                        YearId = r.Field\u003Cint\u003E(\u0022YearId\u0022),\r\n                        PeriodId = r.Field\u003Cint\u003E(\u0022PeriodId\u0022),\r\n                        TaxpayerId = r.Field\u003Cint\u003E(\u0022TaxpayerId\u0022),\r\n                        Problem = problem\r\n                    };\r\n                })\r\n                .ToList();\r\n\r\n            return problemReturns;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ReturnDetail",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ReturnProblem"
							],
							"ReferencedStoredProcedures": [
								"spf_DefermentStatement_CheckReturnConflicts_Bulk"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ReturnProblem None"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "AssignTaxpayerID",
						"Hash": "B0EF926DD6095D483BB947C189C0842E305826D995848CBD47440D2020DCAB5D",
						"Parameters": [
							"System.Collections.Generic.IDictionary recordData",
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail detail",
							"System.String taxTypeCode",
							"System.Boolean hasInvalidRows"
						],
						"Body": {
							"BodyText": "            int? taxpayerID = defermentStatementParser.GetTaxpayerID(recordData, taxTypeCode);\r\n\r\n            if (taxpayerID.HasValue)\r\n            {\r\n                detail.TaxpayerID = taxpayerID.Value;\r\n            }\r\n            else\r\n            {\r\n                detail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                detail.ErrorMessage = $\u0022TaxpayerID not found for TaxTypeCode \u0027{taxTypeCode}\u0027.\u0022;\r\n                hasInvalidRows = true;\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser GetTaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail DefermentStatementFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "FinalizeFileDetailStatus",
						"Hash": "6FDAD40CFF525A788C6B4EFB683611D5BDD6347265521CBE9005158C76302E4A",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail detail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction",
							"System.Boolean hasInvalidRows"
						],
						"Body": {
							"BodyText": "            if (detail.Validate())\r\n            {\r\n                bool shouldIgnore = SkipProcessingDetail(detail, transaction);\r\n                detail.DefermentStatementFileDetailStatus = shouldIgnore ? ImportFileDetailStatus.Ignored : ImportFileDetailStatus.Processing;\r\n            }\r\n            else\r\n            {\r\n                detail.DefermentStatementFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                hasInvalidRows = true;\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail DefermentStatementFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Processing",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "SkipProcessingDetail",
						"Hash": "2A891E04E36397E65DB1BD06A9C9AB0F6D86E20685B2E9DED5DCE8D225C07034",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail defermentStatementFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool shouldIgnore = false;\r\n\r\n            // Use GetDataRow to parse and retrieve the data dictionary for the row\r\n            IDictionary\u003Cstring, object\u003E data = defermentStatementParser.GetDataRow(defermentStatementFileDetail.Record);\r\n\r\n            // Ensure data is not null, as an invalid row could return null from GetDataRow\r\n            if (data != null)\r\n            {\r\n                // Extract monetary values from the dictionary\r\n                decimal dutyDue = data.ContainsKey(DefermentStatementParser.Keys.DutyDue) ? (decimal)data[DefermentStatementParser.Keys.DutyDue] : 0;\r\n                decimal vatDue = data.ContainsKey(DefermentStatementParser.Keys.VATDue) ? (decimal)data[DefermentStatementParser.Keys.VATDue] : 0;\r\n                decimal exciseDue = data.ContainsKey(DefermentStatementParser.Keys.ExciseDue) ? (decimal)data[DefermentStatementParser.Keys.ExciseDue] : 0;\r\n\r\n                // Determine if the row should be skipped based on monetary values\r\n                if (dutyDue == 0 \u0026\u0026 vatDue == 0 \u0026\u0026 exciseDue == 0)\r\n                {\r\n                    shouldIgnore = true;\r\n                }\r\n            }\r\n\r\n            return shouldIgnore;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.Keys",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.DefermentStatementParser"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser GetDataRow",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail Record",
								"DataTorque.IsleOfMan.BusinessObjects.Calculators.DefermentStatementParser Keys"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveHeaderValidationErrors",
						"Hash": "C250F3FE1D84C691C7CE8DCE3990B69D76759BB5F92081D4EF9846D04BA43403",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader header",
							"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus fileStatus",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            header.ImportFileStatus = fileStatus;\r\n            header.Notes = string.Join(\u0022; \u0022, header.ValidationErrorDictionary.Values);\r\n            SaveHeader(header, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.String",
						"Name": "ComputeFileChecksum",
						"Hash": "7874BCCFA749AC531A7F69E58C80F9C7FFDE491399B50100867223E8ABAE941C",
						"Parameters": [
							"System.String filePath"
						],
						"Body": {
							"BodyText": "            using (MD5 md5 = MD5.Create())\r\n            {\r\n                using (FileStream stream = File.OpenRead(filePath))\r\n                {\r\n                    byte[] hash = md5.ComputeHash(stream);\r\n                    return BitConverter.ToString(hash).Replace(\u0022-\u0022, \u0022\u0022).ToLowerInvariant();\r\n                }\r\n            }\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "DataTorque.IsleOfMan.BusinessObjects.Repositories.ValidationResultEnum",
						"Name": "CheckFileHeaderExistence",
						"Hash": "87F1C8B8B2244A378B07522BB02FBF55127BD3A716146E69F4CD25B63B6075BE",
						"Parameters": [
							"System.String checksum",
							"System.String headerPeriod",
							"System.Int32 statementNumber",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_DefermentStatementFileHeader_CheckExistence\u0022, transaction);\r\n            query.AddParameter(\u0022@Checksum\u0022, SqlDbType.NVarChar, 0, checksum);\r\n            query.AddParameter(\u0022@HeaderPeriod\u0022, SqlDbType.NVarChar, 0, headerPeriod);\r\n            query.AddParameter(\u0022@StatementNumber\u0022, SqlDbType.Int, 0, statementNumber);\r\n            query.ExecuteQuery();\r\n\r\n            if (query.DataTable.Rows.Count \u003E 0)\r\n            {\r\n                return (ValidationResultEnum)Convert.ToInt32(query.DataTable.Rows[0][\u0022ValidationResult\u0022]);\r\n            }\r\n\r\n            return ValidationResultEnum.None;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ValidationResultEnum"
							],
							"ReferencedStoredProcedures": [
								"spf_DefermentStatementFileHeader_CheckExistence"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.ValidationResultEnum None"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "",
						"Name": "ReadFileContents",
						"Hash": "A185D1D80C861672A2DB2B0F8005CC5CA765C4552CE9CAE782547ECD6F2D7019",
						"Parameters": [
							"System.String filePath"
						],
						"Body": {
							"BodyText": "            using (StreamReader reader = new StreamReader(filePath))\r\n            {\r\n                List\u003Cstring\u003E fileContents = new List\u003Cstring\u003E();\r\n                string line;\r\n                while ((line = reader.ReadLine()) != null)\r\n                {\r\n                    fileContents.Add(line);\r\n                }\r\n                return fileContents.ToArray();\r\n            }\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Nullable",
						"Name": "GetTaxTypeID",
						"Hash": "F936F71E935ED89F51F84C008D97856A3E5A5A13EDEB3956472B1B8557CBD48D",
						"Parameters": [
							"System.String taxTypeCode"
						],
						"Body": {
							"BodyText": "            IStandardLookupItem taxTypeItem = standardLookupRepository.FindItemByCode(\u0022TaxType\u0022, taxTypeCode);\r\n            return taxTypeItem?.ID;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Nullable",
						"Name": "GetTaxReturnTypeReturnID",
						"Hash": "9B048E32501157B478ED93F8192B6472595126C5D4BF850A4EFC2DCD124C4A72",
						"Body": {
							"BodyText": "            IStandardLookupItem taxTypeItem = standardLookupRepository.FindItemByCode(\u0022TaxReturnType\u0022, \u0022Return\u0022);\r\n            return taxTypeItem?.ID;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "DetailData",
				"BaseType": "System.Object",
				"Properties": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail Detail",
					"System.Collections.Generic.IDictionary Record",
					"System.Nullable TaxpayerID",
					"System.String TaxTypeCode",
					"System.Nullable TaxTypeID",
					"System.Decimal DutyDue",
					"System.Decimal VATDue",
					"System.Decimal ExciseDue",
					"System.Decimal TotalDue"
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "DetailGroupKey",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"System.IEquatable"
				],
				"Properties": [
					"System.Int32 TaxpayerID",
					"System.String TaxTypeCode"
				],
				"Methods": [
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "Equals",
						"Hash": "C031879928BDF41C88279DD91BA26A01DEA93F75A162EE015808065075320E24",
						"Parameters": [
							"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailGroupKey other"
						],
						"Body": {
							"BodyText": "                if (other == null)\r\n                    return false;\r\n\r\n                return this.TaxpayerID == other.TaxpayerID \u0026\u0026 this.TaxTypeCode == other.TaxTypeCode;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailGroupKey"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailGroupKey TaxpayerID",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailGroupKey TaxTypeCode"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "Equals",
						"Hash": "5CD59F660D1A2A68C6BCD77DED7A12667072B2FE35EA1BF28BDBAD29AC851358",
						"Parameters": [
							"System.Object obj"
						],
						"Body": {
							"BodyText": "                return Equals(obj as DetailGroupKey);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.DetailGroupKey"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "System.Int32",
						"Name": "GetHashCode",
						"Hash": "45690DD16F8DC9F9A42603896A38D4724DE0C131813A3E6F3FCF0B9E427ABE70",
						"Body": {
							"BodyText": "                int hashTaxpayerID = TaxpayerID.GetHashCode();\r\n                int hashTaxTypeCode = TaxTypeCode != null ? TaxTypeCode.GetHashCode() : 0;\r\n\r\n                return hashTaxpayerID ^ hashTaxTypeCode;\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "QuestionCodes",
				"BaseType": "System.Object"
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "CUSDV",
				"BaseType": "System.Object"
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "CUSDEX",
				"BaseType": "System.Object"
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "ReturnDetail",
				"BaseType": "System.Object",
				"Properties": [
					"System.Int32 RowIndex",
					"System.Int32 TaxTypeId",
					"System.Int32 YearId",
					"System.Int32 PeriodId",
					"System.Int32 TaxpayerId",
					"DataTorque.IsleOfMan.BusinessObjects.Repositories.ReturnProblem Problem"
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "TaxTypeCodes",
				"BaseType": "System.Object"
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "DisbursedChequesRepository",
				"BaseType": "Unlinked.BaseRepository",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Repositories.IDisbursedChequesRepository"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
						"Name": "CreateDisbursedChequesFileHeader",
						"Hash": "6A12293805F83FFF6683375D84F43C2BF1C8BE3E3E407FEC6BD181D6F40B3591",
						"Body": {
							"BodyText": "            DisbursedChequesFileHeader disbursedChequesFileHeader = new DisbursedChequesFileHeader(queryBuilder, disbursedChequesFileHeaderValidator);\r\n            disbursedChequesFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n            disbursedChequesFileHeader.UpdateInitialValues();\r\n            return disbursedChequesFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.DisbursedChequesFileHeader",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.DisbursedChequesFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.BusinessObjects.DisbursedChequesFileHeader UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail",
						"Name": "CreateDisbursedChequesFileDetail",
						"Hash": "ADE6ED71ECFDE5303669B6433363007F230E1FA0A78E9CA7D1C7A150F10BD7AD",
						"Body": {
							"BodyText": "            DisbursedChequesFileDetail disbursedChequesFileDetail = new DisbursedChequesFileDetail(queryBuilder, disbursedChequesFileDetailValidator);\r\n            disbursedChequesFileDetail.UpdateInitialValues();\r\n            return disbursedChequesFileDetail;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.DisbursedChequesFileDetail",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.DisbursedChequesFileDetail UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
						"Name": "ReadDisbursedChequesFileData",
						"Hash": "EADC6E0BD9A00EB2B96F706C9D55F8259348EAD5D3C6DC3952DD47F53B8BEFB9",
						"Parameters": [
							"System.String filePath",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IDisbursedChequesFileHeader disbursedChequesFileHeader = CreateDisbursedChequesFileHeader();\r\n\r\n            disbursedChequesFileHeader.FileName = Path.GetFileName(filePath);\r\n            disbursedChequesFileHeader.FileProcessedDate = DateTime.Today;\r\n\r\n            //validate the file while it is new to check the file extension\r\n            if (!disbursedChequesFileHeader.Validate())\r\n            {\r\n                SaveHeaderValidationErrors(disbursedChequesFileHeader, ImportFileStatus.Failed, transaction);\r\n            }\r\n            else if (!ValidateDisbursedChequesFileChecksum(disbursedChequesFileHeader, filePath, transaction))\r\n            {\r\n                SaveHeaderValidationErrors(disbursedChequesFileHeader, ImportFileStatus.Failed, transaction);\r\n            }\r\n            //only map if the file extension is validated otherwise reading/mapping is pointless  \r\n            else if (SaveDisbursedChequesFileHeader(disbursedChequesFileHeader, transaction))\r\n            {\r\n                disbursedChequesFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n\r\n                disbursedChequesFileHeader.FileContents = ReadFileContents(filePath);\r\n\r\n                SaveDisbursedChequesFileHeader(disbursedChequesFileHeader, transaction);\r\n\r\n            }\r\n\r\n            return disbursedChequesFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader FileName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader FileProcessedDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader FileContents"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "ImportDisbursedChequesFileDetails",
						"Hash": "9AE1284CDF0032EB86C186C4D71974926D9E7BE43BD955BC92204A7556B4B077",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader disbursedChequesFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success;\r\n            try\r\n            {\r\n                if (disbursedChequesFileHeader.FileContents == null || disbursedChequesFileHeader.FileContents.Length \u003C 2)\r\n                {\r\n                    success = false;\r\n                    disbursedChequesFileHeader.Notes = \u0022Importing the disbursed cheques file content failed because of the following error: No data in the file\u0022;\r\n                    disbursedChequesFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveDisbursedChequesFileHeader(disbursedChequesFileHeader, transaction);\r\n                }\r\n                else if (IsInvalidColumnCount(disbursedChequesFileHeader.FileContents[0], 11))\r\n                {\r\n                    success = false;\r\n                    disbursedChequesFileHeader.Notes = \u0022Importing the  disbursed cheques file content failed because of the following error: Invalid column count\u0022;\r\n                    disbursedChequesFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveDisbursedChequesFileHeader(disbursedChequesFileHeader, transaction);\r\n                }\r\n                else\r\n                {\r\n                    bool hasInvalidRows = MapDisbursedChequesFileDetails(disbursedChequesFileHeader, transaction);\r\n                    if (hasInvalidRows)\r\n                    {\r\n                        success = false;\r\n                        List\u003CIDisbursedChequesFileDetail\u003E invalidRows = disbursedChequesFileHeader.DisbursedChequesFileDetails\r\n                                                                                                              .Where(d =\u003E d.DisbursedChequesFileDetailStatus == ImportFileDetailStatus.Invalid)\r\n                                                                                                              .ToList();\r\n                        StringBuilder rowValidationErrors = new StringBuilder();\r\n                        foreach (IDisbursedChequesFileDetail row in invalidRows)\r\n                        {\r\n                            rowValidationErrors.Append(\u0022 Row \u0022 \u002B (disbursedChequesFileHeader.DisbursedChequesFileDetails.IndexOf(row) \u002B 2) \u002B \u0022: \u0022 \u002B row.ErrorMessage);\r\n                        }\r\n\r\n                        disbursedChequesFileHeader.Notes = $\u0022Importing the disbursed cheques file content failed because of the following errors:{rowValidationErrors}\u0022;\r\n                        disbursedChequesFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                        SaveDisbursedChequesFileHeader(disbursedChequesFileHeader, transaction);\r\n                    }\r\n                    else\r\n                    {\r\n                        SaveDisbursedChequesFileDetails(disbursedChequesFileHeader.DisbursedChequesFileDetails, transaction);\r\n\r\n                        ProcessDisbursedChequesFileDetails(disbursedChequesFileHeader, transaction);\r\n\r\n                        success = CompleteDisbursedChequesFileProcessing(disbursedChequesFileHeader, transaction);\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                success = false;\r\n                disbursedChequesFileHeader.Notes = $\u0022Importing the disbursed cheques file content failed because of the following error: {ex.Message}\u0022;\r\n                disbursedChequesFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n            }\r\n\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader DisbursedChequesFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail DisbursedChequesFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveDisbursedChequesFileHeader",
						"Hash": "6558E6CDF38A46F1D2DC57168308CF658C46A6AFDC837F8DC55F2CB2140607C8",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader disbursedChequesFileHeader"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveDisbursedChequesFileHeader, disbursedChequesFileHeader);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveDisbursedChequesFileHeader",
						"Hash": "ECFEFEF30B75BFA96C9E7D9FFFBCE24F613FCB2EB4BEC594759C7BE96F992CBF",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader disbursedChequesFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            if (transaction == null)\r\n            {\r\n                result = SaveDisbursedChequesFileHeader(disbursedChequesFileHeader);\r\n            }\r\n            else\r\n            {\r\n                if (disbursedChequesFileHeader.IsDirty() || disbursedChequesFileHeader.IsSavedWhenClean)\r\n                {\r\n                    disbursedChequesFileHeader.DistributedSQLTransaction = transaction;\r\n                    if (disbursedChequesFileHeader.Validate())\r\n                    {\r\n                        result = disbursedChequesFileHeader.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader SaveData"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveDisbursedChequesFileDetail",
						"Hash": "4366E621A5E3D38501B3252D9704417636E6DB3FC8842F99B86629F97EAD2892",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail disbursedChequesFileDetail"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveDisbursedChequesFileDetail, disbursedChequesFileDetail);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveDisbursedChequesFileDetail",
						"Hash": "A5F1211700EBDD17621F9926B9E0895BF6FBC11F0838A08F0B2AD55C5592437E",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail disbursedChequesFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n\r\n            if (transaction == null)\r\n            {\r\n                result = SaveDisbursedChequesFileDetail(disbursedChequesFileDetail);\r\n            }\r\n            else\r\n            {\r\n                if (disbursedChequesFileDetail.IsDirty() || disbursedChequesFileDetail.IsSavedWhenClean)\r\n                {\r\n                    disbursedChequesFileDetail.DistributedSQLTransaction = transaction;\r\n                    if (disbursedChequesFileDetail.Validate())\r\n                    {\r\n                        result = disbursedChequesFileDetail.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail SaveData"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveDisbursedChequesFileDetails",
						"Hash": "DB27997539325089493593EDCCE501F6C5516C8D00BE0CC4B39A128E07DCEB8D",
						"Parameters": [
							"System.Collections.Generic.IList disbursedChequesFileDetails",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            foreach (IDisbursedChequesFileDetail recordFileDetail in disbursedChequesFileDetails)\r\n            {\r\n                result = SaveDisbursedChequesFileDetail(recordFileDetail, transaction);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "",
						"Name": "ReadFileContents",
						"Hash": "A185D1D80C861672A2DB2B0F8005CC5CA765C4552CE9CAE782547ECD6F2D7019",
						"Parameters": [
							"System.String filePath"
						],
						"Body": {
							"BodyText": "            //Read in the file contents\r\n            using (StreamReader reader = new StreamReader(filePath))\r\n            {\r\n                List\u003Cstring\u003E fileContents = new List\u003Cstring\u003E();\r\n                string line;\r\n\r\n                while ((line = reader.ReadLine()) != null)\r\n                {\r\n                    fileContents.Add(line);\r\n                }\r\n\r\n                return fileContents.ToArray();\r\n            }\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveHeaderValidationErrors",
						"Hash": "0420642F7AFF4E2ACEAA0179A89A88AB4785799BA1A3DC4BF8A13C70131DACD1",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader disbursedChequesFileHeader",
							"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus fileStatus",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            disbursedChequesFileHeader.ImportFileStatus = fileStatus;\r\n\r\n            disbursedChequesFileHeader.Notes = string.Join(\u0022; \u0022, disbursedChequesFileHeader.ValidationErrorDictionary.Values);\r\n\r\n            SaveDisbursedChequesFileHeader(disbursedChequesFileHeader, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateDisbursedChequesFileChecksum",
						"Hash": "E188E8449054E860B2D7CBE9E7679F8771C0931F54D5357FAAC108DD9AF948AF",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader disbursedChequesFileHeader",
							"System.String filePath",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool isValid = false;\r\n\r\n            using (MD5 md5 = MD5.Create())\r\n            {\r\n                using (FileStream stream = File.OpenRead(filePath))\r\n                {\r\n                    byte[] hash = md5.ComputeHash(stream);\r\n                    disbursedChequesFileHeader.Checksum = BitConverter.ToString(hash).Replace(\u0022-\u0022, \u0022\u0022).ToLowerInvariant();\r\n                }\r\n            }\r\n\r\n            if (IsExistingDisbursedChequesFileHeader(disbursedChequesFileHeader.Checksum, transaction))\r\n            {\r\n                disbursedChequesFileHeader.ValidationErrorDictionary.Add(\u0022Checksum\u0022, \u0022File checksum already exists in the database.\u0022);\r\n            }\r\n            else\r\n            {\r\n                isValid = true;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader Checksum",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsExistingDisbursedChequesFileHeader",
						"Hash": "35D3A780E242F7F8C71AE999331C699791B7E5750959534E59440095CF84BD87",
						"Parameters": [
							"System.String checksum",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_DisbursedChequesFileHeader_FindByChecksum\u0022, transaction);\r\n            query.AddParameter(\u0022@Checksum\u0022, SqlDbType.NVarChar, 0, checksum);\r\n            query.ExecuteQuery();\r\n\r\n            return query.DataTable.Rows.Count \u003E 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_DisbursedChequesFileHeader_FindByChecksum"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsInvalidColumnCount",
						"Hash": "9ED839CF5B41B5D24671534303AC75757763A0448EC7EFB0DB7A4C882D014BFC",
						"Parameters": [
							"System.String stringToCheck",
							"System.Int32 expectedColumnCount"
						],
						"Body": {
							"BodyText": "            string[] columnData = stringToCheck.Split(\u0027,\u0027);\r\n            return columnData.Length != expectedColumnCount;\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveDetailValidationErrors",
						"Hash": "FA870B4489F713AAD278981997FF7586AF87D9BC51C5C75A339E15B95524165D",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail disbursedChequesFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            disbursedChequesFileDetail.DisbursedChequesFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n\r\n            disbursedChequesFileDetail.ErrorMessage = string.Join(\u0022; \u0022, disbursedChequesFileDetail.ValidationErrorDictionary.Values);\r\n\r\n            SaveDisbursedChequesFileDetail(disbursedChequesFileDetail, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail DisbursedChequesFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "MapDisbursedChequesFileDetails",
						"Hash": "CA9C7E5846054FBDFABA7FE6DAC459E60A56484DC44231B061FBC76AF9B22F0E",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader disbursedChequesFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool hasInvalidRows = false;\r\n            foreach (string record in disbursedChequesFileHeader.FileContents.Skip(1).Take(disbursedChequesFileHeader.FileContents.Length - 1))\r\n            {\r\n                IDisbursedChequesFileDetail disbursedChequesFileDetail = CreateDisbursedChequesFileDetail();\r\n                disbursedChequesFileDetail.DisbursedChequesFileHeaderID = disbursedChequesFileHeader.ID;\r\n                disbursedChequesFileDetail.Record = record;\r\n                disbursedChequesFileDetail.DisbursedChequesFileDetailStatus = ImportFileDetailStatus.ReadingFileContent;\r\n                disbursedChequesFileHeader.DisbursedChequesFileDetails.Add(disbursedChequesFileDetail);\r\n\r\n                disbursedChequesFileDetailMapper.MapFromFile(disbursedChequesFileDetail, disbursedChequesFileDetail.Record);\r\n                if (disbursedChequesFileDetail.Validate())\r\n                {\r\n                    bool shouldIgnore = SkipProccessingDisbursedChequesFileDetail(disbursedChequesFileDetail, transaction);\r\n                    disbursedChequesFileDetail.DisbursedChequesFileDetailStatus = shouldIgnore ? ImportFileDetailStatus.Ignored : ImportFileDetailStatus.Processing;\r\n                }\r\n                else\r\n                {\r\n                    disbursedChequesFileDetail.DisbursedChequesFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                    disbursedChequesFileDetail.ErrorMessage = string.Join(\u0022; \u0022, disbursedChequesFileDetail.ValidationErrorDictionary.Values);\r\n                    hasInvalidRows = true;\r\n                }\r\n            }\r\n            return hasInvalidRows;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Mappers.IDisbursedChequesFileDetailMapper",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail DisbursedChequesFileHeaderID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail DisbursedChequesFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus ReadingFileContent",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader DisbursedChequesFileDetails",
								"DataTorque.IsleOfMan.Interfaces.Mappers.IDisbursedChequesFileDetailMapper MapFromFile",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Processing",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "SkipProccessingDisbursedChequesFileDetail",
						"Hash": "85297C48BE7C81EDC782AFDC6D9A2FE34772300DC7A9758C811B82C4228FDD4F",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail disbursedChequesFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool shouldIgnore;\r\n            if (disbursedChequesFileDetail.PaymentStatus.Equals(\u0022Sent\u0022) \u0026\u0026 !disbursedChequesFileDetail.Credit.HasValue)\r\n            {\r\n                string[] refundDetails = disbursedChequesFileDetail.Description.Split(\u0027_\u0027);\r\n                \r\n                if (refundDetails.Length == 2 \u0026\u0026 int.TryParse(refundDetails[0],out int taxpayerID) \u0026\u0026 int.TryParse(refundDetails[1], out int caseID))\r\n                {\r\n                    disbursedChequesFileDetail.TaxpayerID = taxpayerID;\r\n                    disbursedChequesFileDetail.CaseID = caseID;\r\n                    disbursedChequesFileDetail.RefundIDs = GetMatchingRefundIDs(taxpayerID, caseID, transaction);\r\n                    shouldIgnore = string.IsNullOrEmpty(disbursedChequesFileDetail.RefundIDs);\r\n                }\r\n                else\r\n                {\r\n                    shouldIgnore = true;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                shouldIgnore = true;\r\n            }\r\n            return shouldIgnore;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail PaymentStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Credit",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Description",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail CaseID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail RefundIDs"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ProcessDisbursedChequesFileDetails",
						"Hash": "5162D3AABE1483CE7D6E4AEDACDEF23C050D47A0405B9ECB475255D5A1DBC5C4",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader disbursedChequesFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            foreach (IDisbursedChequesFileDetail disbursedChequesFileDetail in disbursedChequesFileHeader.DisbursedChequesFileDetails)\r\n            {\r\n                //only process if there were no errors from mapping\r\n                if (disbursedChequesFileDetail.DisbursedChequesFileDetailStatus != ImportFileDetailStatus.Ignored)\r\n                {\r\n                    if (disbursedChequesFileDetail.Validate())\r\n                    {\r\n                        if (SaveDisbursedChequesFileDetail(disbursedChequesFileDetail, transaction))\r\n                        {\r\n                            if (UpdateRefundRecord(disbursedChequesFileDetail, transaction))\r\n                            {\r\n                                disbursedChequesFileHeader.TotalProcessedDisbursedChequesCount \u002B= 1;\r\n\r\n                                disbursedChequesFileDetail.DisbursedChequesFileDetailStatus = string.IsNullOrEmpty(disbursedChequesFileDetail.ErrorMessage) ? ImportFileDetailStatus.Imported : ImportFileDetailStatus.Failed;\r\n                            }\r\n                            else\r\n                            {\r\n                                disbursedChequesFileDetail.DisbursedChequesFileDetailStatus = ImportFileDetailStatus.Failed;\r\n                            }\r\n\r\n                            SaveDisbursedChequesFileDetail(disbursedChequesFileDetail, transaction);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        SaveDetailValidationErrors(disbursedChequesFileDetail, transaction);\r\n                    }\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader DisbursedChequesFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail DisbursedChequesFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader TotalProcessedDisbursedChequesCount",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Imported",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "UpdateRefundRecord",
						"Hash": "1D1048482DE43AC85E27C08A70F3061C6C4F51DD890A3F30A4EE89FC747D191B",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail disbursedChequesFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success = true;\r\n            int chequeRefundOptionId = 0;\r\n            IStandardLookupItem refundOption = standardLookupRepository.FindItemByCode(\u0022RefundOption\u0022, \u0022Cheque\u0022);\r\n            if (refundOption != null)\r\n            {\r\n                chequeRefundOptionId = refundOption.ID;\r\n            }\r\n\r\n            try\r\n            {\r\n                string[] refundIDs = disbursedChequesFileDetail.RefundIDs.Split(\u0027,\u0027);\r\n                foreach (string refund in refundIDs)\r\n                {\r\n                    int refundID = int.Parse(refund);\r\n                    IRefund refundRecord = refundRepository.FindRefund(refundID, transaction);\r\n                    if (refundRecord != null \u0026\u0026 refundRecord.RefundOptionID == chequeRefundOptionId \u0026\u0026 string.IsNullOrEmpty(refundRecord.CheqDirectNo) \u0026\u0026 refundRecord.AmountRefunded \u003E 0)\r\n                    {\r\n                        refundRecord.CheqDirectNo = disbursedChequesFileDetail.PaymentReference;\r\n                        success = refundRepository.SaveRefund(refundRecord, transaction);\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                disbursedChequesFileDetail.ErrorMessage = $\u0022Updating the refund record is failed because of the following error: {ex.Message}\u0022;\r\n                success = false;\r\n            }\r\n\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRefund",
								"DataTorque.Iho.Interfaces.Repositories.IRefundRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail RefundIDs",
								"DataTorque.Iho.Interfaces.Repositories.IRefundRepository FindRefund",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRefund RefundOptionID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRefund CheqDirectNo",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRefund AmountRefunded",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail PaymentReference",
								"DataTorque.Iho.Interfaces.Repositories.IRefundRepository SaveRefund",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "CompleteDisbursedChequesFileProcessing",
						"Hash": "A65878FA649098ECC2B3EE923AAB878B6CC91843BC1C1F79B893B932A5A6467E",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader disbursedChequesFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            if (disbursedChequesFileHeader.Validate())\r\n            {\r\n                disbursedChequesFileHeader.ImportFileStatus = disbursedChequesFileHeader.DisbursedChequesFileDetails.Any(d =\u003E d.DisbursedChequesFileDetailStatus == ImportFileDetailStatus.Failed ||\r\n                                                                                                                              d.DisbursedChequesFileDetailStatus == ImportFileDetailStatus.Ignored) ? ImportFileStatus.PartialImport : ImportFileStatus.Complete;\r\n                SaveDisbursedChequesFileHeader(disbursedChequesFileHeader, transaction);\r\n            }\r\n            else\r\n            {\r\n                SaveHeaderValidationErrors(disbursedChequesFileHeader, ImportFileStatus.PartialImport, transaction);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader DisbursedChequesFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail DisbursedChequesFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Complete"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.String",
						"Name": "GetMatchingRefundIDs",
						"Hash": "D11DA2907A4DE38AC048B608C7695D7307D30452C8C6E5DF2D8DEB48CC27B48C",
						"Parameters": [
							"System.Int32 taxpayerID",
							"System.Int32 caseID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            List\u003Cstring\u003E refundIDList = new List\u003Cstring\u003E();\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_GetRefundIDsByTaxpayerIDAndCaseID\u0022, transaction);\r\n            query.AddParameter(\u0022@TaxpayerID\u0022, SqlDbType.Int, 0, taxpayerID);\r\n            query.AddParameter(\u0022@CaseID\u0022, SqlDbType.Int, 0, caseID);\r\n            query.ExecuteQuery();\r\n            foreach (DataRow record in query.DataTable.Rows)\r\n            {\r\n                refundIDList.Add(ParsingHelper.ParseString(record[\u0022RefundID\u0022]));\r\n            }\r\n\r\n            return string.Join(\u0022,\u0022,refundIDList);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_GetRefundIDsByTaxpayerIDAndCaseID"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "FlatRateRepository",
				"BaseType": "Unlinked.BaseRepository",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRateRepository"
				],
				"Methods": [
					{
						"Modifiers": "public",
						"ReturnType": "DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod",
						"Name": "CreateFlatRatePeriod",
						"Hash": "17296CE9EA0AB772E964A1E1089EFE64505E519DB1BCDAF7F18C664A10DC56B0",
						"Body": {
							"BodyText": "            FlatRatePeriod period = new FlatRatePeriod(queryBuilder);\r\n            return period;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.FlatRatePeriod",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod",
						"Name": "CreateFlatRatePeriod",
						"Hash": "832A016E06A6502582F4B8F2C5ACCFE17FEFCFAC6042645C6E2E0ED7E40FAA06",
						"Parameters": [
							"System.Data.DataRow dataRow"
						],
						"Body": {
							"BodyText": "            IFlatRatePeriod flatRatePeriod = new FlatRatePeriod(queryBuilder);\r\n            businessObjectMapper.MapFromDataRow(flatRatePeriod, dataRow);\r\n            flatRatePeriod.IsSavedWhenClean = true;\r\n            return flatRatePeriod;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBusinessObjectMapper"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBusinessObjectMapper MapFromDataRow",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod IsSavedWhenClean"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Collections.Generic.IList",
						"Name": "GetFlatRatesByTaxpayer",
						"Hash": "4D2EF9B2B7B6805AF6D1113431455FFD880F01B639F43D6992F8AED663EC73A7",
						"Parameters": [
							"System.Int32 TaxpayerID"
						],
						"Body": {
							"BodyText": "            List\u003CIFlatRatePeriod\u003E FlatRatePeriods = new List\u003CIFlatRatePeriod\u003E();\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_FlatRatePeriodsByTaxpayerID\u0022);\r\n            query.AddParameter(\u0022@TaxpayerID\u0022, SqlDbType.Int, 0, TaxpayerID);\r\n            query.ExecuteQuery();\r\n\r\n            foreach (DataRow dataRow in query.DataTable.Rows)\r\n            {\r\n                IFlatRatePeriod flatRatePeriod = CreateFlatRatePeriod(dataRow);\r\n                FlatRatePeriods.Add(flatRatePeriod);\r\n            }\r\n\r\n            return FlatRatePeriods;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory"
							],
							"ReferencedStoredProcedures": [
								"spf_FlatRatePeriodsByTaxpayerID"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "InaccuracyPenaltyRepository",
				"BaseType": "Unlinked.BaseRepository",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Repositories.IInaccuracyPenaltyRepository"
				],
				"Methods": [
					{
						"Modifiers": "public",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty",
						"Name": "CreateInaccuracyPenalty",
						"Hash": "2EFCC8BCB19DFEE64CC273F8ABADFC179377588064EBB733AAEBA57A1CA5E2A8",
						"Parameters": [
							"System.Nullable taxpayerID",
							"System.Int32 taxTypeID",
							"System.Int32 caseID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IInaccuracyPenalty inaccuracyPenalty = new InaccuracyPenalty(taxTypeRepository, taxPeriodRepository, standardLookupRepository, systemConstantRepository);\r\n\r\n            if (taxpayerID != null)\r\n            {\r\n                inaccuracyPenalty.TaxpayerID = taxpayerID.GetValueOrDefault();\r\n            }\r\n\r\n            inaccuracyPenalty.TaxTypeID = taxTypeID;\r\n            inaccuracyPenalty.CaseID = caseID;\r\n\r\n            //grab the number of days to add to today for the penalty\u0027s effective date\r\n            int daysInFuture = systemConstantRepository.GetInteger(\u0022InaccuracyPenaltyDaysInFuture\u0022, 30);\r\n            inaccuracyPenalty.EffectiveDate = DateTime.Now.AddDays(daysInFuture).Date;\r\n            inaccuracyPenalty.DistributedSQLTransaction = transaction;\r\n\r\n            return inaccuracyPenalty;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository",
								"DataTorque.Iho.Interfaces.Repositories.ITaxPeriodRepository",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty TaxTypeID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty CaseID",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty EffectiveDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty DistributedSQLTransaction"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "PopulateInaccuracyPenalty",
						"Hash": "2367FF625121C6F75FE18B6CAC9B33930159D6FCE552F415F0048D126B7E540A",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty inaccuracyPenalty"
						],
						"Body": {
							"BodyText": "            inaccuracyPenalty.Amount = inaccuracyPenalty.TotalPenalty;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty Amount",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty TotalPenalty"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "CleanAndSaveDraft",
						"Hash": "7BB4AE9A8BE9C9B17713170266B686B95C0B0D8131AC2AA3D5563F7BF6C46C40",
						"Parameters": [
							"System.Int32 caseId",
							"System.Collections.Generic.IEnumerable originalPenalties",
							"System.Collections.Generic.IEnumerable currentPenalties"
						],
						"Body": {
							"BodyText": "            DeleteDraftByCaseId(caseId);\r\n\r\n            foreach (IInaccuracyPenalty penalty in originalPenalties)\r\n            {\r\n                penalty.IsOriginalData = true;\r\n                SaveDraft(caseId, penalty);\r\n            }\r\n\r\n            foreach (IInaccuracyPenalty penalty in currentPenalties)\r\n            {\r\n                penalty.IsOriginalData = false;\r\n                SaveDraft(caseId, penalty);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty IsOriginalData"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "DeleteDraftByCaseId",
						"Hash": "8D923C146BF05528083A7939A1EDD3DA5E0B49968C5EDBE480A29D06D0320B98",
						"Parameters": [
							"System.Int32 caseId"
						],
						"Body": {
							"BodyText": "            INonQuery query;\r\n            query = queryFactory.CreateNonQuery(\u0022spf_DeleteCaseTaskDraftByCaseId\u0022);\r\n            query.AddParameter(\u0022@CaseID\u0022, SqlDbType.Int, 0, caseId);\r\n            query.ExecuteQuery();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory"
							],
							"ReferencedStoredProcedures": [
								"spf_DeleteCaseTaskDraftByCaseId"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateNonQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveDraft",
						"Hash": "50B3DA3A634360807ED5F48C33743CED44CA2CD3E8463211EE719143A2E2722D",
						"Parameters": [
							"System.Int32 caseId",
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty penalty"
						],
						"Body": {
							"BodyText": "            int caseTaskDraftId = 0;\r\n            INonQuery query = queryFactory.CreateNonQuery(\u0022spg_CaseTaskDraft_insert\u0022);\r\n            query.AddParameter(\u0022@CaseTaskDraftID\u0022, SqlDbType.Int, 0, caseTaskDraftId, ParameterDirection.InputOutput);\r\n            query.AddParameter(\u0022@UserEID\u0022, SqlDbType.Int, 0, currentUserRepository.GetCurrentUserID());\r\n            query.AddParameter(\u0022@CaseID\u0022, SqlDbType.Int, 0, caseId);\r\n            query.AddParameter(\u0022@DraftName\u0022, SqlDbType.NVarChar, 0, DraftName);\r\n            query.AddParameter(\u0022@DraftData\u0022, SqlDbType.VarBinary, 0, SerializationHelper.Serialize(penalty));\r\n            query.AddParameter(\u0022@UserLUID\u0022, SqlDbType.Int, 0, currentUserRepository.GetCurrentUserID());\r\n            query.ExecuteQuery();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.Repositories.ICurrentUserRepository",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateNonQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.Repositories.ICurrentUserRepository GetCurrentUserID",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Double",
						"Name": "GetPenaltyPercentageRate",
						"Hash": "0DF42F2C0057B28E106A734563CD15E78FF8B3DBCFD0DA6723C1366563B9023C",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty inaccuracyPenalty"
						],
						"Body": {
							"BodyText": "            IStandardLookupItem customerBehaviourID = standardLookupRepository.FindItemByID(\u0022PenaltyCustomerBehaviour\u0022, inaccuracyPenalty.CustomerBehaviourID);\r\n            IStandardLookupItem disclosureID = standardLookupRepository.FindItemByID(\u0022PenaltyDisclosure\u0022, inaccuracyPenalty.DisclosureID);\r\n\r\n            double[] bounds = GetBoundsForAudit(customerBehaviourID, disclosureID);\r\n            decimal assistance = inaccuracyPenalty.Assistance / 100;\r\n\r\n            //Highest % from \u003CPenalty Range\u003E - [(Highest % from\u003CPenalty Range\u003E \u2013 Lowest % from \u003C Penalty Range \u003E) x Assistance %]\r\n            return bounds[1] - (bounds[1] - bounds[0]) * (double)assistance;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty CustomerBehaviourID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty DisclosureID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty Assistance"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.String",
						"Name": "GetPenaltyPercentageString",
						"Hash": "8AD61674A9CFC5917F148FB40DDD3503A99861ADDFA08D76A68AB973A9C0FE37",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty inaccuracyPenalty"
						],
						"Body": {
							"BodyText": "            IStandardLookupItem customerBehaviour = standardLookupRepository.FindItemByID(\u0022PenaltyCustomerBehaviour\u0022, inaccuracyPenalty.CustomerBehaviourID);\r\n            IStandardLookupItem disclosure = standardLookupRepository.FindItemByID(\u0022PenaltyDisclosure\u0022, inaccuracyPenalty.DisclosureID);\r\n            double[] bounds = GetBoundsForAudit(customerBehaviour, disclosure);\r\n\r\n            return string.Format(\u0022{0:P2}-{1:P2} - {2} : {3}\u0022, bounds[0], bounds[1], customerBehaviour.Description, disclosure.Description);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty CustomerBehaviourID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty DisclosureID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem Description"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "",
						"Name": "GetBoundsForAudit",
						"Hash": "660188EA7F54C1091BED37F3B167ACD41298E8013DB6CF87BEB2A685F64070E3",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem customerBehaviourID",
							"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem disclosureID"
						],
						"Body": {
							"BodyText": "            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_InaccuracyPenalty_GetBounds\u0022);\r\n            query.AddParameter(\u0022BehaviourID\u0022, SqlDbType.Int, 10, customerBehaviourID.ID);\r\n            query.AddParameter(\u0022DisclosureID\u0022, SqlDbType.Int, 10, disclosureID.ID);\r\n            query.AddParameter(\u0022MaxValue\u0022, SqlDbType.Money, 10, null, ParameterDirection.Output);\r\n            query.AddParameter(\u0022MinValue\u0022, SqlDbType.Money, 10, null, ParameterDirection.Output);\r\n            query.ExecuteQuery();\r\n\r\n            double[] results = { ParsingHelper.ParseDouble(query.Parameters[4].Value, 0), ParsingHelper.ParseDouble(query.Parameters[3].Value, 0) };\r\n\r\n            return results;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IQueryParameter"
							],
							"ReferencedStoredProcedures": [
								"spf_InaccuracyPenalty_GetBounds"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem ID",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery Parameters"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Decimal",
						"Name": "TotalPenaltyAmount",
						"Hash": "520087DA20C8CCEC6B7BA2DD8E68032B27E639158A49BB6A4BA16DFA092B0A86",
						"Parameters": [
							"System.Collections.Generic.IEnumerable penalties"
						],
						"Body": {
							"BodyText": "            return penalties.Where(x =\u003E !x.IsSuspended).Sum(x =\u003E x.TotalPenalty) \u003C systemConstantRepository.GetInteger(\u0022InaccuracyPenaltyDiminimus\u0022, 150) ? 0 : penalties.Where(x =\u003E !x.IsSuspended).Sum(x =\u003E x.TotalPenalty);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty IsSuspended",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty TotalPenalty",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Decimal",
						"Name": "TotalSuspendedAmount",
						"Hash": "6A64D96CA861C1594C1A8E9E97FCF3ABE69D14121C695EFEC0CC93B87835B884",
						"Parameters": [
							"System.Collections.Generic.IEnumerable penalties"
						],
						"Body": {
							"BodyText": "            return penalties.Where(x =\u003E x.IsSuspended).Sum(x =\u003E x.TotalPenalty);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty IsSuspended",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty TotalPenalty"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.ValueTuple",
						"Name": "GetTotalAssessed",
						"Hash": "ED2B103D1125846EC21A3042EC33A92B62E37EBFC06F5D41000560C801E00EC5",
						"Parameters": [
							"System.Int32 caseId"
						],
						"Body": {
							"BodyText": "            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_GetInaccuracyPenaltyTotalAssessedByCaseId\u0022);\r\n            query.AddParameter(\u0022@CaseID\u0022, SqlDbType.Int, 0, caseId);\r\n            query.ExecuteQuery();\r\n            decimal totalPenaltyApplied = (decimal)query.DataTable.Rows[0][\u0022TotalPenaltyApplied\u0022];\r\n            decimal totalPenaltySuspended = (decimal)query.DataTable.Rows[0][\u0022TotalPenaltySuspended\u0022];\r\n            return (totalPenaltyApplied, totalPenaltySuspended);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory"
							],
							"ReferencedStoredProcedures": [
								"spf_GetInaccuracyPenaltyTotalAssessedByCaseId"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Int32",
						"Name": "GetAccountChangeTaskIdForPenalty",
						"Hash": "D6B04FEE041A93E59DDC906999C9F005B60C7F418EA2E2C245400F8A4D3DA478",
						"Parameters": [
							"System.Int32 caseId"
						],
						"Body": {
							"BodyText": "            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_GetAccountChangeCaseTaskIdForPenalty\u0022);\r\n            query.AddParameter(\u0022@CaseID\u0022, SqlDbType.Int, 0, caseId);\r\n            query.ExecuteQuery();\r\n            int caseTaskId = (int)query.DataTable.Rows[0][\u0022CaseTaskID\u0022];\r\n            return caseTaskId;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory"
							],
							"ReferencedStoredProcedures": [
								"spf_GetAccountChangeCaseTaskIdForPenalty"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.ValueTuple",
						"Name": "GetInaccuracyPenaltyDraftsByCaseId",
						"Hash": "8162945918232D6D16653AED7430B57864DB710676D95EA407E5D8ED462968A0",
						"Parameters": [
							"System.Int32 caseId"
						],
						"Body": {
							"BodyText": "            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_GetCaseTaskDraftByCaseId\u0022);\r\n            query.AddParameter(\u0022@CaseID\u0022, SqlDbType.Int, 0, caseId);\r\n            query.ExecuteQuery();\r\n\r\n            List\u003CIInaccuracyPenalty\u003E originalPenalties = new List\u003CIInaccuracyPenalty\u003E();\r\n            List\u003CIInaccuracyPenalty\u003E currentPenalties = new List\u003CIInaccuracyPenalty\u003E();\r\n\r\n            foreach (DataRow row in query.DataTable.Rows)\r\n            {\r\n                IInaccuracyPenalty penalty = (IBaseMutableBusinessObject)SerializationHelper.Deserialize((byte[])row[\u0022DraftData\u0022]) as IInaccuracyPenalty;\r\n                if (penalty == null)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                if (penalty.IsOriginalData)\r\n                {\r\n                    originalPenalties.Add(penalty);\r\n                }\r\n                else\r\n                {\r\n                    currentPenalties.Add(penalty);\r\n                }\r\n            }\r\n\r\n            return (originalPenalties, currentPenalties);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedStoredProcedures": [
								"spf_GetCaseTaskDraftByCaseId"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty IsOriginalData"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Collections.Generic.List",
						"Name": "GetInaccuracyPenalties_ByTaxReturn",
						"Hash": "EF17A1B42E6492B3D8C728F52DF744E79B047CA98B91A11A6CD36DBC02722AA6",
						"Parameters": [
							"System.Int32 taxpayerID",
							"System.Int32 taxTypeID",
							"System.Int32 yearID",
							"System.Int32 periodID",
							"System.Int32 caseID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_GetInaccuracyPenalties_ByTaxReturn\u0022, transaction);\r\n            query.AddParameter(\u0022@TaxpayerID\u0022, SqlDbType.Int, 0, taxpayerID);\r\n            query.AddParameter(\u0022@TaxTypeID\u0022, SqlDbType.Int, 0, taxTypeID);\r\n            query.AddParameter(\u0022@YearID\u0022, SqlDbType.Int, 0, yearID);\r\n            query.AddParameter(\u0022@PeriodID\u0022, SqlDbType.Int, 0, periodID);\r\n            query.ExecuteQuery();\r\n\r\n            List\u003CIInaccuracyPenalty\u003E penalties = new List\u003CIInaccuracyPenalty\u003E();\r\n            foreach (DataRow row in query.DataTable.Rows)\r\n            {\r\n                IInaccuracyPenalty inaccuracyPenalty = CreateInaccuracyPenalty(taxpayerID, taxTypeID, caseID, transaction);\r\n                GenericBusinessObjectMapper\u003CIInaccuracyPenalty\u003E mapper = new GenericBusinessObjectMapper\u003CIInaccuracyPenalty\u003E();\r\n                mapper.MapFromDataRow(inaccuracyPenalty, row);\r\n                PopulateInaccuracyPenalty(inaccuracyPenalty);\r\n\r\n                inaccuracyPenalty.CalculatedPenalty = inaccuracyPenalty.Amount \u002B inaccuracyPenalty.PenaltyReductions;\r\n                inaccuracyPenalty.IsChanged = false;\r\n\r\n                penalties.Add(inaccuracyPenalty);\r\n            }\r\n\r\n            return penalties;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedStoredProcedures": [
								"spf_GetInaccuracyPenalties_ByTaxReturn"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty CalculatedPenalty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty Amount",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty PenaltyReductions",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty IsChanged"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Collections.Generic.IList",
						"Name": "GetInaccuracyPenaltiesSupportedTaxTypes",
						"Hash": "F9CB6F23E7245B79A954E41D159C3739B0314AA502AD759CF09ABC9DC357EEE0",
						"Body": {
							"BodyText": "            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_GetInaccuracyPenaltiesSupportedTaxTypes\u0022);\r\n            query.ExecuteQuery();\r\n            IList\u003Cint\u003E taxTypesIDs = new List\u003Cint\u003E();\r\n            foreach (DataRow row in query.DataTable.Rows)\r\n            {\r\n                taxTypesIDs.Add((int)row[\u0022TaxTypeID\u0022]);\r\n            }\r\n\r\n            return taxTypesIDs;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory"
							],
							"ReferencedStoredProcedures": [
								"spf_GetInaccuracyPenaltiesSupportedTaxTypes"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "SaveInaccuracyPenalties",
						"Hash": "E426A3F071A4BEA1B9B5CC53D1B48E2C76C92A87090D0C9741F5FC818FB74233",
						"Parameters": [
							"System.Int32 caseID",
							"System.Int32 taxpayerID",
							"System.Int32 userID",
							"System.Collections.Generic.IEnumerable originalInaccuracyPenalties",
							"System.Collections.Generic.IEnumerable currentInaccuracyPenalties",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            // first, let\u0027s look for anything that\u0027s been removed from the original penalty list, these need to be reversed.\r\n            // This should be disabled in the UI, but just in case it gets enabled, it means we won\u0027t need to do much refactoring to this repository.\r\n            foreach (IInaccuracyPenalty removedPenalty in originalInaccuracyPenalties.Where(p =\u003E p.Inactive))\r\n            {\r\n                RemoveInaccuracyPenalty(removedPenalty, userID, transaction);\r\n            }\r\n\r\n            bool isTotalBelowDiminimus = IsTotalBelowDiminimus(currentInaccuracyPenalties);\r\n\r\n            foreach (IInaccuracyPenalty inaccuracyPenalty in currentInaccuracyPenalties)\r\n            {\r\n                // ensure all cases get the CaseID set, since penalties not touched during the case are unmodified, so remain attached to the old case. \r\n                inaccuracyPenalty.CaseID = caseID; \r\n\r\n                if (inaccuracyPenalty.IsNew)\r\n                {\r\n                    AddInaccuracyPenalty(inaccuracyPenalty, isTotalBelowDiminimus, userID, transaction);\r\n                    continue;\r\n                }\r\n\r\n                // always update if not new, even if nothing else changed. This is so that all penalties in a case get at minimum a new InaccuracyPenalty record linked to the new case.\r\n                UpdateInaccuracyPenalty(inaccuracyPenalty, isTotalBelowDiminimus, userID, transaction);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty Inactive",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty CaseID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty IsNew"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "RemoveInaccuracyPenalty",
						"Hash": "9EA62E8F7B68569A85FC6DF2CA28F15BFA1CC3DEF763D6EE016EAAC6213B87C0",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty inaccuracyPenalty",
							"System.Int32 userID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            if (inaccuracyPenalty.ID == 0)\r\n            {\r\n                return;\r\n            }\r\n\r\n            INonQuery query = queryFactory.CreateNonQuery(\u0022spf_InaccuracyPenalty_Remove\u0022, transaction);\r\n            query.AddParameter(\u0022@InaccuracyPenaltyID\u0022, SqlDbType.Int, 0, inaccuracyPenalty.ID);\r\n            query.AddParameter(\u0022@UserID\u0022, SqlDbType.Int, 0, userID);\r\n            query.ExecuteQuery();\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_InaccuracyPenalty_Remove"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty ID",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateNonQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "AddInaccuracyPenalty",
						"Hash": "E16EEDF11A613766EEBA1D4DB4BB159CF1814F4953C3EBC842292A20A6DB1210",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty inaccuracyPenalty",
							"System.Boolean isTotalBelowDiminimus",
							"System.Int32 userID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            INonQuery query = queryFactory.CreateNonQuery(\u0022spf_InaccuracyPenalty_Add\u0022, transaction);\r\n\r\n            query.AddParameter(\u0022@InaccuracyPenaltyID\u0022, SqlDbType.Int, 0, inaccuracyPenalty.ID, ParameterDirection.Output);\r\n            query.AddParameter(\u0022@TaxpayerID\u0022, SqlDbType.Int, 0, inaccuracyPenalty.TaxpayerID);\r\n            query.AddParameter(\u0022@TaxTypeID\u0022, SqlDbType.Int, 0, inaccuracyPenalty.TaxTypeID);\r\n            query.AddParameter(\u0022@YearID\u0022, SqlDbType.Int, 0, inaccuracyPenalty.YearID);\r\n            query.AddParameter(\u0022@PeriodID\u0022, SqlDbType.Int, 0, inaccuracyPenalty.PeriodID);\r\n\r\n            AssignCommonQueryParameters(query, inaccuracyPenalty, isTotalBelowDiminimus, userID);\r\n\r\n            query.ExecuteQuery();\r\n\r\n            if (inaccuracyPenalty.ID == 0)\r\n            {\r\n                inaccuracyPenalty.ID = query.GetIntegerParameterValue(\u0022@InaccuracyPenaltyID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedStoredProcedures": [
								"spf_InaccuracyPenalty_Add"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateNonQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty TaxTypeID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty YearID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty PeriodID",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "UpdateInaccuracyPenalty",
						"Hash": "EEB073BDC2C0CD5C1459421B9C932F999D49DF8B2F7941643022EEEA1A1E66AC",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty inaccuracyPenalty",
							"System.Boolean isTotalBelowDiminimus",
							"System.Int32 userID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            if (inaccuracyPenalty.ID == 0)\r\n            {\r\n                return;\r\n            }\r\n\r\n            INonQuery query = queryFactory.CreateNonQuery(\u0022spf_InaccuracyPenalty_Update\u0022, transaction);\r\n            query.AddParameter(\u0022@InaccuracyPenaltyID\u0022, SqlDbType.Int, 0, inaccuracyPenalty.ID);\r\n            query.AddParameter(\u0022@NewInaccuracyPenaltyID\u0022, SqlDbType.Int, 0, 0, ParameterDirection.Output);\r\n            AssignCommonQueryParameters(query, inaccuracyPenalty, isTotalBelowDiminimus, userID);\r\n\r\n            query.ExecuteQuery();\r\n\r\n            inaccuracyPenalty.FromInaccuracyPenaltyID = inaccuracyPenalty.ID;\r\n            inaccuracyPenalty.ID = query.GetIntegerParameterValue(\u0022@NewInaccuracyPenaltyID\u0022);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_InaccuracyPenalty_Update"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty ID",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateNonQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty FromInaccuracyPenaltyID",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "AssignCommonQueryParameters",
						"Hash": "3227614CD71B1D9CDE2D62C754EA19E01092C764ABA969B098648917BC90B92D",
						"Parameters": [
							"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery query",
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty inaccuracyPenalty",
							"System.Boolean isTotalBelowDiminimus",
							"System.Int32 userID"
						],
						"Body": {
							"BodyText": "            query.AddParameter(\u0022@IsTotalBelowDiminimus\u0022, SqlDbType.Bit, 0, isTotalBelowDiminimus);\r\n            query.AddParameter(\u0022@EffectiveDate\u0022, SqlDbType.DateTime, 0, inaccuracyPenalty.EffectiveDate);\r\n            query.AddParameter(\u0022@Amount\u0022, SqlDbType.Money, 0, inaccuracyPenalty.Amount);\r\n            query.AddParameter(\u0022@CaseID\u0022, SqlDbType.Int, 0, inaccuracyPenalty.CaseID);\r\n            query.AddParameter(\u0022@HelpingPercentage\u0022, SqlDbType.Int, 0, inaccuracyPenalty.HelpingPercentage);\r\n            query.AddParameter(\u0022@HelpingReason\u0022, SqlDbType.NVarChar, 150, inaccuracyPenalty.HelpingReason);\r\n            query.AddParameter(\u0022@TellingPercentage\u0022, SqlDbType.Int, 0, inaccuracyPenalty.TellingPercentage);\r\n            query.AddParameter(\u0022@TellingReason\u0022, SqlDbType.NVarChar, 150, inaccuracyPenalty.TellingReason);\r\n            query.AddParameter(\u0022@GivingPercentage\u0022, SqlDbType.Int, 0, inaccuracyPenalty.GivingPercentage);\r\n            query.AddParameter(\u0022@GivingReason\u0022, SqlDbType.NVarChar, 150, inaccuracyPenalty.GivingReason);\r\n            query.AddParameter(\u0022@IsSuspended\u0022, SqlDbType.Bit, 0, inaccuracyPenalty.IsSuspended);\r\n            query.AddParameter(\u0022@SuspensionEndDate\u0022, SqlDbType.DateTime, 0, inaccuracyPenalty.SuspensionEndDate);\r\n\r\n            query.AddParameter(\u0022@PenaltyAssessmentReasonID\u0022, SqlDbType.Int, 0, inaccuracyPenalty.PenaltyAssessmentReasonID);\r\n            query.AddParameter(\u0022@PenaltyReasonDescription\u0022, SqlDbType.NVarChar, 150, inaccuracyPenalty.PenaltyReasonDescription);\r\n            query.AddParameter(\u0022@CustomerBehaviourID\u0022, SqlDbType.Int, 0, inaccuracyPenalty.CustomerBehaviourID);\r\n            query.AddParameter(\u0022@DisclosureID\u0022, SqlDbType.Int, 0, inaccuracyPenalty.DisclosureID);\r\n\r\n            query.AddParameter(\u0022@Assistance\u0022, SqlDbType.Decimal, 0, inaccuracyPenalty.Assistance);\r\n            query.AddParameter(\u0022@PenaltyRate\u0022, SqlDbType.Decimal, 0, inaccuracyPenalty.PenaltyRate);\r\n            query.AddParameter(\u0022@PenaltyReductions\u0022, SqlDbType.Decimal, 0, inaccuracyPenalty.PenaltyReductions);\r\n            query.AddParameter(\u0022@TotalPenalty\u0022, SqlDbType.Decimal, 0, inaccuracyPenalty.TotalPenalty);\r\n            query.AddParameter(\u0022@AssessedPLI\u0022, SqlDbType.Decimal, 0, inaccuracyPenalty.AssessedPLI);\r\n            query.AddParameter(\u0022@CalculatedPLI\u0022, SqlDbType.Decimal, 0, inaccuracyPenalty.CalculatedPLI);\r\n\r\n            query.AddParameter(\u0022@UserID\u0022, SqlDbType.Int, 0, currentUserRepository.GetCurrentUserID());\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty",
								"DataTorque.Iho.Interfaces.Repositories.ICurrentUserRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty EffectiveDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty Amount",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty CaseID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty HelpingPercentage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty HelpingReason",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty TellingPercentage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty TellingReason",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty GivingPercentage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty GivingReason",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty IsSuspended",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty SuspensionEndDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty PenaltyAssessmentReasonID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty PenaltyReasonDescription",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty CustomerBehaviourID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty DisclosureID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty Assistance",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty PenaltyRate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty PenaltyReductions",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty TotalPenalty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty AssessedPLI",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty CalculatedPLI",
								"DataTorque.Iho.Interfaces.Repositories.ICurrentUserRepository GetCurrentUserID"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsTotalBelowDiminimus",
						"Hash": "0AC48116F6B37EC66C846660E93A49A239D015C9BB942F1E42550D52AC694E61",
						"Parameters": [
							"System.Collections.Generic.IEnumerable currentInaccuracyPenalties"
						],
						"Body": {
							"BodyText": "            bool includeSuspendedPenaltiesInDiminimusCalculation = systemConstantRepository.GetBoolean(\u0022IncludeSuspendedPenaltiesInDiminimusCalculation\u0022, false);\r\n            int diminimus = systemConstantRepository.GetInteger(\u0022InaccuracyPenaltyDiminimus\u0022, 150);\r\n\r\n            decimal grandTotal = 0;\r\n            if (includeSuspendedPenaltiesInDiminimusCalculation)\r\n            {\r\n                grandTotal = currentInaccuracyPenalties.Sum(p =\u003E p.Amount);\r\n            }\r\n            else\r\n            {\r\n                grandTotal = currentInaccuracyPenalties.Where(p =\u003E !p.IsSuspended).Sum(p =\u003E p.Amount);\r\n            }\r\n\r\n            // if the total is below the diminimus, then we might need to reverse everything.\r\n            return grandTotal \u003C diminimus;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetBoolean",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty Amount",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IInaccuracyPenalty IsSuspended"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "IntegrationBankExtractRepository",
				"BaseType": "Unlinked.BaseRepository",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Repositories.IIntegrationBankExtractRepository"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
						"Name": "CreateIntegrationBankExtractFileHeader",
						"Hash": "16CC8CA6DBCDDC4C2E45C2B7E775F04402C4B74161A8D6C4973BB4E04CBB714B",
						"Body": {
							"BodyText": "            IntegrationBankExtractFileHeader integrationBankExtractFileHeader = new IntegrationBankExtractFileHeader(queryBuilder, integrationBankExtractFileHeaderValidator);\r\n            integrationBankExtractFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n            integrationBankExtractFileHeader.UpdateInitialValues();\r\n            return integrationBankExtractFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.IntegrationBankExtractFileHeader",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.IntegrationBankExtractFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.BusinessObjects.IntegrationBankExtractFileHeader UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
						"Name": "CreateIntegrationBankExtractFileDetail",
						"Hash": "008CEA7A460CDEFB9086BD627E2ED4A96F730304530B1EB9212DE8F8E01CFF59",
						"Body": {
							"BodyText": "            IntegrationBankExtractFileDetail bankExtractFileDetail = new IntegrationBankExtractFileDetail(queryBuilder, integrationBankExtractFileDetailValidator);\r\n            bankExtractFileDetail.UpdateInitialValues();\r\n            return bankExtractFileDetail;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.IntegrationBankExtractFileDetail",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.IntegrationBankExtractFileDetail UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
						"Name": "ReadIntegrationBankExtractFileData",
						"Hash": "51823B19895F95DDBD9841DA98FBBED9F458DBD69E09FAF56BF307085C182DCB",
						"Parameters": [
							"System.String filePath",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IIntegrationBankExtractFileHeader integrationBankExtractFileHeader = CreateIntegrationBankExtractFileHeader();\r\n\r\n            integrationBankExtractFileHeader.FileName = Path.GetFileName(filePath);\r\n            integrationBankExtractFileHeader.FileProcessedDate = DateTime.Today;\r\n\r\n            //validate the file while it is new to check the file extension\r\n            if (!integrationBankExtractFileHeader.Validate())\r\n            {\r\n                SaveHeaderValidationErrors(integrationBankExtractFileHeader, ImportFileStatus.Failed, transaction);\r\n            }\r\n            else if (!ValidateIntegrationBankExtractFileChecksum(integrationBankExtractFileHeader, filePath, transaction))\r\n            {\r\n                SaveHeaderValidationErrors(integrationBankExtractFileHeader, ImportFileStatus.Failed, transaction);\r\n            }\r\n            //only map if the file extension is validated otherwise reading/mapping is pointless  \r\n            else if (SaveIntegrationBankExtractFileHeader(integrationBankExtractFileHeader, transaction))\r\n            {\r\n                integrationBankExtractFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n\r\n                integrationBankExtractFileHeader.FileContents = ReadFileContents(filePath);\r\n\r\n                SaveIntegrationBankExtractFileHeader(integrationBankExtractFileHeader, transaction);\r\n\r\n            }\r\n\r\n            return integrationBankExtractFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader FileName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader FileProcessedDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader FileContents"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "ImportIntegrationBankExtractFileDetails",
						"Hash": "C5207AA593D0DC6F5DF4AACF824F46600C6C2FED0F4847B58766398727DF10DA",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader integrationBankExtractFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success;\r\n            try\r\n            {\r\n                if (integrationBankExtractFileHeader.FileContents == null || integrationBankExtractFileHeader.FileContents.Length \u003C 2)\r\n                {\r\n                    success = false;\r\n                    integrationBankExtractFileHeader.Notes = \u0022Importing the bank extracts file content failed because of the following error: No data in the file\u0022;\r\n                    integrationBankExtractFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveIntegrationBankExtractFileHeader(integrationBankExtractFileHeader, transaction);\r\n                }\r\n                else if (IsInvalidColumnCount(integrationBankExtractFileHeader.FileContents[0], 18))\r\n                {\r\n                    success = false;\r\n                    integrationBankExtractFileHeader.Notes = \u0022Importing the bank extracts file content failed because of the following error: Invalid column count\u0022;\r\n                    integrationBankExtractFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveIntegrationBankExtractFileHeader(integrationBankExtractFileHeader, transaction);\r\n                }\r\n                else\r\n                {\r\n                    bool hasInvalidRows = MapIntegrationBankExtractFileDetails(integrationBankExtractFileHeader);\r\n                    if (hasInvalidRows)\r\n                    {\r\n                        success = false;\r\n                        List\u003CIIntegrationBankExtractFileDetail\u003E invalidRows = integrationBankExtractFileHeader.IntegrationBankExtractFileDetails\r\n                                                                                                              .Where(d =\u003E d.IntegrationBankExtractFileDetailStatus == ImportFileDetailStatus.Invalid)\r\n                                                                                                              .ToList();\r\n                        StringBuilder rowValidationErrors = new StringBuilder();\r\n                        foreach (IIntegrationBankExtractFileDetail row in invalidRows)\r\n                        {\r\n                            rowValidationErrors.Append(\u0022 Row \u0022 \u002B (integrationBankExtractFileHeader.IntegrationBankExtractFileDetails.IndexOf(row) \u002B 2) \u002B \u0022: \u0022 \u002B row.ErrorMessage);\r\n                        }\r\n\r\n                        integrationBankExtractFileHeader.Notes = $\u0022Importing the bank extracts file content failed because of the following errors:{rowValidationErrors}\u0022;\r\n                        integrationBankExtractFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                        SaveIntegrationBankExtractFileHeader(integrationBankExtractFileHeader, transaction);\r\n                    }\r\n                    else\r\n                    {\r\n                        SaveIntegrationBankExtractFileDetails(integrationBankExtractFileHeader.IntegrationBankExtractFileDetails, transaction);\r\n\r\n                        ProcessIntegrationBankExtractFileDetails(integrationBankExtractFileHeader, transaction);\r\n\r\n                        success = CompleteIntegrationBankExtractFileProcessing(integrationBankExtractFileHeader, transaction);\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                success = false;\r\n                integrationBankExtractFileHeader.Notes = $\u0022Importing the bank extracts file content failed because of the following error: {ex.Message}\u0022;\r\n                integrationBankExtractFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n            }\r\n\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader IntegrationBankExtractFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail IntegrationBankExtractFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveIntegrationBankExtractFileDetail",
						"Hash": "F98CE198EB91E3F43B2F02A1FA45F22126B5303C7C267C7ABDD223694E24BC5D",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail bankExtractFileDetail"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveIntegrationBankExtractFileDetail, bankExtractFileDetail);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveIntegrationBankExtractFileDetail",
						"Hash": "C387FDF3A1A08E989FDD398FE3EB375CBACC16CD801F3FB195E52ED978CF975C",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail integrationBankExtractFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n\r\n            if (transaction == null)\r\n            {\r\n                result = SaveIntegrationBankExtractFileDetail(integrationBankExtractFileDetail);\r\n            }\r\n            else\r\n            {\r\n                if (integrationBankExtractFileDetail.IsDirty() || integrationBankExtractFileDetail.IsSavedWhenClean)\r\n                {\r\n                    integrationBankExtractFileDetail.DistributedSQLTransaction = transaction;\r\n                    if (integrationBankExtractFileDetail.Validate())\r\n                    {\r\n                        result = integrationBankExtractFileDetail.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail SaveData"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveIntegrationBankExtractFileDetails",
						"Hash": "EB557073058D0C6480BCF5A82E1D760069D5CD67BAE13D97407D4B3D0098168A",
						"Parameters": [
							"System.Collections.Generic.IList integrationBankExtractFileDetails",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            foreach (IIntegrationBankExtractFileDetail recordFileDetail in integrationBankExtractFileDetails)\r\n            {\r\n                result = SaveIntegrationBankExtractFileDetail(recordFileDetail, transaction);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveIntegrationBankExtractFileHeader",
						"Hash": "1D74545501DD0047F05099BF29751DAFC788BBD87F2EB4D35F1F353DD20DCE7A",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader integrationBankExtractFileHeader"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveIntegrationBankExtractFileHeader, integrationBankExtractFileHeader);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveIntegrationBankExtractFileHeader",
						"Hash": "A5AC959DB3DBC865599E65DA09AEA4B2B919D6EB947075501FADC3A4A707D2C1",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader integrationBankExtractFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            if (transaction == null)\r\n            {\r\n                result = SaveIntegrationBankExtractFileHeader(integrationBankExtractFileHeader);\r\n            }\r\n            else\r\n            {\r\n                if (integrationBankExtractFileHeader.IsDirty() || integrationBankExtractFileHeader.IsSavedWhenClean)\r\n                {\r\n                    integrationBankExtractFileHeader.DistributedSQLTransaction = transaction;\r\n                    if (integrationBankExtractFileHeader.Validate())\r\n                    {\r\n                        result = integrationBankExtractFileHeader.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader SaveData"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Collections.Generic.IList",
						"Name": "FindAllIntegrationBankExtractFileHeaders",
						"Hash": "903C854F920967602DF460852C41C5FA686D406674537EE8A58B042BEF32EFDC",
						"Parameters": [
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction",
							"System.Nullable statusId",
							"System.String fileName",
							"System.Nullable fromDate",
							"System.Nullable toDate",
							"System.Boolean includeInactive"
						],
						"Body": {
							"BodyText": "            List\u003CIIntegrationBankExtractFileHeader\u003E results = new List\u003CIIntegrationBankExtractFileHeader\u003E();\r\n\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_IntegrationBankExtractFileHeader_search\u0022, transaction);\r\n            if (statusId.HasValue)\r\n            {\r\n                query.AddParameter(\u0022@StatusID\u0022, SqlDbType.Int, 0, statusId);\r\n            }\r\n            if (!string.IsNullOrEmpty(fileName))\r\n            {\r\n                query.AddParameter(\u0022@FileName\u0022, SqlDbType.VarChar, 500, fileName);\r\n            }\r\n            if (fromDate.HasValue)\r\n            {\r\n                query.AddParameter(\u0022@FromDate\u0022, SqlDbType.DateTime, 0, fromDate.Value);\r\n            }\r\n            if (toDate.HasValue)\r\n            {\r\n                query.AddParameter(\u0022@ToDate\u0022, SqlDbType.DateTime, 0, toDate.Value);\r\n            }\r\n            query.AddParameter(\u0022@Inactive\u0022, SqlDbType.Bit, 0, includeInactive);\r\n\r\n            query.ExecuteQuery();\r\n\r\n            foreach (DataRow dataRow in query.DataTable.Rows)\r\n            {\r\n                IIntegrationBankExtractFileHeader result = CreateIntegrationBankExtractFileHeader();\r\n                result.AssignProperties(dataRow);\r\n                if (result.ImportFileStatus != ImportFileStatus.Failed)\r\n                {\r\n                    result.IntegrationBankExtractFileDetailsBindingList = LoadIntegrationBankExtractFileDetails(transaction, result.ID);\r\n                }\r\n                results.Add(result);\r\n            }\r\n\r\n            return results;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList"
							],
							"ReferencedStoredProcedures": [
								"spf_IntegrationBankExtractFileHeader_search"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader AssignProperties",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader IntegrationBankExtractFileDetailsBindingList",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader ID"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "Unlinked.SmartBindingList",
						"Name": "LoadIntegrationBankExtractFileDetails",
						"Hash": "A4A9891C3AE91BFAC188CA7D56FFE6C2045233ACDED2D07D839BCE93490BCF78",
						"Parameters": [
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction",
							"System.Int32 integrationBankExtractFileHeaderId"
						],
						"Body": {
							"BodyText": "            SmartBindingList\u003CIIntegrationBankExtractFileDetail\u003E integrationBankExtractFileDetailsList = new SmartBindingList\u003CIIntegrationBankExtractFileDetail\u003E();\r\n\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_IntegrationBankExtractFileDetailsByFileHeaderID\u0022, transaction);\r\n\r\n            query.AddParameter(\u0022@IntegrationBankExtractFileHeaderID\u0022, SqlDbType.Int, 0, integrationBankExtractFileHeaderId);\r\n            query.ExecuteQuery();\r\n            if (query.DataTable != null)\r\n            {\r\n                foreach (DataRow row in query.DataTable.Rows)\r\n                {\r\n                    IIntegrationBankExtractFileDetail detail = CreateIntegrationBankExtractFileDetail();\r\n                    detail.AssignProperties(row);\r\n                    integrationBankExtractFileDetailsList.Add(detail);\r\n                }\r\n            }\r\n\r\n            return integrationBankExtractFileDetailsList;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_IntegrationBankExtractFileDetailsByFileHeaderID"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail AssignProperties"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "",
						"Name": "ReadFileContents",
						"Hash": "A185D1D80C861672A2DB2B0F8005CC5CA765C4552CE9CAE782547ECD6F2D7019",
						"Parameters": [
							"System.String filePath"
						],
						"Body": {
							"BodyText": "            //Read in the file contents\r\n            using (StreamReader reader = new StreamReader(filePath))\r\n            {\r\n                List\u003Cstring\u003E fileContents = new List\u003Cstring\u003E();\r\n                string line;\r\n\r\n                while ((line = reader.ReadLine()) != null)\r\n                {\r\n                    fileContents.Add(line);\r\n                }\r\n\r\n                return fileContents.ToArray();\r\n            }\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveHeaderValidationErrors",
						"Hash": "597B2154E1E32DCB568B89CE0A65CD66DB3566F797981284952424A81AC2B434",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader integrationBankExtractFileHeader",
							"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus fileStatus",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            integrationBankExtractFileHeader.ImportFileStatus = fileStatus;\r\n\r\n            integrationBankExtractFileHeader.Notes = string.Join(\u0022; \u0022, integrationBankExtractFileHeader.ValidationErrorDictionary.Values);\r\n\r\n            SaveIntegrationBankExtractFileHeader(integrationBankExtractFileHeader, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveDetailValidationErrors",
						"Hash": "65155C976F4A14B26985880834813E6EBF5ED68F868DFE4BE1C684AF44CA91FD",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail integrationBankExtractFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            integrationBankExtractFileDetail.IntegrationBankExtractFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n\r\n            integrationBankExtractFileDetail.ErrorMessage = string.Join(\u0022; \u0022, integrationBankExtractFileDetail.ValidationErrorDictionary.Values);\r\n\r\n            SaveIntegrationBankExtractFileDetail(integrationBankExtractFileDetail, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail IntegrationBankExtractFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "MapIntegrationBankExtractFileDetails",
						"Hash": "995CEE7CF6EB6F963773EC2FDEA9AD133BFFCB202A1727F2EA2170802174D693",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader integrationBankExtractFileHeader"
						],
						"Body": {
							"BodyText": "            bool hasInvalidRows = false;\r\n            foreach (string record in integrationBankExtractFileHeader.FileContents.Skip(1).Take(integrationBankExtractFileHeader.FileContents.Length - 1))\r\n            {\r\n                IIntegrationBankExtractFileDetail integrationBankExtractFileDetail = CreateIntegrationBankExtractFileDetail();\r\n                integrationBankExtractFileDetail.IntegrationBankExtractFileHeaderID = integrationBankExtractFileHeader.ID;\r\n                integrationBankExtractFileDetail.Record = record;\r\n                integrationBankExtractFileDetail.IntegrationBankExtractFileDetailStatus = ImportFileDetailStatus.ReadingFileContent;\r\n                integrationBankExtractFileHeader.IntegrationBankExtractFileDetails.Add(integrationBankExtractFileDetail);\r\n\r\n                integrationBankExtractFileDetailMapper.MapFromFile(integrationBankExtractFileDetail, integrationBankExtractFileDetail.Record);\r\n                if (integrationBankExtractFileDetail.Validate())\r\n                {\r\n                    bool shouldIgnore = SkipProccessingIntegrationBankExtractFileDetail(integrationBankExtractFileDetail);\r\n                    integrationBankExtractFileDetail.IntegrationBankExtractFileDetailStatus = shouldIgnore ? ImportFileDetailStatus.Ignored : ImportFileDetailStatus.Processing;\r\n                }\r\n                else\r\n                {\r\n                    integrationBankExtractFileDetail.IntegrationBankExtractFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                    integrationBankExtractFileDetail.ErrorMessage = string.Join(\u0022; \u0022, integrationBankExtractFileDetail.ValidationErrorDictionary.Values.OrderBy(v =\u003E v));\r\n                    hasInvalidRows = true;\r\n                }\r\n            }\r\n            return hasInvalidRows;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Mappers.IIntegrationBankExtractFileDetailMapper"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail IntegrationBankExtractFileHeaderID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail IntegrationBankExtractFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus ReadingFileContent",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader IntegrationBankExtractFileDetails",
								"DataTorque.IsleOfMan.Interfaces.Mappers.IIntegrationBankExtractFileDetailMapper MapFromFile",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Processing",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ProcessIntegrationBankExtractFileDetails",
						"Hash": "BC66C40DFDBA53D918D8BB2EDF02B0E4470BE94D931B3811615813FE4A31E7F6",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader integrationBankExtractFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            foreach (IIntegrationBankExtractFileDetail integrationBankExtractFileDetail in integrationBankExtractFileHeader.IntegrationBankExtractFileDetails)\r\n            {\r\n                //only process if there were no errors from mapping\r\n                if (integrationBankExtractFileDetail.IntegrationBankExtractFileDetailStatus != ImportFileDetailStatus.Ignored)\r\n                {\r\n                    if (integrationBankExtractFileDetail.Validate())\r\n                    {\r\n                        if (SaveIntegrationBankExtractFileDetail(integrationBankExtractFileDetail, transaction))\r\n                        {\r\n                            if (AddPaymentRecord(integrationBankExtractFileDetail, transaction))\r\n                            {\r\n                                integrationBankExtractFileHeader.TotalProcessedPaymentCount \u002B= 1;\r\n\r\n                                if (!string.IsNullOrEmpty(integrationBankExtractFileDetail.ErrorMessage))\r\n                                {\r\n                                    integrationBankExtractFileDetail.IntegrationBankExtractFileDetailStatus = ImportFileDetailStatus.Failed;\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                integrationBankExtractFileDetail.IntegrationBankExtractFileDetailStatus = ImportFileDetailStatus.Failed;\r\n                            }\r\n\r\n                            SaveIntegrationBankExtractFileDetail(integrationBankExtractFileDetail, transaction);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        SaveDetailValidationErrors(integrationBankExtractFileDetail, transaction);\r\n                    }\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader IntegrationBankExtractFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail IntegrationBankExtractFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader TotalProcessedPaymentCount",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "AddPaymentRecord",
						"Hash": "62DD45E0DEA805D42C77131C320754F0CE7F897CFBCD983A39822BC66B02F222",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail integrationBankExtractFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success = true;\r\n\r\n            try\r\n            {\r\n                // Create the payment so we can load it with the details\r\n                IPaymentHeader paymentHeader = paymentRepository.CreatePaymentHeader();\r\n                IPayment payment = paymentHeader.Payment;\r\n                payment.PaymentDate = integrationBankExtractFileDetail.Date;\r\n                IPaymentHeader subPaymentHeader = paymentRepository.CreatePaymentHeader();\r\n                IPayment subPayment = subPaymentHeader.Payment;\r\n                subPayment.PaymentDate = integrationBankExtractFileDetail.Date;\r\n                bool applyPaymentAllocationRules = false;\r\n                bool isSubPaymentRequired = false;\r\n                decimal importCreditAmount = integrationBankExtractFileDetail.Credit ?? 0;\r\n                IOnlinePaymentBankTransferReferenceHeader paymentReferenceHeader = GetOnlinePaymentBankTransferDetails(integrationBankExtractFileDetail, out int? taxpayerId, transaction);\r\n                int taxTypeId = 0;\r\n\r\n                if (paymentReferenceHeader == null)\r\n                {\r\n                    integrationBankExtractFileDetail.TaxpayerID = integrationBankExtractFileParser.GetTaxpayerId(integrationBankExtractFileDetail.Narrative5, out int? vatTaxTypeId, transaction);\r\n                    payment.TaxpayerID = integrationBankExtractFileDetail.TaxpayerID ?? 0;\r\n                    applyPaymentAllocationRules = true;\r\n                    taxTypeId = vatTaxTypeId ?? 0;\r\n                }\r\n                else\r\n                {\r\n                    integrationBankExtractFileDetail.TaxpayerID = taxpayerId;\r\n                    payment.TaxpayerID = taxpayerId ?? 0;\r\n                    if (IsValidBankReference(paymentReferenceHeader.BankReference, transaction))\r\n                    {\r\n                        paymentHeader.PaymentReferenceCode = paymentReferenceHeader.BankReference;\r\n                        decimal totalAmountToBePaid = paymentReferenceHeader.Details.Sum(d =\u003E d.AmountToBePaid);\r\n                        if (totalAmountToBePaid == importCreditAmount)\r\n                        {\r\n                            paymentUpdater.UpdatePaymentFromBankReference(payment, paymentReferenceHeader, transaction);\r\n                        }\r\n                        else if (totalAmountToBePaid \u003C importCreditAmount)\r\n                        {\r\n                            decimal balance = importCreditAmount - totalAmountToBePaid;\r\n                            paymentUpdater.UpdatePaymentFromBankReference(payment, paymentReferenceHeader, transaction);\r\n                            //Create a new payment for balance amount and pass it to the payment allocation rules\r\n                            subPayment.TaxpayerID = payment.TaxpayerID;\r\n                            paymentUpdater.UpdatePaymentFromAmount(subPayment, balance, 0, transaction);\r\n                            paymentUpdater.UpdatePaymentNonCashType(subPayment, integrationBankExtractFileDetail.Type, transaction);\r\n                            isSubPaymentRequired = true;\r\n                        }\r\n                        else if (totalAmountToBePaid \u003E importCreditAmount)\r\n                        {\r\n                            UpdatePayementReferenceHeaderDetailsForThePaidAmount(paymentReferenceHeader, importCreditAmount);\r\n                            paymentUpdater.UpdatePaymentFromBankReference(payment, paymentReferenceHeader, transaction);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        applyPaymentAllocationRules = true;\r\n                    }\r\n                }\r\n\r\n                if (payment.TaxpayerID \u003C= 0)\r\n                {\r\n                    // Could not work out who the payment was for so must set to a suspense case\r\n                    paymentUpdater.UpdatePaymentToSuspenseAccount(payment);\r\n                }\r\n\r\n                if (applyPaymentAllocationRules)\r\n                {\r\n                    paymentUpdater.UpdatePaymentFromAmount(payment, importCreditAmount, taxTypeId, transaction);\r\n                }\r\n\r\n                paymentUpdater.UpdatePaymentNonCashType(payment, integrationBankExtractFileDetail.Type, transaction);\r\n\r\n\r\n                // Save and process payment as normal\r\n                // paymentRepository.SavePaymentHeader should create a case with RelatedRecordID = PaymentTransaction.ID if suspense case is created\r\n                if (paymentRepository.SavePaymentHeader(paymentHeader, transaction))\r\n                {\r\n                    // update import with actual payment ID that has now been created and save back\r\n                    integrationBankExtractFileDetail.PaymentHeaderID = paymentHeader.ID;\r\n                    integrationBankExtractFileDetail.IntegrationBankExtractFileDetailStatus = ImportFileDetailStatus.Imported;\r\n\r\n                    // Find any suspense case created with RelatedRecordID = PaymentTransaction.ID, and set the suspense case details on the integrationBankExtractFileDetail\r\n                    if (UpdatePaymentSuspenseCaseDetails(payment, integrationBankExtractFileDetail, transaction))\r\n                    {\r\n                        integrationBankExtractFileDetail.IntegrationBankExtractFileDetailStatus = ImportFileDetailStatus.Suspense;\r\n                    }\r\n\r\n                    SaveIntegrationBankExtractFileDetail(integrationBankExtractFileDetail, transaction);\r\n                    if (isSubPaymentRequired)\r\n                    {\r\n                        if (paymentRepository.SavePaymentHeader(subPaymentHeader, transaction))\r\n                        {\r\n                            // update import with actual payment ID that has now been created and save back\r\n                            integrationBankExtractFileDetail.SubPaymentHeaderID = subPaymentHeader.ID;\r\n\r\n                            SaveIntegrationBankExtractFileDetail(integrationBankExtractFileDetail, transaction);\r\n                        }\r\n                        else\r\n                        {\r\n                            // update the error message and save the details to the database\r\n                            integrationBankExtractFileDetail.IntegrationBankExtractFileDetailStatus = ImportFileDetailStatus.Failed;\r\n                            integrationBankExtractFileDetail.ErrorMessage = string.Join(\u0022; \u0022, subPaymentHeader.Payment.ValidationErrorDictionary.Values);\r\n                            SaveIntegrationBankExtractFileDetail(integrationBankExtractFileDetail, transaction);\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    // update the error message and save the details to the database\r\n                    integrationBankExtractFileDetail.IntegrationBankExtractFileDetailStatus = ImportFileDetailStatus.Failed;\r\n                    integrationBankExtractFileDetail.ErrorMessage = string.Join(\u0022; \u0022, paymentHeader.Payment.ValidationErrorDictionary.Values);\r\n                    SaveIntegrationBankExtractFileDetail(integrationBankExtractFileDetail, transaction);\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                integrationBankExtractFileDetail.ErrorMessage = $\u0022Adding the payment record failed because of the following error: {ex.Message}\u0022;\r\n                success = false;\r\n            }\r\n\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentHeader",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IIntegrationBankExtractFileParser",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository CreatePaymentHeader",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentHeader Payment",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment PaymentDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Date",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Credit",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IIntegrationBankExtractFileParser GetTaxpayerId",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Narrative5",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment TaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader BankReference",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentHeader PaymentReferenceCode",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader Details",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail AmountToBePaid",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater UpdatePaymentFromBankReference",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater UpdatePaymentFromAmount",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater UpdatePaymentNonCashType",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Type",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentUpdater UpdatePaymentToSuspenseAccount",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository SavePaymentHeader",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail PaymentHeaderID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentHeader ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail IntegrationBankExtractFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Imported",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Suspense",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail SubPaymentHeaderID",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "CompleteIntegrationBankExtractFileProcessing",
						"Hash": "B92CEB170A23837C71154077301116C3F78DD54E7C3800E717475D4D89225039",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader integrationBankExtractFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            if (integrationBankExtractFileHeader.Validate())\r\n            {\r\n                integrationBankExtractFileHeader.ImportFileStatus = integrationBankExtractFileHeader.IntegrationBankExtractFileDetails.Any(d =\u003E d.IntegrationBankExtractFileDetailStatus == ImportFileDetailStatus.Failed ||\r\n                                                                                                                                                d.IntegrationBankExtractFileDetailStatus == ImportFileDetailStatus.Ignored) ? ImportFileStatus.PartialImport : ImportFileStatus.Complete;\r\n                SaveIntegrationBankExtractFileHeader(integrationBankExtractFileHeader, transaction);\r\n            }\r\n            else\r\n            {\r\n                SaveHeaderValidationErrors(integrationBankExtractFileHeader, ImportFileStatus.PartialImport, transaction);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader IntegrationBankExtractFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail IntegrationBankExtractFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Complete"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateIntegrationBankExtractFileChecksum",
						"Hash": "3B93CB891950A6132581308895D5EA57F39F55BA9D97EED066652BF8ED2DAA97",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader integrationBankExtractFileHeader",
							"System.String filePath",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool isValid = false;\r\n\r\n            using (MD5 md5 = MD5.Create())\r\n            {\r\n                using (FileStream stream = File.OpenRead(filePath))\r\n                {\r\n                    byte[] hash = md5.ComputeHash(stream);\r\n                    integrationBankExtractFileHeader.Checksum = BitConverter.ToString(hash).Replace(\u0022-\u0022, \u0022\u0022).ToLowerInvariant();\r\n                }\r\n            }\r\n\r\n            if (IsExistingIntegrationBankExtractFileHeader(integrationBankExtractFileHeader.Checksum, transaction))\r\n            {\r\n                integrationBankExtractFileHeader.ValidationErrorDictionary.Add(\u0022Checksum\u0022, \u0022File checksum already exists in the database.\u0022);\r\n            }\r\n            else\r\n            {\r\n                isValid = true;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader Checksum",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsExistingIntegrationBankExtractFileHeader",
						"Hash": "A194B89A5B28E317E1166292D0032F1C0BA6E7B7A84E6162E56870B4E204D4C7",
						"Parameters": [
							"System.String checksum",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_IntegrationBankExtractFileHeader_FindByChecksum\u0022, transaction);\r\n            query.AddParameter(\u0022@Checksum\u0022, SqlDbType.NVarChar, 0, checksum);\r\n            query.ExecuteQuery();\r\n\r\n            return query.DataTable.Rows.Count \u003E 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_IntegrationBankExtractFileHeader_FindByChecksum"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "SkipProccessingIntegrationBankExtractFileDetail",
						"Hash": "0B4916777D53CB5987E7373CE91F21BEA6C4194577AE9FB161B639B4709F576F",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail integrationBankExtractFileDetail"
						],
						"Body": {
							"BodyText": "            string[] allowedPaymentTypes = { \u0022BAC\u0022, \u0022DPC\u0022, \u0022ITL\u0022, \u0022SBT\u0022 };\r\n            bool shouldIgnore = integrationBankExtractFileDetail.Debit.HasValue ||\r\n                                integrationBankExtractFileDetail.Currency != \u0022GBP\u0022 ||\r\n                                !allowedPaymentTypes.Contains(integrationBankExtractFileDetail.Type);\r\n\r\n            return shouldIgnore;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Debit",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Currency",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Type"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsInvalidColumnCount",
						"Hash": "9ED839CF5B41B5D24671534303AC75757763A0448EC7EFB0DB7A4C882D014BFC",
						"Parameters": [
							"System.String stringToCheck",
							"System.Int32 expectedColumnCount"
						],
						"Body": {
							"BodyText": "            string[] columnData = stringToCheck.Split(\u0027,\u0027);\r\n            return columnData.Length != expectedColumnCount;\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader",
						"Name": "GetOnlinePaymentBankTransferDetails",
						"Hash": "9A7D46B71B15D4374C65489DE82F95DFFE9670B2A34DFA57226B6E2544371082",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail integrationBankExtractFileDetail",
							"System.Nullable taxpayerId",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            string bankReference = integrationBankExtractFileDetail.Narrative1;\r\n            IOnlinePaymentBankTransferReferenceHeader paymentReferenceHeader = paymentRepository.FindOnlinePaymentBankTransferReferenceHeader(integrationBankExtractFileDetail.Narrative1, transaction);\r\n            if (paymentReferenceHeader == null)\r\n            {\r\n                if (!string.IsNullOrEmpty(integrationBankExtractFileDetail.Narrative2))\r\n                {\r\n                    bankReference = integrationBankExtractFileDetail.Narrative2;\r\n                    paymentReferenceHeader = paymentRepository.FindOnlinePaymentBankTransferReferenceHeader(integrationBankExtractFileDetail.Narrative2, transaction);\r\n                    if (paymentReferenceHeader == null)\r\n                    {\r\n                        if (!string.IsNullOrEmpty(integrationBankExtractFileDetail.Narrative3))\r\n                        {\r\n                            bankReference = integrationBankExtractFileDetail.Narrative3;\r\n                            paymentReferenceHeader = paymentRepository.FindOnlinePaymentBankTransferReferenceHeader(integrationBankExtractFileDetail.Narrative3, transaction);\r\n                            if (paymentReferenceHeader == null \u0026\u0026 !string.IsNullOrEmpty(integrationBankExtractFileDetail.Narrative4))\r\n                            {\r\n                                bankReference = integrationBankExtractFileDetail.Narrative4;\r\n                                paymentReferenceHeader = paymentRepository.FindOnlinePaymentBankTransferReferenceHeader(integrationBankExtractFileDetail.Narrative4, transaction);\r\n                            }\r\n\r\n                        }\r\n                        else if (!string.IsNullOrEmpty(integrationBankExtractFileDetail.Narrative4))\r\n                        {\r\n                            bankReference = integrationBankExtractFileDetail.Narrative4;\r\n                            paymentReferenceHeader = paymentRepository.FindOnlinePaymentBankTransferReferenceHeader(integrationBankExtractFileDetail.Narrative4, transaction);\r\n                        }\r\n                    }\r\n\r\n                }\r\n                else if (!string.IsNullOrEmpty(integrationBankExtractFileDetail.Narrative3))\r\n                {\r\n                    bankReference = integrationBankExtractFileDetail.Narrative3;\r\n                    paymentReferenceHeader = paymentRepository.FindOnlinePaymentBankTransferReferenceHeader(integrationBankExtractFileDetail.Narrative3, transaction);\r\n                    if (paymentReferenceHeader == null \u0026\u0026 !string.IsNullOrEmpty(integrationBankExtractFileDetail.Narrative4))\r\n                    {\r\n                        bankReference = integrationBankExtractFileDetail.Narrative4;\r\n                        paymentReferenceHeader = paymentRepository.FindOnlinePaymentBankTransferReferenceHeader(integrationBankExtractFileDetail.Narrative4, transaction);\r\n                    }\r\n\r\n                }\r\n                else if (!string.IsNullOrEmpty(integrationBankExtractFileDetail.Narrative4))\r\n                {\r\n                    bankReference = integrationBankExtractFileDetail.Narrative4;\r\n                    paymentReferenceHeader = paymentRepository.FindOnlinePaymentBankTransferReferenceHeader(integrationBankExtractFileDetail.Narrative4, transaction);\r\n                }\r\n\r\n            }\r\n            taxpayerId = paymentReferenceCodeParser.GetTaxpayerID(bankReference);\r\n            return paymentReferenceHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentReferenceCodeParser"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Narrative1",
								"DataTorque.Iho.Interfaces.Repositories.IPaymentRepository FindOnlinePaymentBankTransferReferenceHeader",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Narrative2",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Narrative3",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Narrative4",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IPaymentReferenceCodeParser GetTaxpayerID"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsValidBankReference",
						"Hash": "F861503160116498C8DD5DFA9754153F2284F93078734AC8B05E034ED414193B",
						"Parameters": [
							"System.String bankReference",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IScalarQuery query = queryFactory.CreateScalarQuery(\u0022spf_GetCountOfPaymentHeaderWithSamePaymentReferenceCode\u0022, transaction);\r\n            query.AddParameter(\u0022@PaymentReferenceCode\u0022, SqlDbType.NVarChar, 0, bankReference);\r\n            query.ExecuteQuery();\r\n\r\n            return (int)query.ScalarValue == 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_GetCountOfPaymentHeaderWithSamePaymentReferenceCode"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "UpdatePayementReferenceHeaderDetailsForThePaidAmount",
						"Hash": "AC9313040D654E978ABDD2AFBCBAFDEA2323B7E4D8979EBE6C74E5CF736226BE",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader paymentReferenceHeader",
							"System.Decimal credit"
						],
						"Body": {
							"BodyText": "            if (paymentReferenceHeader.Details.Count == 1)\r\n            {\r\n                paymentReferenceHeader.Details[0].AmountToBePaid = credit;\r\n            }\r\n            else\r\n            {\r\n                List\u003CIOnlinePaymentBankTransferReferenceDetail\u003E onlinePaymentBankTransferReferenceDetails = paymentReferenceHeader.Details.OrderBy(d =\u003E d.YearID).ThenBy(d =\u003E d.PeriodID).ToList();\r\n                decimal balance = credit;\r\n                for (int i = 0; i \u003C onlinePaymentBankTransferReferenceDetails.Count; i\u002B\u002B)\r\n                {\r\n                    IOnlinePaymentBankTransferReferenceDetail currentItem = onlinePaymentBankTransferReferenceDetails[i];\r\n                    if (balance \u003E= currentItem.AmountToBePaid)\r\n                    {\r\n                        balance -= currentItem.AmountToBePaid;\r\n                    }\r\n                    else\r\n                    {\r\n                        int itemIndex = paymentReferenceHeader.Details.IndexOf(currentItem);\r\n                        paymentReferenceHeader.Details[itemIndex].AmountToBePaid = balance;\r\n                        int startIndexToBeRemoved = i \u002B 1;\r\n                        int length = onlinePaymentBankTransferReferenceDetails.Count;\r\n                        List\u003CIOnlinePaymentBankTransferReferenceDetail\u003E itemsToBeRemoved = new List\u003CIOnlinePaymentBankTransferReferenceDetail\u003E();\r\n                        for (int j = startIndexToBeRemoved; j \u003C length; j\u002B\u002B)\r\n                        {\r\n                            itemsToBeRemoved.Add(onlinePaymentBankTransferReferenceDetails[j]);\r\n                        }\r\n\r\n                        foreach (IOnlinePaymentBankTransferReferenceDetail item in itemsToBeRemoved)\r\n                        {\r\n                            paymentReferenceHeader.Details.Remove(item);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceHeader Details",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail YearID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail PeriodID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IOnlinePaymentBankTransferReferenceDetail AmountToBePaid"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "UpdatePaymentSuspenseCaseDetails",
						"Hash": "27665259A1B343631446D5134A20B82A73BE57EFB720A09C944BBBCA97C844FF",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IPayment payment",
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail integrationBankExtractFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            // Find any suspense case created with RelatedRecordID = PaymentTransaction.ID, and set the suspense case details on the integrationBankExtractFileDetail\r\n            if (integrationBankExtractFileDetail != null)\r\n            {\r\n                // any suspense case will be attached to the 1st one\r\n                IPaymentTransaction paymentTransaction = payment.Transactions.FirstOrDefault(t =\u003E t.PaymentHeaderID == integrationBankExtractFileDetail.PaymentHeaderID);\r\n                if (paymentTransaction != null)\r\n                {\r\n                    //Look up any suspense case with: RelatedRecordID = paymentTransaction.ID\r\n                    Tuple\u003Cint, int\u003E suspenseCase = FindRelatedPaymentSuspenseCase(paymentTransaction, transaction);\r\n\r\n                    // if found, set the case details onto the IntegrationBankExtractFileDetail\r\n                    if (suspenseCase != null)\r\n                    {\r\n                        integrationBankExtractFileDetail.CaseID = suspenseCase.Item1;\r\n                        integrationBankExtractFileDetail.CaseNo = suspenseCase.Item2;\r\n\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IPayment Transactions",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction PaymentHeaderID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail PaymentHeaderID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail CaseID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail CaseNo"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Tuple",
						"Name": "FindRelatedPaymentSuspenseCase",
						"Hash": "AF92B6DE02B54141776778FDDA13CECFCF2D5368FEBB461FFCE499717F277013",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction paymentTransaction",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            //Look up any suspense case with: RelatedRecordID = paymentTransaction.ID\r\n\r\n            if (paymentTransaction == null)\r\n                return null;\r\n\r\n            // TODO: Check that PYT is still the correct type, and code not changed to SAT or SAP\r\n            int caseRelatedRecordType = standardLookupRepository.FindItemByCode(\u0022CaseRelatedRecordType\u0022, \u0022PYT\u0022)?.ID ?? 0;\r\n            Tuple\u003Cint, int\u003E suspenseCase = null;\r\n\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_GetCaseNoByRelatedRecordID\u0022, transaction);\r\n            query.AddParameter(\u0022@CaseRelatedRecordType\u0022, SqlDbType.Int, 0, caseRelatedRecordType);\r\n            query.AddParameter(\u0022@RelatedRecordID\u0022, SqlDbType.Int, 0, paymentTransaction.ID);\r\n            query.ExecuteQuery();\r\n\r\n            if (query.DataTable.Rows.Count \u003E 0)\r\n            {\r\n                int caseId = ParsingHelper.ParseInt(query.DataTable.Rows[0][\u0022CaseID\u0022]);\r\n                int caseNo = ParsingHelper.ParseInt(query.DataTable.Rows[0][\u0022CaseNo\u0022]);\r\n                suspenseCase = new Tuple\u003Cint, int\u003E(caseId, caseNo);\r\n            }\r\n\r\n            return suspenseCase;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_GetCaseNoByRelatedRecordID"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.BusinessObjects.IPaymentTransaction ID",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "NotificationRepository",
				"BaseType": "DataTorque.Iho.BusinessObjects.Repositories.NotificationRepository",
				"Methods": [
					{
						"Modifiers": "protected override",
						"ReturnType": "DataTorque.Iho.Interfaces.BusinessObjects.INotificationRequest",
						"Name": "CreateNotificationRequest",
						"Hash": "931CB09B1D21E6F85D5D5AAFC4092EDC345A75B7CA41C7B6976DE848531FFB69",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification taxpayerNotification",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            // Create notification\r\n            // IOM: update the address list here for real taxpayer\r\n            if (taxpayerNotification.Configuration.Type == NotificationTypes.Email \u0026\u0026 taxpayerNotification.Configuration.Code != \u0022EmailAlert\u0022 \u0026\u0026 taxpayerNotification.TaxpayerID \u003E 0)\r\n            {\r\n                UpdateTaxpayerNotificationAddressList(taxpayerNotification, transaction);\r\n            }\r\n\r\n            INotificationRequest notificationRequest = notificationRequestRepository.CreateEmailNotificationRequest(taxpayerNotification.Subject, taxpayerNotification.Body, taxpayerNotification.AddressList, taxpayerNotification.CaseID, taxpayerNotification.NotificationPriority);\r\n            notificationRequest.DistributedSQLTransaction = transaction;\r\n            notificationRequest.EmailMessage.IsBodyHtml = true;\r\n\r\n            if (!string.IsNullOrEmpty(taxpayerNotification.FromEmailAddress))\r\n            {\r\n                notificationRequest.EmailMessage.FromAddress = taxpayerNotification.FromEmailAddress;\r\n            }\r\n\r\n            return notificationRequest;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.NotificationTypes",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotificationConfiguration",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.INotificationRequest",
								"DataTorque.Iho.Interfaces.Repositories.INotificationRequestRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IEmailMessage"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification Configuration",
								"DataTorque.Iho.Interfaces.NotificationTypes Email",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification TaxpayerID",
								"DataTorque.Iho.Interfaces.Repositories.INotificationRequestRepository CreateEmailNotificationRequest",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification Subject",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification Body",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification AddressList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification CaseID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification NotificationPriority",
								"DataTorque.Iho.Interfaces.BusinessObjects.INotificationRequest DistributedSQLTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.INotificationRequest EmailMessage",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification FromEmailAddress"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "System.Boolean",
						"Name": "SendAlert",
						"Hash": "E8108F5BFDC39FE3CE5D8026B7EDECFA897B325C741FBEDE463E38F3409FE5EE",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification taxpayerNotification",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success;\r\n\r\n            //if email alert notification with reportID, create a resource with it\r\n            if (taxpayerNotification.ReportID.GetValueOrDefault() \u003E 0 \u0026\u0026 taxpayerNotification.ResourceID == null)\r\n            {\r\n                GenerateReport(taxpayerNotification, false, transaction);\r\n            }\r\n\r\n            ITaxpayerNotification alertNotification = CreateAlertNotification(taxpayerNotification, transaction);\r\n            success = alertNotification != null;\r\n            if (success)\r\n            {\r\n                EmailAlertStatus result = CheckIfAlertCanBeSentWithReason(alertNotification, taxpayerNotification.Configuration.Code, transaction);\r\n\r\n                if (result == EmailAlertStatus.NoValidWebUser)\r\n                {\r\n                    //TODO: Make into a resource lookup\r\n                    taxpayerNotification.ErrorList.Add(\u0022Web user not found for this taxpayer.\u0022);\r\n                    success = false;\r\n                }\r\n                else\r\n                {\r\n                    int overrideLanguageID = systemConstantRepository.GetInteger(\u0022DefaultLanguageID\u0022);\r\n                    bool lettersUseDefaultLanguageID = systemConstantRepository.GetBoolean(\u0022LettersUseDefaultLanguageID\u0022);\r\n                    foreach (ITaxpayerNotification letterNotification in taxpayerNotification.LetterNotificationsForAttachments.Where(n =\u003E n.AttachToEmail))\r\n                    {\r\n                        if (lettersUseDefaultLanguageID)\r\n                        {\r\n                            letterNotification.LanguageID = overrideLanguageID;\r\n                        }\r\n\r\n                        GenerateReport(letterNotification, false, transaction);\r\n                    }\r\n\r\n                    if (result == EmailAlertStatus.MessageLimitExceeded)\r\n                    {\r\n                    }\r\n\r\n                    if (result == EmailAlertStatus.CanBeSent)\r\n                    {\r\n                        success = SendEmail(alertNotification, transaction);\r\n                        if (success)\r\n                        {\r\n                            alertNotification.ID = SaveTaxpayerNotificationInDB(alertNotification, transaction);\r\n                            if (alertNotification.ID \u003C= 0)\r\n                            {\r\n                                taxpayerNotification.ErrorList.Add(ResourceHelper.GetApplicationResource(\u0022Validation_BusinessObjectSaveFailed\u0022));\r\n                                success = false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.EmailAlertStatus",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotificationConfiguration",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification ReportID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification ResourceID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification Configuration",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.EmailAlertStatus NoValidWebUser",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification ErrorList",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetBoolean",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification LetterNotificationsForAttachments",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification AttachToEmail",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification LanguageID",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.EmailAlertStatus MessageLimitExceeded",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.EmailAlertStatus CanBeSent",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification ID"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification",
						"Name": "CreateAlertNotification",
						"Hash": "F0B2E24EC2BFD976289054EA4BA44B8203925244855BE25E366EEC0ED393906E",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification taxpayerNotification",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            string alertNotificationConfigurationCode = systemConstantRepository.GetString(\u0022AlertNotificationConfigurationCode\u0022, \u0022EmailAlert\u0022);\r\n            ITaxpayerNotification alertNotification = CreateTaxpayerNotificationFromConfiguration(alertNotificationConfigurationCode, executingEnvironment.TodayDate, taxpayerNotification.LanguageID, transaction);\r\n\r\n            if (alertNotification != null)\r\n            {\r\n                alertNotification.TaxpayerID = taxpayerNotification.TaxpayerID;\r\n                alertNotification.TaxTypeId = taxpayerNotification.TaxTypeId;\r\n                alertNotification.CaseID = taxpayerNotification.CaseID;\r\n                alertNotification.CaseTaskID = taxpayerNotification.CaseTaskID;\r\n                alertNotification.CreatedInAdhocTask = taxpayerNotification.CreatedInAdhocTask;\r\n\r\n                UpdateTaxpayerNotificationAddressList(alertNotification, transaction);\r\n\r\n                // if the taxpayerID == 0, then the UpdateTaxpayerNotificationAddressList fails to get any addresses to send to,\r\n                // so the notification is never sent. \r\n                // if the original notification has email addresses to send to, we will fall back to those.\r\n                // if the original notification has no email addresses, there\u0027s not much else we can do really. it will fail to send.\r\n                if (alertNotification.TaxpayerID == 0 \u0026\u0026 alertNotification.AddressList.Count == 0)\r\n                {\r\n                    alertNotification.AddEmailAddresses(taxpayerNotification.AddressList);\r\n                }\r\n\r\n                ITaxpayerSummarySearchResult taxpayerSummarySearchResult = taxpayerSummarySearcher.FindByTaxpayerID(taxpayerNotification.TaxpayerID);\r\n\r\n                Dictionary\u003Cstring, string\u003E tokens = new Dictionary\u003Cstring, string\u003E\r\n                {\r\n                    { \u0022\u003CTIN\u003E\u0022, taxpayerSummarySearchResult?.TaxpayerNumber ?? string.Empty },\r\n                    { \u0022\u003CTaxpayerName\u003E\u0022, taxpayerSummarySearchResult?.TaxpayerName ?? string.Empty }\r\n                };\r\n\r\n                notificationTokenParser.UpdateNotificationTokens(alertNotification, tokens, alertNotification.EmailAddress);\r\n            }\r\n\r\n            return alertNotification;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher",
								"DataTorque.Iho.Interfaces.Calculators.INotificationTokenParser"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetString",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment TodayDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification LanguageID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification TaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification TaxTypeId",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification CaseID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification CaseTaskID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification CreatedInAdhocTask",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification AddressList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification AddEmailAddresses",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher FindByTaxpayerID",
								"DataTorque.Iho.Interfaces.Calculators.INotificationTokenParser UpdateNotificationTokens",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification EmailAddress"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "CanBeSentAlert",
						"Hash": "DC33EC8CBEEFE54B0C84D1DE635E3B186D25536F7ED6AD02F55969348B5EB86C",
						"Parameters": [
							"System.Int32 taxpayerID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            ITaxpayerWebUserSearchCriteria searchCriteria = criteriaFactory.CreateTaxpayerWebUserSearchCriteria();\r\n            searchCriteria.TaxpayerId = taxpayerID;\r\n            ITaxpayerWebUserSearchResult taxpayerWebUserSearchResult = taxpayerWebUserSearcher.SearchByTaxpayer(searchCriteria, transaction).FirstOrDefault(sc =\u003E !string.IsNullOrEmpty(sc.EmailAddress));\r\n\r\n            return taxpayerWebUserSearchResult != null;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Criteria.ITaxpayerWebUserSearchCriteria",
								"DataTorque.Iho.Interfaces.Factories.ICriteriaFactory",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearchResult",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearcher",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.ICriteriaFactory CreateTaxpayerWebUserSearchCriteria",
								"DataTorque.Iho.Interfaces.Criteria.ITaxpayerWebUserSearchCriteria TaxpayerId",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearcher SearchByTaxpayer",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearchResult EmailAddress"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "UpdateTaxpayerNotificationAddressList",
						"Hash": "64A13EB35F84DB63FD1EBA8510C1BBE260AF6F2674F3047E6EFF8BB745EFEA7E",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification taxpayerNotification",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            // if the taxpayerID is 0, then there is no taxpayer to look up data for, we need to rely solely on the email address provided via\r\n            // the taxpayerNotification. This is the case for Online Registration draft notices, since no taxpayer has been created yet, but there\r\n            // is an email address associated with the user creating the registration.\r\n            if (taxpayerNotification.TaxpayerID == 0)\r\n            {\r\n                return;\r\n            }\r\n\r\n            taxpayerNotification.AddressList.Clear();\r\n\r\n            int taxTypeId = taxpayerNotification.TaxTypeId.GetValueOrDefault();\r\n            if (taxTypeId == 0 \u0026\u0026 taxpayerNotification.CaseID \u003E 0)\r\n            {\r\n                taxTypeId = GetTaxTypeIDFromCase(taxpayerNotification.CaseID.GetValueOrDefault(), transaction);\r\n            }\r\n\r\n            // Add web user email addresses\r\n            ITaxpayerWebUserSearchCriteria searchCriteria = criteriaFactory.CreateTaxpayerWebUserSearchCriteria();\r\n            searchCriteria.TaxpayerId = taxpayerNotification.TaxpayerID;\r\n            searchCriteria.TaxTypeId = taxTypeId;\r\n\r\n            IList\u003Cstring\u003E webUserEmailAddresses = taxpayerWebUserSearcher.SearchByTaxpayer(searchCriteria, transaction)\r\n                                                                                                           .Where(r =\u003E !string.IsNullOrEmpty(r.EmailAddress))\r\n                                                                                                           .Select(x =\u003E x.EmailAddress)\r\n                                                                                                           .Distinct()\r\n                                                                                                           .ToList();\r\n            if (webUserEmailAddresses.Count \u003E 0)\r\n            {\r\n                taxpayerNotification.AddEmailAddresses(webUserEmailAddresses);\r\n            }\r\n\r\n            // Add accountant email address if not already in the list\r\n            string email = GetAccountantEmail(taxpayerNotification.TaxpayerID, taxTypeId, transaction);\r\n            if (!string.IsNullOrEmpty(email) \u0026\u0026 !taxpayerNotification.AddressList.Contains(email))\r\n            {\r\n                taxpayerNotification.AddEmailAddress(email);\r\n            }\r\n\r\n            // Add taxpayer\u0027s primary email if not already in the list\r\n            ITaxpayerSummarySearchResult taxpayerSummarySearchResult = taxpayerSummarySearcher.FindByTaxpayerID(taxpayerNotification.TaxpayerID, transaction);\r\n\r\n            if (taxpayerSummarySearchResult != null\r\n                \u0026\u0026 taxpayerSummarySearchResult.HasEmail\r\n                \u0026\u0026 !taxpayerNotification.AddressList.Contains(taxpayerSummarySearchResult.Email))\r\n            {\r\n                taxpayerNotification.AddEmailAddress(taxpayerSummarySearchResult.Email);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.Criteria.ITaxpayerWebUserSearchCriteria",
								"DataTorque.Iho.Interfaces.Factories.ICriteriaFactory",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearcher",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearchResult",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification TaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification AddressList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification TaxTypeId",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification CaseID",
								"DataTorque.Iho.Interfaces.Factories.ICriteriaFactory CreateTaxpayerWebUserSearchCriteria",
								"DataTorque.Iho.Interfaces.Criteria.ITaxpayerWebUserSearchCriteria TaxpayerId",
								"DataTorque.Iho.Interfaces.Criteria.ITaxpayerWebUserSearchCriteria TaxTypeId",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearcher SearchByTaxpayer",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearchResult EmailAddress",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification AddEmailAddresses",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification AddEmailAddress",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher FindByTaxpayerID",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult HasEmail",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult Email"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.String",
						"Name": "GetAccountantEmail",
						"Hash": "7453F0AD98A311DB73EF42DC9C3C11E8CAE3B0A0CAE419D671B4BC014606DBDF",
						"Parameters": [
							"System.Int32 taxpayerID",
							"System.Int32 taxTypeID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            if (taxpayerID == 0)\r\n            {\r\n                return string.Empty;\r\n            }\r\n\r\n            // try and find a taxpayer, if we don\u0027t find one, then there\u0027s no accountant.\r\n            ITaxpayerSummarySearchResult taxpayerSummarySearchResult = taxpayerSummarySearcher.FindByTaxpayerID(taxpayerID, transaction);\r\n            if (taxpayerSummarySearchResult == null)\r\n            {\r\n                return string.Empty;\r\n            }\r\n\r\n            int accountantID = taxpayerSummarySearchResult.AccountantID.GetValueOrDefault();\r\n\r\n            // if we don\u0027t have a taxpayer accountant, we might have a tax type accountant, so try and find one.\r\n            if (accountantID == 0 \u0026\u0026 taxTypeID \u003E 0)\r\n            {\r\n                ITaxpayerRepository taxpayerRepository = ServiceLocator.Current.GetInstance\u003CITaxpayerRepository\u003E();\r\n\r\n                ITaxpayer taxpayer = taxpayerRepository.FindTaxpayer(taxpayerID);\r\n\r\n                // no taxpayer, so no accountant.\r\n                if (taxpayer == null)\r\n                {\r\n                    return string.Empty;\r\n                }\r\n\r\n                // if we have a registration for the tax type which contains an accountantID, then use it.\r\n                IRegistration registration = taxpayer.TaxTypeRegistrations.FirstOrDefault(reg =\u003E reg.TaxTypeID == taxTypeID);\r\n                if (registration != null \u0026\u0026 registration.AccountantID.GetValueOrDefault() \u003E 0)\r\n                {\r\n                    accountantID = registration.AccountantID.GetValueOrDefault();\r\n                }\r\n            }\r\n\r\n            if (accountantID \u003E 0)\r\n            {\r\n                IAccountantRepository accountantRepository = ServiceLocator.Current.GetInstance\u003CIAccountantRepository\u003E();\r\n\r\n                DataTable accountantsDataTable = accountantRepository.FindAccountantEmailAddresses(accountantID);\r\n\r\n                if (accountantsDataTable.Rows.Count \u003E 0)\r\n                {\r\n                    return ParsingHelper.ParseString(accountantsDataTable.Rows[0][\u0022EmailAddress\u0022]);\r\n                }\r\n            }\r\n\r\n            return string.Empty;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration",
								"DataTorque.Iho.Interfaces.Repositories.IAccountantRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearcher FindByTaxpayerID",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerSummarySearchResult AccountantID",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository FindTaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer TaxTypeRegistrations",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration TaxTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration AccountantID",
								"DataTorque.Iho.Interfaces.Repositories.IAccountantRepository FindAccountantEmailAddresses"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Int32",
						"Name": "GetTaxTypeIDFromCase",
						"Hash": "FC402C16F89A59776ECAE8124C12EC85C5D979DFB99C5093477B778E3E8D7E1B",
						"Parameters": [
							"System.Int32 caseId",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            int taxTypeId = 0;\r\n\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_GetTaxTypeIDByCaseID\u0022, transaction);\r\n            query.AddParameter(\u0022@CaseID\u0022, SqlDbType.Int, 0, caseId);\r\n\r\n            query.ExecuteQuery();\r\n\r\n            if (query.DataTable.Rows.Count \u003E 0)\r\n            {\r\n                taxTypeId = ParsingHelper.ParseInt(query.DataTable.Rows[0][\u0022TaxTypeID\u0022]);\r\n            }\r\n\r\n            return taxTypeId;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_GetTaxTypeIDByCaseID"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "DataTorque.IsleOfMan.BusinessObjects.Repositories.EmailAlertStatus",
						"Name": "CheckIfAlertCanBeSentWithReason",
						"Hash": "DD74700DE515FAF0280C28E4FA7C86699A54652259AC293F3F979DB5B2561E48",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification alertNotification",
							"System.String configurationCode",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            // These config codes are for online registration.\r\n            // Special case: no Taxpayer ID exists at this point.\r\n            if (configurationCode == \u0022TaxpayerRegistrationOnlineRequestExpiring\u0022 || configurationCode == \u0022TaxpayerRegistrationOnlineRequestConfirmation\u0022)\r\n            {\r\n                return EmailAlertStatus.CanBeSent;\r\n            }\r\n\r\n            ITaxpayerWebUserSearchCriteria searchCriteria = criteriaFactory.CreateTaxpayerWebUserSearchCriteria();\r\n            searchCriteria.TaxpayerId = alertNotification.TaxpayerID;\r\n            ITaxpayerWebUserSearchResult taxpayerWebUserSearchResult = taxpayerWebUserSearcher.SearchByTaxpayer(searchCriteria).FirstOrDefault(sc =\u003E !string.IsNullOrEmpty(sc.EmailAddress));\r\n\r\n            if (taxpayerWebUserSearchResult == null)\r\n            {\r\n                return EmailAlertStatus.NoValidWebUser;\r\n            }\r\n\r\n            IUser user = userRepository.FindUser(taxpayerWebUserSearchResult.UserID);\r\n\r\n            int emailAlertFrequency = systemConstantRepository.GetInteger(\u0022EmailAlertFrequency\u0022, 5);\r\n\r\n            ITaxpayerNotification lastAlert = FindNotificationsByEmailAddress(alertNotification.AddressList[0], transaction)\r\n                                                .OrderByDescending(n =\u003E n.CreatedDate)\r\n                                                .FirstOrDefault(n =\u003E n.ConfigurationID == alertNotification.ConfigurationID);\r\n\r\n            if (lastAlert == null\r\n                || lastAlert.CreatedDate \u003C user.LoggedOn.GetValueOrDefault()\r\n                || lastAlert.CreatedDate.AddDays(emailAlertFrequency) \u003C executingEnvironment.CurrentUTCDateTime)\r\n            {\r\n                return EmailAlertStatus.CanBeSent;\r\n            }\r\n\r\n            return EmailAlertStatus.MessageLimitExceeded;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.EmailAlertStatus",
								"DataTorque.Iho.Interfaces.Criteria.ITaxpayerWebUserSearchCriteria",
								"DataTorque.Iho.Interfaces.Factories.ICriteriaFactory",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearchResult",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearcher",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUser",
								"DataTorque.Iho.Interfaces.Repositories.IUserRepository",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.EmailAlertStatus CanBeSent",
								"DataTorque.Iho.Interfaces.Factories.ICriteriaFactory CreateTaxpayerWebUserSearchCriteria",
								"DataTorque.Iho.Interfaces.Criteria.ITaxpayerWebUserSearchCriteria TaxpayerId",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification TaxpayerID",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearcher SearchByTaxpayer",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearchResult EmailAddress",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.EmailAlertStatus NoValidWebUser",
								"DataTorque.Iho.Interfaces.Repositories.IUserRepository FindUser",
								"DataTorque.Iho.Interfaces.Search.ITaxpayerWebUserSearchResult UserID",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification AddressList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification CreatedDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerNotification ConfigurationID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IUser LoggedOn",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment CurrentUTCDateTime",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.EmailAlertStatus MessageLimitExceeded"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "System.String",
						"Name": "UpdateEmailTokens",
						"Hash": "3F44FC144B1A603971F156CDCFE041E85189197A3E480613C4A34327C7FF8282",
						"Parameters": [
							"System.String emailBody",
							"System.String insertContent"
						],
						"Body": {
							"BodyText": "            // currently this may return content with bad \u003C/br\u003E tags, so we need to catch this and fix it.\r\n            string result = base.UpdateEmailTokens(emailBody, insertContent);\r\n\r\n            if (result.Contains(\u0022\u003C/br\u003E\u0022))\r\n            {\r\n                result = result.Replace(\u0022\u003C/br\u003E\u0022, \u0022\u003Cbr /\u003E\u0022);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.Repositories.NotificationRepository"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "PaymentRepository",
				"BaseType": "DataTorque.Iho.BusinessObjects.Repositories.PaymentRepository",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Decimal",
						"Name": "GetTotalPaymentAmountForDebtArrangementPlan",
						"Hash": "FC185A31BA393B10333D5655348746EB913FD22D69E7C0510D60192D44585EA4",
						"Parameters": [
							"System.Int32 taxpayerId",
							"System.Int32 debtId",
							"System.Decimal amount",
							"System.Nullable numberOfPayments",
							"System.DateTime proposedDebtArrangementStartDate",
							"System.DateTime firstPaymentDate",
							"System.Int32 daysInPaymentFrequencyPeriod",
							"System.Decimal firstPaymentAmount",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "\t\t\t// use long service timeout when running the installment calculation\r\n\t\t\tint timeout = systemConstantRepository.GetInteger(\u0022LongProcedureTimeout\u0022, 120);\r\n\r\n\t\t\tIScalarQuery query = queryFactory.CreateScalarQuery(\u0022spf_GetTotalPaymentAmountForDebtArrangementPlan\u0022, transaction, timeout);\r\n\t\t\tquery.AddParameter(\u0022@TaxpayerID\u0022, SqlDbType.Int, 0, taxpayerId);\r\n\t\t\tquery.AddParameter(\u0022@DebtID\u0022, SqlDbType.Int, 0, debtId);\r\n\t\t\tquery.AddParameter(\u0022@Amount\u0022, SqlDbType.Money, 0, amount);\r\n\t\t\tquery.AddParameter(\u0022@NumberOfPayments\u0022, SqlDbType.Int, 0, numberOfPayments);\r\n\t\t\tquery.AddParameter(\u0022@ProposedDebtArrangementStartDate\u0022, SqlDbType.DateTime, 0, proposedDebtArrangementStartDate);\r\n\t\t\tquery.AddParameter(\u0022@FirstPaymentDate\u0022, SqlDbType.DateTime, 0, firstPaymentDate);\r\n\t\t\tquery.AddParameter(\u0022@DaysInPaymentFrequencyPeriod\u0022, SqlDbType.Int, 0, daysInPaymentFrequencyPeriod);\r\n\t\t\tquery.AddParameter(\u0022@FirstPaymentAmount\u0022, SqlDbType.Money, 0, firstPaymentAmount);\r\n\r\n\t\t\tquery.ExecuteQuery();\r\n\r\n\t\t\treturn ParsingHelper.ParseDecimal(query.ScalarValue);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_GetTotalPaymentAmountForDebtArrangementPlan"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "RefundRepository",
				"BaseType": "DataTorque.Iho.BusinessObjects.Repositories.RefundRepository",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.BusinessObjects.IBankExtract",
						"Name": "CreateBankExtract",
						"Hash": "70AB19B6AECA1D34520F8866CD8E086439F2957A06712AE86C2E360A381DA0F5",
						"Body": {
							"BodyText": "            return new IOMBankExtract(queryFactory, fileSizeFormatter, systemConstantRepository, bankExtractValidator, repaymentSetupRepository, currentUserRepository, taxpayerRepository, userRepository, configurationRepository);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IBankExtract",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.Calculators.IFileSizeFormatter",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.Repositories.IRepaymentSetupRepository",
								"DataTorque.Iho.Interfaces.Repositories.ICurrentUserRepository",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository",
								"DataTorque.Iho.Interfaces.Repositories.IUserRepository",
								"DataTorque.Iho.Interfaces.Repositories.IConfigurationRepository"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.BusinessObjects.IRefundExtract",
						"Name": "CreateRefundExtract",
						"Hash": "8495CDC2A7496F99B88F2325F7400BEFFEC8F4524AB2AAC0802FA71F7C89B3D5",
						"Body": {
							"BodyText": "            return new IOMRefundExtract(this, criteriaFactory, taxpayerAccountCalculator, taxTypeRepository, currentUserRepository, standardLookupRepository);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IRefundExtract",
								"DataTorque.Iho.Interfaces.Repositories.IRefundRepository",
								"DataTorque.Iho.Interfaces.Factories.ICriteriaFactory",
								"DataTorque.Iho.Interfaces.Calculators.ITaxpayerAccountCalculator",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository",
								"DataTorque.Iho.Interfaces.Repositories.ICurrentUserRepository",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "void",
						"Name": "SaveFile",
						"Hash": "4D351E74E3EB836F80897F768C1A7EFB864F14F359B2AC7BD173FA2FF18AB34E",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IBankExtract bankExtract"
						],
						"Body": {
							"BodyText": "            base.SaveFile(bankExtract);\r\n\r\n            if (bankExtract is IOMBankExtract iomBankExtract)\r\n            {\r\n                if (!string.IsNullOrEmpty(iomBankExtract.HeaderFileContents))\r\n                {\r\n                    string headerFilePath = systemConstantRepository.GetString(\u0022BankExtractHeaderFilePath\u0022);\r\n\r\n                    if (!string.IsNullOrEmpty(headerFilePath))\r\n                    {\r\n                        headerFilePath = Path.Combine(headerFilePath, $\u0022{bankExtract.FileName}_header.csv\u0022);\r\n                    }\r\n                    else\r\n                    {\r\n                        headerFilePath = iomBankExtract.HeaderFilePath;\r\n                    }\r\n\r\n                    using (StreamWriter file = new StreamWriter(headerFilePath, true))\r\n                    {\r\n                        file.Write(iomBankExtract.HeaderFileContents);\r\n                    }\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.Repositories.RefundRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IBankExtract",
								"DataTorque.IsleOfMan.BusinessObjects.IOMBankExtract",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.IOMBankExtract HeaderFileContents",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetString",
								"DataTorque.Iho.Interfaces.BusinessObjects.IBankExtract FileName",
								"DataTorque.IsleOfMan.BusinessObjects.IOMBankExtract HeaderFilePath"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "ValidToSaveToRefund",
						"Hash": "22DAF6C97605BD2DBA3F5959F77A98812138661F55B48B49B11DEA8F3855EE19",
						"Parameters": [
							"System.Int32 taxpayerID",
							"System.Int32 taxTypeID",
							"System.Int32 yearID",
							"System.Int32 periodID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IScalarQuery query = queryFactory.CreateScalarQuery(\u0022spf_ValidToSaveToRefund\u0022, transaction);\r\n            query.AddParameter(\u0022@TaxpayerID\u0022, SqlDbType.Int, 0, taxpayerID);\r\n            query.AddParameter(\u0022@TaxTypeID\u0022, SqlDbType.Int, 0, taxTypeID);\r\n            query.AddParameter(\u0022@YearID\u0022, SqlDbType.Int, 0, yearID);\r\n            query.AddParameter(\u0022@PeriodID\u0022, SqlDbType.Int, 0, periodID);\r\n            query.ExecuteQuery();\r\n\r\n            bool validToSaveToRefund = ParsingHelper.ParseBool(query.ScalarValue ?? true);\r\n\r\n            return validToSaveToRefund;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_ValidToSaveToRefund"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.Boolean",
						"Name": "StillInCaseSelection",
						"Hash": "D4FF5A44C41EF73C821D1E08B9AFE2EDC0C4CBCE505CF44F6F7339BCBA9A5DCC",
						"Parameters": [
							"System.Int32 taxpayerID",
							"System.Int32 taxTypeID",
							"System.Int32 yearID",
							"System.Int32 periodID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IScalarQuery query = queryFactory.CreateScalarQuery(\u0022spf_StillInCaseSelection\u0022, transaction);\r\n            query.AddParameter(\u0022@TaxpayerID\u0022, SqlDbType.Int, 0, taxpayerID);\r\n            query.AddParameter(\u0022@TaxTypeID\u0022, SqlDbType.Int, 0, taxTypeID);\r\n            query.AddParameter(\u0022@YearID\u0022, SqlDbType.Int, 0, yearID);\r\n            query.AddParameter(\u0022@PeriodID\u0022, SqlDbType.Int, 0, periodID);\r\n            query.ExecuteQuery();\r\n\r\n            bool stillInCaseSelection = ParsingHelper.ParseBool(query.ScalarValue ?? true);\r\n\r\n            return stillInCaseSelection;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_StillInCaseSelection"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "CalculateRefundInterest",
						"Hash": "E8D6E9D47D78A4190AE0194AF023255A1AF4F80863B8171236B72DB77BDE9C02",
						"Parameters": [
							"System.Int32 taxpayerID",
							"System.Int32 taxTypeID",
							"System.Int32 yearID",
							"System.Int32 periodID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            INonQuery query = queryFactory.CreateNonQuery(\u0022spf_CalculateRefundInterest\u0022, transaction);\r\n            query.AddParameter(\u0022@TaxpayerID\u0022, SqlDbType.Int, 0, taxpayerID);\r\n            query.AddParameter(\u0022@TaxTypeID\u0022, SqlDbType.Int, 0, taxTypeID);\r\n            query.AddParameter(\u0022@PeriodID\u0022, SqlDbType.Int, 0, periodID);\r\n            query.AddParameter(\u0022@YearID\u0022, SqlDbType.Int, 0, yearID);\r\n            query.ExecuteQuery();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_CalculateRefundInterest"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateNonQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "RepaymentSetupRepository",
				"BaseType": "Unlinked.BaseRepository",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Repositories.IRepaymentSetupRepository"
				],
				"Methods": [
					{
						"Modifiers": "public",
						"ReturnType": "System.Collections.Generic.IList",
						"Name": "GetRepaymentSetups",
						"Hash": "8FB802C1F1DAF423622FD4024CB9CEAF1C097633BC585E5837A71601A8C618F4",
						"Body": {
							"BodyText": "            List\u003CIRepaymentSetup\u003E repaymentSetups = new List\u003CIRepaymentSetup\u003E();\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_RepaymentSetup_SelectAll\u0022);\r\n           \r\n            query.ExecuteQuery();\r\n\r\n            foreach (DataRow dataRow in query.DataTable.Rows)\r\n            {\r\n                IRepaymentSetup repaymentSetup = new RepaymentSetup();\r\n                repaymentSetupMapper.MapFromDataRow(repaymentSetup, dataRow);\r\n                repaymentSetups.Add(repaymentSetup);\r\n            }\r\n\r\n            return repaymentSetups;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IRepaymentSetup",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBusinessObjectMapper"
							],
							"ReferencedStoredProcedures": [
								"spf_RepaymentSetup_SelectAll"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBusinessObjectMapper MapFromDataRow"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "ScheduledProcessIntegrationRepository",
				"BaseType": "Unlinked.BaseRepository",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Repositories.IScheduledProcessIntegrationRepository"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IScheduledProcessIntegration",
						"Name": "CreateScheduledProcessIntegration",
						"Hash": "B36B92FF15AA9EA2D5FC33D01EECD156A82A82A9BD373F8C6718FA46CAF16D9A",
						"Body": {
							"BodyText": "            return new ScheduledProcessIntegration();\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IScheduledProcessIntegration"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IScheduledProcessIntegration",
						"Name": "FindScheduledProcessIntegration",
						"Hash": "4FD8ACA218C4644A10D2B376C34116534E460D4A41483472926EB21F160097BD",
						"Parameters": [
							"System.Int32 scheduledProcessIntegrationID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IScheduledProcessIntegration scheduledProcessIntegration = null;\r\n\r\n            if (scheduledProcessIntegrationID \u003E 0)\r\n            {\r\n                IDataTableQuery query = queryBuilder.BuildLoadQueryForTable(\u0022ScheduledProcessIntegration\u0022, scheduledProcessIntegrationID, transaction);\r\n                query.ExecuteQuery();\r\n\r\n                if (query.DataTable.Rows.Count \u003E 0)\r\n                {\r\n                    scheduledProcessIntegration = CreateScheduledProcessIntegration();\r\n                    scheduledProcessIntegrationMapper.MapFromDataRow(scheduledProcessIntegration, query.DataTable.Rows[0]);\r\n                }\r\n            }\r\n\r\n            return scheduledProcessIntegration;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IScheduledProcessIntegration",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBusinessObjectMapper"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildLoadQueryForTable",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBusinessObjectMapper MapFromDataRow"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "StrikeOffDissolutionRepository",
				"BaseType": "Unlinked.BaseRepository",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Repositories.IStrikeOffDissolutionRepository"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
						"Name": "CreateStrikeOffDissolutionFileHeader",
						"Hash": "46BA13C2DBC1139516E8633836C9AD9BE125013E2B5AB1F6437651226BD04D68",
						"Body": {
							"BodyText": "            StrikeOffDissolutionFileHeader strikeOffDissolutionFileHeader = new StrikeOffDissolutionFileHeader(queryBuilder, strikeOffDissolutionFileHeaderValidator);\r\n            strikeOffDissolutionFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n            strikeOffDissolutionFileHeader.UpdateInitialValues();\r\n            return strikeOffDissolutionFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.StrikeOffDissolutionFileHeader",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.StrikeOffDissolutionFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.BusinessObjects.StrikeOffDissolutionFileHeader UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail",
						"Name": "CreateStrikeOffDissolutionFileDetail",
						"Hash": "2B44E93D5DEE66B46FE349F1B7025BC4BDCC9EF0F6453A0669245A5BFAA15F91",
						"Body": {
							"BodyText": "            StrikeOffDissolutionFileDetail strikeOffDissolutionFileDetail = new StrikeOffDissolutionFileDetail(queryBuilder, strikeOffDissolutionFileDetailValidator);\r\n            strikeOffDissolutionFileDetail.UpdateInitialValues();\r\n            return strikeOffDissolutionFileDetail;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.StrikeOffDissolutionFileDetail",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.StrikeOffDissolutionFileDetail UpdateInitialValues"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
						"Name": "ReadStrikeOffDissolutionFileData",
						"Hash": "8F45D5350044D112DE52040FAC4F1BFD9172DA6D83F50DB2C30DBABD94FFD71D",
						"Parameters": [
							"System.String filePath",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IStrikeOffDissolutionFileHeader strikeOffDissolutionFileHeader = CreateStrikeOffDissolutionFileHeader();\r\n\r\n            strikeOffDissolutionFileHeader.FileName = Path.GetFileName(filePath);\r\n            strikeOffDissolutionFileHeader.FileProcessedDate = DateTime.Today;\r\n\r\n            //validate the file while it is new to check the file extension\r\n            if (!strikeOffDissolutionFileHeader.Validate())\r\n            {\r\n                SaveHeaderValidationErrors(strikeOffDissolutionFileHeader, ImportFileStatus.Failed, transaction);\r\n            }\r\n            else if (!ValidateStrikeOffDissolutionFileChecksum(strikeOffDissolutionFileHeader, filePath, transaction))\r\n            {\r\n                SaveHeaderValidationErrors(strikeOffDissolutionFileHeader, ImportFileStatus.Failed, transaction);\r\n            }\r\n            //only map if the file extension is validated otherwise reading/mapping is pointless  \r\n            else if (SaveStrikeOffDissolutionFileHeader(strikeOffDissolutionFileHeader, transaction))\r\n            {\r\n                strikeOffDissolutionFileHeader.ImportFileStatus = ImportFileStatus.PartialImport;\r\n\r\n                strikeOffDissolutionFileHeader.FileContents = ReadFileContents(filePath);\r\n\r\n                SaveStrikeOffDissolutionFileHeader(strikeOffDissolutionFileHeader, transaction);\r\n\r\n            }\r\n\r\n            return strikeOffDissolutionFileHeader;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader FileName",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader FileProcessedDate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader FileContents"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "ImportStrikeOffDissolutionFileDetails",
						"Hash": "26FE8CD197763C0D17A323F1E384A6B618117A8BB5472270D034926AAE88CBF0",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader strikeOffDissolutionFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success;\r\n            try\r\n            {\r\n                if (strikeOffDissolutionFileHeader.FileContents == null || strikeOffDissolutionFileHeader.FileContents.Length \u003C 2)\r\n                {\r\n                    success = false;\r\n                    strikeOffDissolutionFileHeader.Notes = \u0022Importing the strike off and dissolution file content failed because of the following error: No data in the file\u0022;\r\n                    strikeOffDissolutionFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveStrikeOffDissolutionFileHeader(strikeOffDissolutionFileHeader, transaction);\r\n                }\r\n                else if (IsInvalidColumnCount(strikeOffDissolutionFileHeader.FileContents[0], 4))\r\n                {\r\n                    success = false;\r\n                    strikeOffDissolutionFileHeader.Notes = \u0022Importing the  strike off and dissolution file content failed because of the following error: Invalid column count\u0022;\r\n                    strikeOffDissolutionFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                    SaveStrikeOffDissolutionFileHeader(strikeOffDissolutionFileHeader, transaction);\r\n                }\r\n                else\r\n                {\r\n                    bool hasInvalidRows = MapStrikeOffDissolutionFileDetails(strikeOffDissolutionFileHeader, transaction);\r\n                    if (hasInvalidRows)\r\n                    {\r\n                        success = false;\r\n                        List\u003CIStrikeOffDissolutionFileDetail\u003E invalidRows = strikeOffDissolutionFileHeader.StrikeOffDissolutionFileDetails\r\n                                                                                                              .Where(d =\u003E d.StrikeOffDissolutionFileDetailStatus == ImportFileDetailStatus.Invalid)\r\n                                                                                                              .ToList();\r\n                        StringBuilder rowValidationErrors = new StringBuilder();\r\n                        foreach (IStrikeOffDissolutionFileDetail row in invalidRows)\r\n                        {\r\n                            rowValidationErrors.Append(\u0022 Row \u0022 \u002B (strikeOffDissolutionFileHeader.StrikeOffDissolutionFileDetails.IndexOf(row) \u002B 2) \u002B \u0022: \u0022 \u002B row.ErrorMessage);\r\n                        }\r\n\r\n                        strikeOffDissolutionFileHeader.Notes = $\u0022Importing the strike off and dissolution file content failed because of the following errors:{rowValidationErrors}\u0022;\r\n                        strikeOffDissolutionFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n                        SaveStrikeOffDissolutionFileHeader(strikeOffDissolutionFileHeader, transaction);\r\n                    }\r\n                    else\r\n                    {\r\n                        SaveStrikeOffDissolutionFileDetails(strikeOffDissolutionFileHeader.StrikeOffDissolutionFileDetails, transaction);\r\n\r\n                        ProcessStrikeOffDissolutionFileDetails(strikeOffDissolutionFileHeader, transaction);\r\n\r\n                        success = CompleteStrikeOffDissolutionFileProcessing(strikeOffDissolutionFileHeader, transaction);\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                success = false;\r\n                strikeOffDissolutionFileHeader.Notes = $\u0022Importing the strike off and dissolution file content failed because of the following error: {ex.Message}\u0022;\r\n                strikeOffDissolutionFileHeader.ImportFileStatus = ImportFileStatus.Failed;\r\n            }\r\n\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader StrikeOffDissolutionFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail StrikeOffDissolutionFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveStrikeOffDissolutionFileHeader",
						"Hash": "70C3EDD0F8D2DA9AF98DC026B21BD684FC630F1D1C549D5AD4ECEB625F831BB0",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader strikeOffDissolutionFileHeader"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveStrikeOffDissolutionFileHeader, strikeOffDissolutionFileHeader);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveStrikeOffDissolutionFileHeader",
						"Hash": "283EA6212B694FC96B6547AF543321B51AEA1680C51F316AA0E9AE6E75E27761",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader strikeOffDissolutionFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            if (transaction == null)\r\n            {\r\n                result = SaveStrikeOffDissolutionFileHeader(strikeOffDissolutionFileHeader);\r\n            }\r\n            else\r\n            {\r\n                if (strikeOffDissolutionFileHeader.IsDirty() || strikeOffDissolutionFileHeader.IsSavedWhenClean)\r\n                {\r\n                    strikeOffDissolutionFileHeader.DistributedSQLTransaction = transaction;\r\n                    if (strikeOffDissolutionFileHeader.Validate())\r\n                    {\r\n                        result = strikeOffDissolutionFileHeader.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader SaveData"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveStrikeOffDissolutionFileDetail",
						"Hash": "F709910C5605F5C372BF6219A0E25A74C4DA457DB692CC7C988300467348463B",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail strikeOffDissolutionFileDetail"
						],
						"Body": {
							"BodyText": "            return ExecuteInTransaction(SaveStrikeOffDissolutionFileDetail, strikeOffDissolutionFileDetail);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveStrikeOffDissolutionFileDetail",
						"Hash": "D138F70F3B0DB3D49AA24299D157151DD6826B86995560B115D3CBE2C9DE425B",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail strikeOffDissolutionFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n\r\n            if (transaction == null)\r\n            {\r\n                result = SaveStrikeOffDissolutionFileDetail(strikeOffDissolutionFileDetail);\r\n            }\r\n            else\r\n            {\r\n                if (strikeOffDissolutionFileDetail.IsDirty() || strikeOffDissolutionFileDetail.IsSavedWhenClean)\r\n                {\r\n                    strikeOffDissolutionFileDetail.DistributedSQLTransaction = transaction;\r\n                    if (strikeOffDissolutionFileDetail.Validate())\r\n                    {\r\n                        result = strikeOffDissolutionFileDetail.SaveData();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    result = true;\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail IsDirty",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail IsSavedWhenClean",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail DistributedSQLTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail SaveData"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "System.Boolean",
						"Name": "SaveStrikeOffDissolutionFileDetails",
						"Hash": "0616CB253ECB6ECF600FF8C1F34D51459EE67FA0B75AF239A603329BEFEB98DC",
						"Parameters": [
							"System.Collections.Generic.IList strikeOffDissolutionFileDetails",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool result = false;\r\n            foreach (IStrikeOffDissolutionFileDetail recordFileDetail in strikeOffDissolutionFileDetails)\r\n            {\r\n                result = SaveStrikeOffDissolutionFileDetail(recordFileDetail, transaction);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsInvalidColumnCount",
						"Hash": "9ED839CF5B41B5D24671534303AC75757763A0448EC7EFB0DB7A4C882D014BFC",
						"Parameters": [
							"System.String stringToCheck",
							"System.Int32 expectedColumnCount"
						],
						"Body": {
							"BodyText": "            string[] columnData = stringToCheck.Split(\u0027,\u0027);\r\n            return columnData.Length != expectedColumnCount;\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveDetailValidationErrors",
						"Hash": "A20CBDA6FC617F7EC067A07ABD4200627EC34FF6143E995859EFDFFEC4A12B14",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail strikeOffDissolutionFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            strikeOffDissolutionFileDetail.StrikeOffDissolutionFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n\r\n            strikeOffDissolutionFileDetail.ErrorMessage = string.Join(\u0022; \u0022, strikeOffDissolutionFileDetail.ValidationErrorDictionary.Values);\r\n\r\n            SaveStrikeOffDissolutionFileDetail(strikeOffDissolutionFileDetail, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail StrikeOffDissolutionFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "",
						"Name": "ReadFileContents",
						"Hash": "A185D1D80C861672A2DB2B0F8005CC5CA765C4552CE9CAE782547ECD6F2D7019",
						"Parameters": [
							"System.String filePath"
						],
						"Body": {
							"BodyText": "            //Read in the file contents\r\n            using (StreamReader reader = new StreamReader(filePath))\r\n            {\r\n                List\u003Cstring\u003E fileContents = new List\u003Cstring\u003E();\r\n                string line;\r\n\r\n                while ((line = reader.ReadLine()) != null)\r\n                {\r\n                    fileContents.Add(line);\r\n                }\r\n\r\n                return fileContents.ToArray();\r\n            }\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveHeaderValidationErrors",
						"Hash": "D04188B9BAA95F8684AEA09AC7B39E111085FD5EE6BFF2C9D18EB460A63CA2A5",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader strikeOffDissolutionFileHeader",
							"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus fileStatus",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            strikeOffDissolutionFileHeader.ImportFileStatus = fileStatus;\r\n\r\n            strikeOffDissolutionFileHeader.Notes = string.Join(\u0022; \u0022, strikeOffDissolutionFileHeader.ValidationErrorDictionary.Values);\r\n\r\n            SaveStrikeOffDissolutionFileHeader(strikeOffDissolutionFileHeader, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader Notes",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateStrikeOffDissolutionFileChecksum",
						"Hash": "A3EC17A5F69EA0D954040D54969BF08ACD5884F0229DA98C963E3BB1F78F7F99",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader strikeOffDissolutionFileHeader",
							"System.String filePath",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool isValid = false;\r\n\r\n            using (MD5 md5 = MD5.Create())\r\n            {\r\n                using (FileStream stream = File.OpenRead(filePath))\r\n                {\r\n                    byte[] hash = md5.ComputeHash(stream);\r\n                    strikeOffDissolutionFileHeader.Checksum = BitConverter.ToString(hash).Replace(\u0022-\u0022, \u0022\u0022).ToLowerInvariant();\r\n                }\r\n            }\r\n\r\n            if (IsExistingStrikeOffDissolutionFileHeader(strikeOffDissolutionFileHeader.Checksum, transaction))\r\n            {\r\n                strikeOffDissolutionFileHeader.ValidationErrorDictionary.Add(\u0022Checksum\u0022, \u0022File checksum already exists in the database.\u0022);\r\n            }\r\n            else\r\n            {\r\n                isValid = true;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader Checksum",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsExistingStrikeOffDissolutionFileHeader",
						"Hash": "62874419993399E132D4F848B4D120A2AF3BC69891F03D56DF5B9CFFE004FED4",
						"Parameters": [
							"System.String checksum",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "\r\n            IDataTableQuery query = queryFactory.CreateDataTableQuery(\u0022spf_StrikeOffDissolutionFileHeader_FindByChecksum\u0022, transaction);\r\n            query.AddParameter(\u0022@Checksum\u0022, SqlDbType.NVarChar, 0, checksum);\r\n            query.ExecuteQuery();\r\n\r\n            return query.DataTable.Rows.Count \u003E 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_StrikeOffDissolutionFileHeader_FindByChecksum"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "MapStrikeOffDissolutionFileDetails",
						"Hash": "CE17C61F38CA823F49C068CC1F185D32E6B772A3B080F582504DE3C26845550F",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader strikeOffDissolutionFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool hasInvalidRows = false;\r\n            foreach (string record in strikeOffDissolutionFileHeader.FileContents.Skip(1).Take(strikeOffDissolutionFileHeader.FileContents.Length - 1))\r\n            {\r\n                IStrikeOffDissolutionFileDetail strikeOffDissolutionFileDetail = CreateStrikeOffDissolutionFileDetail();\r\n                strikeOffDissolutionFileDetail.StrikeOffDissolutionFileHeaderID = strikeOffDissolutionFileHeader.ID;\r\n                strikeOffDissolutionFileDetail.Record = record;\r\n                strikeOffDissolutionFileDetail.StrikeOffDissolutionFileDetailStatus = ImportFileDetailStatus.ReadingFileContent;\r\n                strikeOffDissolutionFileHeader.StrikeOffDissolutionFileDetails.Add(strikeOffDissolutionFileDetail);\r\n\r\n                strikeOffDissolutionFileDetailMapper.MapFromFile(strikeOffDissolutionFileDetail, strikeOffDissolutionFileDetail.Record);\r\n                if (strikeOffDissolutionFileDetail.Validate())\r\n                {\r\n                    bool shouldIgnore = SkipProccessingStrikeOffDissolutionFileDetail(strikeOffDissolutionFileDetail, transaction);\r\n                    strikeOffDissolutionFileDetail.StrikeOffDissolutionFileDetailStatus = shouldIgnore ? ImportFileDetailStatus.Ignored : ImportFileDetailStatus.Processing;\r\n                }\r\n                else\r\n                {\r\n                    strikeOffDissolutionFileDetail.StrikeOffDissolutionFileDetailStatus = ImportFileDetailStatus.Invalid;\r\n                    strikeOffDissolutionFileDetail.ErrorMessage = string.Join(\u0022; \u0022, strikeOffDissolutionFileDetail.ValidationErrorDictionary.Values);\r\n                    hasInvalidRows = true;\r\n                }\r\n            }\r\n            return hasInvalidRows;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Mappers.IStrikeOffDissolutionFileDetailMapper",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader FileContents",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail StrikeOffDissolutionFileHeaderID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail Record",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail StrikeOffDissolutionFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus ReadingFileContent",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader StrikeOffDissolutionFileDetails",
								"DataTorque.IsleOfMan.Interfaces.Mappers.IStrikeOffDissolutionFileDetailMapper MapFromFile",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Processing",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Invalid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail ValidationErrorDictionary"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "SkipProccessingStrikeOffDissolutionFileDetail",
						"Hash": "D07AB4AD99D30FAA01B060B9ADE6C2DE74461DA947CA6FE7411D6F2698B086A0",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail strikeOffDissolutionFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool shouldIgnore = false;\r\n            if (strikeOffDissolutionFileDetail.StrikeOffDissolution.Equals(\u0022Strike Off\u0022) || strikeOffDissolutionFileDetail.StrikeOffDissolution.Equals(\u0022Dissolution\u0022))\r\n            {\r\n                strikeOffDissolutionFileDetail.TaxpayerID = strikeOffDissolutionFileParser.GetTaxpayerID(strikeOffDissolutionFileDetail.CompanyNumber, transaction);\r\n                if (strikeOffDissolutionFileDetail.TaxpayerID.HasValue)\r\n                {\r\n                    if (OpenChangeOfRegistrationCaseExists(strikeOffDissolutionFileDetail.TaxpayerID.Value, transaction))\r\n                    {\r\n                        shouldIgnore = true;\r\n                        strikeOffDissolutionFileDetail.ErrorMessage = \u0022Open Change of Registration Case\u0022;\r\n                    }\r\n\r\n                }\r\n                else\r\n                {\r\n                    shouldIgnore = true;\r\n                    strikeOffDissolutionFileDetail.ErrorMessage = \u0022No link to TIN\u0022;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                shouldIgnore = true;\r\n                strikeOffDissolutionFileDetail.ErrorMessage = \u0022Invalid value in Strike Off / Dissolution\u0022;\r\n            }\r\n            return shouldIgnore;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IStrikeOffDissolutionFileParser",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail StrikeOffDissolution",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IStrikeOffDissolutionFileParser GetTaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail CompanyNumber",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "OpenChangeOfRegistrationCaseExists",
						"Hash": "FEFFE68F2C19FFE789B4F1D9FDE0FE566EC2CD682CE51580C5173AD82FC537A6",
						"Parameters": [
							"System.Int32 taxpayerID",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IStandardLookupItem caseTypeCode = standardLookupRepository.FindItemByCode(\u0022CaseType\u0022, \u0022CHG\u0022);\r\n            IScalarQuery query = queryFactory.CreateScalarQuery(\u0022spf_CaseTypeOpenCasesByTaxpayer\u0022, transaction);\r\n            query.AddParameter(\u0022TaxpayerID\u0022, SqlDbType.Int, 0, taxpayerID);\r\n            query.AddParameter(\u0022CaseTypeId\u0022, SqlDbType.NVarChar, 0, caseTypeCode.ID);\r\n            query.ExecuteQuery();\r\n\r\n            return (int)query.ScalarValue \u003E 0;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedStoredProcedures": [
								"spf_CaseTypeOpenCasesByTaxpayer"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByCode",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem ID",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ProcessStrikeOffDissolutionFileDetails",
						"Hash": "A150E33CDB3797C0779C92DFA558693697D364B5BD08152DAFC79CC889BB180A",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader strikeOffDissolutionFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            foreach (IStrikeOffDissolutionFileDetail strikeOffDissolutionFileDetail in strikeOffDissolutionFileHeader.StrikeOffDissolutionFileDetails)\r\n            {\r\n                //only process if there were no errors from mapping\r\n                if (strikeOffDissolutionFileDetail.StrikeOffDissolutionFileDetailStatus != ImportFileDetailStatus.Ignored)\r\n                {\r\n                    if (strikeOffDissolutionFileDetail.Validate())\r\n                    {\r\n                        if (SaveStrikeOffDissolutionFileDetail(strikeOffDissolutionFileDetail, transaction))\r\n                        {\r\n                            //This to double check if a CHG case is created by any other records from the same file\r\n                            if (OpenChangeOfRegistrationCaseExists(strikeOffDissolutionFileDetail.TaxpayerID ?? 0, transaction))\r\n                            {\r\n                                strikeOffDissolutionFileDetail.StrikeOffDissolutionFileDetailStatus = ImportFileDetailStatus.Ignored;\r\n                                strikeOffDissolutionFileDetail.ErrorMessage = \u0022Open Change of Registration Case\u0022;\r\n                            }\r\n                            else if (CreateChangeOfRegistrationCase(strikeOffDissolutionFileDetail, transaction))\r\n                            {\r\n                                strikeOffDissolutionFileHeader.TotalProcessedStrikeOffDissolutionCount \u002B= 1;\r\n\r\n                                strikeOffDissolutionFileDetail.StrikeOffDissolutionFileDetailStatus = string.IsNullOrEmpty(strikeOffDissolutionFileDetail.ErrorMessage) ? ImportFileDetailStatus.Imported : ImportFileDetailStatus.Failed;\r\n                            }\r\n                            else\r\n                            {\r\n                                strikeOffDissolutionFileDetail.StrikeOffDissolutionFileDetailStatus = ImportFileDetailStatus.Failed;\r\n                            }\r\n\r\n                            SaveStrikeOffDissolutionFileDetail(strikeOffDissolutionFileDetail, transaction);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        SaveDetailValidationErrors(strikeOffDissolutionFileDetail, transaction);\r\n                    }\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader StrikeOffDissolutionFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail StrikeOffDissolutionFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail ErrorMessage",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader TotalProcessedStrikeOffDissolutionCount",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Imported",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "CreateChangeOfRegistrationCase",
						"Hash": "09E1FC1AF615621D78B6270AF7E26242B4D3D0534B117F21C77061A883D27C39",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail strikeOffDissolutionFileDetail",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool success = true;\r\n\r\n            try\r\n            {\r\n                string date = strikeOffDissolutionFileDetail.DateOfStatusChange.HasValue ? strikeOffDissolutionFileDetail.DateOfStatusChange.Value.ToString(\u0022dd MMM yyyy\u0022):\u0022\u0022;\r\n                using (ICaseWorkflowState state = caseGenerator.GenerateCaseForTaxpayer(strikeOffDissolutionFileDetail.TaxpayerID ?? 0, \u0022CHG\u0022, \u0022GRS\u0022, null, $\u0022{strikeOffDissolutionFileDetail.StrikeOffDissolution} - {date}\u0022, transaction))\r\n                {\r\n                    strikeOffDissolutionFileDetail.CaseID = state.CurrentCase.ID;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                strikeOffDissolutionFileDetail.ErrorMessage = $\u0022Creating the change of registration case is failed because of the following error: {ex.Message}\u0022;\r\n                success = false;\r\n            }\r\n            return success;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ICaseGenerator",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail DateOfStatusChange",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ICaseGenerator GenerateCaseForTaxpayer",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail TaxpayerID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail StrikeOffDissolution",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail CaseID",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseWorkflowState CurrentCase",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail ErrorMessage"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "CompleteStrikeOffDissolutionFileProcessing",
						"Hash": "A871BAB743B8F7DB69E7D22D248A3591C92ECFD3594C779C89FFDE327EBAAA8D",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader strikeOffDissolutionFileHeader",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            if (strikeOffDissolutionFileHeader.Validate())\r\n            {\r\n                strikeOffDissolutionFileHeader.ImportFileStatus = strikeOffDissolutionFileHeader.StrikeOffDissolutionFileDetails.Any(d =\u003E d.StrikeOffDissolutionFileDetailStatus == ImportFileDetailStatus.Failed ||\r\n                                                                                                                                                d.StrikeOffDissolutionFileDetailStatus == ImportFileDetailStatus.Ignored) ? ImportFileStatus.PartialImport : ImportFileStatus.Complete;\r\n                SaveStrikeOffDissolutionFileHeader(strikeOffDissolutionFileHeader, transaction);\r\n            }\r\n            else\r\n            {\r\n                SaveHeaderValidationErrors(strikeOffDissolutionFileHeader, ImportFileStatus.PartialImport, transaction);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader Validate",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader StrikeOffDissolutionFileDetails",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail StrikeOffDissolutionFileDetailStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Failed",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus Ignored",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus Complete"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "TaxpayerIdentificationRepository",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Repositories.ITaxpayerIdentificationRepository"
				],
				"Methods": [
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult",
						"Name": "GetTaxpayerIDFromVATNumber",
						"Hash": "338764C76200484005ACF493A1BA55543FD109E45A8D237A0D14BBA2580247B1",
						"Parameters": [
							"System.String vatNumber",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            if (!string.IsNullOrEmpty(vatNumber))\r\n            {\r\n                IDataTableQuery taxpayerIDQuery = queryFactory.CreateDataTableQuery(\u0022spf_GetTaxpayerIDFromVATNumber\u0022, transaction);\r\n                taxpayerIDQuery.AddParameter(\u0022VATNumber\u0022, SqlDbType.NVarChar, 0, vatNumber);\r\n                taxpayerIDQuery.ExecuteQuery();\r\n\r\n                if (taxpayerIDQuery.DataTable.Rows.Count \u003E 0)\r\n                {\r\n                    ITaxpayerIDSearchResult taxpayerIdSearchResult = new TaxpayerIDSearchResult();\r\n                    taxpayerIdSearchResult.TaxpayerID = ParsingHelper.ParseInt(taxpayerIDQuery.DataTable.Rows[0][\u0022TaxpayerID\u0022]);\r\n                    return taxpayerIdSearchResult;\r\n                }\r\n            }\r\n\r\n            return null;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult"
							],
							"ReferencedStoredProcedures": [
								"spf_GetTaxpayerIDFromVATNumber"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult TaxpayerID"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult",
						"Name": "GetTaxpayerIDFromCompanyNumber",
						"Hash": "7087CCA7178A95468279505CE63CE0E54923FC34EA12178600BFEA6DA61103FE",
						"Parameters": [
							"System.String companyNumber",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            if (!string.IsNullOrEmpty(companyNumber))\r\n            {\r\n                IDataTableQuery taxpayerIDQuery = queryFactory.CreateDataTableQuery(\u0022spf_GetTaxpayerIDFromCompanyNumber\u0022, transaction);\r\n                taxpayerIDQuery.AddParameter(\u0022companyNumber\u0022, SqlDbType.NVarChar, 0, companyNumber);\r\n                taxpayerIDQuery.ExecuteQuery();\r\n\r\n                if (taxpayerIDQuery.DataTable.Rows.Count \u003E 0)\r\n                {\r\n                    ITaxpayerIDSearchResult taxpayerIdSearchResult = new TaxpayerIDSearchResult();\r\n                    taxpayerIdSearchResult.TaxpayerID = ParsingHelper.ParseInt(taxpayerIDQuery.DataTable.Rows[0][\u0022TaxpayerID\u0022]);\r\n                    return taxpayerIdSearchResult;\r\n                }\r\n            }\r\n\r\n            return null;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult"
							],
							"ReferencedStoredProcedures": [
								"spf_GetTaxpayerIDFromCompanyNumber"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult TaxpayerID"
							]
						}
					},
					{
						"Modifiers": "public virtual",
						"ReturnType": "DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult",
						"Name": "GetTaxpayerIDFromDefermentAccountNumber",
						"Hash": "4697264BDA7CD8A9C40CF3DD6721BCD74D1ECFF13C0E7277FA3E59A6BB7F8AB6",
						"Parameters": [
							"System.String defermentAccountNumber",
							"System.String importersEORI",
							"System.String taxType",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            if (!string.IsNullOrEmpty(defermentAccountNumber))\r\n            {\r\n                IDataTableQuery taxpayerIDQuery = queryFactory.CreateDataTableQuery(\u0022spf_GetTaxpayerIDFromDefermentAccountNumber\u0022, transaction);\r\n                taxpayerIDQuery.AddParameter(\u0022DefermentAccountNumber\u0022, SqlDbType.NVarChar, 0, defermentAccountNumber);\r\n                if (taxType == \u0022CUSDV\u0022)\r\n                {\r\n                    // For CUSDV, both DefermentAccountNumber and ImportersEORI are required\r\n                    if (string.IsNullOrEmpty(importersEORI))\r\n                    {\r\n                        return null;\r\n                    }\r\n                    taxpayerIDQuery.AddParameter(\u0022ImportersEORI\u0022, SqlDbType.NVarChar, 0, importersEORI);\r\n                }\r\n\r\n                taxpayerIDQuery.AddParameter(\u0022TaxTypeCode\u0022, SqlDbType.NVarChar, 0, taxType);\r\n                taxpayerIDQuery.ExecuteQuery();\r\n\r\n                if (taxpayerIDQuery.DataTable.Rows.Count \u003E 0)\r\n                {\r\n                    ITaxpayerIDSearchResult taxpayerIdSearchResult = new TaxpayerIDSearchResult();\r\n                    taxpayerIdSearchResult.TaxpayerID = ParsingHelper.ParseInt(taxpayerIDQuery.DataTable.Rows[0][\u0022TaxpayerID\u0022]);\r\n                    return taxpayerIdSearchResult;\r\n                }\r\n            }\r\n\r\n            return null;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult"
							],
							"ReferencedStoredProcedures": [
								"spf_GetTaxpayerIDFromDefermentAccountNumber"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateDataTableQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDataTableQuery DataTable",
								"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult TaxpayerID"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "TaxpayerRepository",
				"BaseType": "DataTorque.Iho.BusinessObjects.Repositories.TaxpayerRepository",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
						"Name": "CreateTaxpayerByConfiguration",
						"Hash": "C485E71D617636CBD7F4335ECEC4AE2DA7F2CDDD7DC31C2EF63DFE847CF222BF",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerTypeConfiguration taxpayerConfiguration",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            ITaxpayer taxpayer = new Taxpayer(queryBuilder, configurationRepository, standardLookupRepository, systemConstantRepository, taxpayerValidator, taxpayerNumberFormatter,\r\n                                              executingEnvironment, taxpayerAgentAssignmentRepository, flatRateRepository);\r\n\r\n            // MM - configure the taxpayer for the configuration we have passed in (note, this dumps the \r\n            // existing primary contact and replaces with one correctly configured for what we passed in)\r\n            ConfigureTaxpayer(taxpayer, taxpayerConfiguration, transaction);\r\n\r\n            return taxpayer;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.Repositories.IConfigurationRepository",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.ITaxpayerNumberFormatter",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerAgentAssignmentRepository",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRateRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerTypeConfiguration",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "SaveTaxpayer",
						"Hash": "D42C695214C3556CF9069D62BC1609919C88762688DA66338A16A84BDF794274",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer taxpayer",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            RegisterForVATINTTaxType(taxpayer, transaction);\r\n\r\n            RegisterForVATPOATaxType(taxpayer, transaction);\r\n\r\n            return base.SaveTaxpayer(taxpayer, transaction);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.BusinessObjects.Repositories.TaxpayerRepository"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "RegisterForVATINTTaxType",
						"Hash": "9CE33EF857195A0DE0D1DB36A3D9D7A68A967777313137BD9E17CA5C42283DF8",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer taxpayer",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IRegistration vatRegistration = taxpayer.TaxTypeRegistrations.FirstOrDefault(ttr =\u003E ttr.TaxType.Code.Equals(\u0022VAT\u0022, StringComparison.InvariantCultureIgnoreCase));\r\n            if (vatRegistration == null || !vatRegistration.Selected || vatRegistration.Inactive)\r\n            {\r\n                return;\r\n            }\r\n\r\n            IReturnFrequency annualFrequency = taxReturnDesignRepository.GetReturnFrequenciesForTaxType(vatRegistration.TaxTypeID, transaction).FirstOrDefault(rf =\u003E rf.Code == \u0022Annual\u0022);\r\n            if (annualFrequency == null || vatRegistration.CurrentRegistrationReturnFrequency.ReturnFrequencyID != annualFrequency.ID)\r\n            {\r\n                return;\r\n            }\r\n\r\n            bool annInterim = false;\r\n            int annInterimFreq = 0;\r\n            int annInterimBalanceMonth = 0;\r\n\r\n            foreach (IRegistrationAnswer registrationAnswer in vatRegistration.Answers)\r\n            {\r\n                IRegistrationQuestion question = registrationConfigurationRepository.FindRegistrationQuestion(registrationAnswer.RegistrationQuestionID);\r\n                if (question != null \u0026\u0026 question.Code == \u0022AnnInterim\u0022)\r\n                {\r\n                    annInterim = registrationAnswer.AnswerAsBool;\r\n                }\r\n                else if (question != null \u0026\u0026 question.Code == \u0022AnnInterimFreq\u0022)\r\n                {\r\n                    annInterimFreq = registrationAnswer.AnswerAsInt;\r\n                }\r\n                else if (question != null \u0026\u0026 question.Code == \u0022AnnInterimBalMo\u0022)\r\n                {\r\n                    annInterimBalanceMonth = registrationAnswer.AnswerAsInt;\r\n                }\r\n            }\r\n\r\n            if (!annInterim)\r\n            {\r\n                return;\r\n            }\r\n\r\n            IRegistration vatintRegistration = taxpayer.TaxTypeRegistrations.FirstOrDefault(ttr =\u003E ttr.TaxType.Code.Equals(\u0022VATINT\u0022, StringComparison.InvariantCultureIgnoreCase));\r\n\r\n            if (vatintRegistration != null \u0026\u0026 vatintRegistration.Selected)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (vatintRegistration == null)\r\n            {\r\n                ITaxType taxType = taxTypeRepository.FindByCode(\u0022VATINT\u0022, transaction);\r\n\r\n                vatintRegistration = registrationRepository.CreateRegistration();\r\n                vatintRegistration.TaxTypeID = taxType.ID;\r\n                //vatintRegistration.Description = taxType.Description; //TC TODO - Figure out if this now just gets magically loaded in \r\n                vatintRegistration.CurrentTaxpayer = taxpayer;\r\n                taxpayer.TaxTypeRegistrations.Add(vatintRegistration);\r\n            }\r\n\r\n            vatintRegistration.Selected = true;\r\n\r\n            vatintRegistration.FrequencyHistory[0].CommenceDate = vatRegistration.CurrentCommenceDate;\r\n            vatintRegistration.FrequencyHistory[0].BalanceMonthNumber = annInterimBalanceMonth;\r\n\r\n            string annInterimFrequency = codeTypeRepository.FindItemsByCode(\u0022RegistrationQuestionVATQ27\u0022).FirstOrDefault(option =\u003E option.ID == annInterimFreq)?.Description ?? \u0022Monthly\u0022;\r\n\r\n            if (annInterimFrequency.Contains(\u0022Quarterly\u0022))\r\n            {\r\n                string returnFreqCode = GetReturnFrequencyCodeFromBalanceMonth(annInterimBalanceMonth);\r\n                vatintRegistration.FrequencyHistory[0].ReturnFrequencyID = taxReturnDesignRepository.GetReturnFrequenciesForTaxType(vatintRegistration.TaxTypeID, transaction).FirstOrDefault(rf =\u003E rf.Code == returnFreqCode)?.ID;\r\n            }\r\n            else if (annInterimFrequency.Contains(\u0022Monthly\u0022))\r\n            {\r\n                vatintRegistration.FrequencyHistory[0].ReturnFrequencyID = taxReturnDesignRepository.GetReturnFrequenciesForTaxType(vatintRegistration.TaxTypeID, transaction).FirstOrDefault(rf =\u003E rf.Code == \u0022Monthly\u0022)?.ID;\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnDesignRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationQuestion",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationConfigurationRepository",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationRepository",
								"DataTorque.Iho.Interfaces.Common.IListItem",
								"DataTorque.Iho.Interfaces.Repositories.ICodeTypeRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer TaxTypeRegistrations",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration TaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration Selected",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration Inactive",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnDesignRepository GetReturnFrequenciesForTaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration TaxTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency Code",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration CurrentRegistrationReturnFrequency",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency ID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration Answers",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationConfigurationRepository FindRegistrationQuestion",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer RegistrationQuestionID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationQuestion Code",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer AnswerAsBool",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer AnswerAsInt",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository FindByCode",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationRepository CreateRegistration",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType ID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration CurrentTaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration FrequencyHistory",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration CurrentCommenceDate",
								"DataTorque.Iho.Interfaces.Repositories.ICodeTypeRepository FindItemsByCode",
								"DataTorque.Iho.Interfaces.Common.IListItem ID"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "RegisterForVATPOATaxType",
						"Hash": "1EB848DAB1BDCFDDA2958C9871BEA6768AE1ADD8820A6A447D90960039CC2C1A",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer taxpayer",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IRegistration vatRegistration = taxpayer.TaxTypeRegistrations.FirstOrDefault(ttr =\u003E ttr.TaxType.Code.Equals(\u0022VAT\u0022, StringComparison.InvariantCultureIgnoreCase));\r\n            if (vatRegistration == null || !vatRegistration.Selected || vatRegistration.Inactive)\r\n            {\r\n                return; // Not registered for VAT, so cant have VATPOA\r\n            }\r\n\r\n            IReturnFrequency quarterlyFrequency = taxReturnDesignRepository.GetReturnFrequenciesForTaxType(vatRegistration.TaxTypeID, transaction).FirstOrDefault(rf =\u003E rf.Code.StartsWith(\u0022Quarterly\u0022)\r\n                                                                                                                                                                \u0026\u0026 rf.ID == vatRegistration.CurrentRegistrationReturnFrequency.ReturnFrequencyID);\r\n            if (quarterlyFrequency == null)\r\n            {\r\n                return; // VAT is not quarterly, so cant have VATPOA\r\n            }\r\n\r\n            bool poa = false;\r\n\r\n            foreach (IRegistrationAnswer registrationAnswer in vatRegistration.Answers)\r\n            {\r\n                IRegistrationQuestion question = registrationConfigurationRepository.FindRegistrationQuestion(registrationAnswer.RegistrationQuestionID);\r\n                if (question != null \u0026\u0026 question.Code == \u0022POA\u0022)\r\n                {\r\n                    poa = registrationAnswer.AnswerAsBool;\r\n                }\r\n            }\r\n\r\n            if (!poa)\r\n            {\r\n                return; // POA is false, so cant have VATPOA\r\n            }\r\n\r\n            IRegistration vatPOARegistration = taxpayer.TaxTypeRegistrations.FirstOrDefault(ttr =\u003E ttr.TaxType.Code.Equals(\u0022VATPOA\u0022, StringComparison.InvariantCultureIgnoreCase));\r\n\r\n            if (vatPOARegistration != null \u0026\u0026 vatPOARegistration.Selected)\r\n            {\r\n                return; // Already have VATPOA selected. So nothing else to do.\r\n            }\r\n\r\n            if (vatPOARegistration == null)\r\n            {\r\n                // Add the VATPOA reg.\r\n                ITaxType taxType = taxTypeRepository.FindByCode(\u0022VATPOA\u0022, transaction);\r\n\r\n                vatPOARegistration = registrationRepository.CreateRegistration();\r\n                vatPOARegistration.TaxTypeID = taxType.ID;\r\n                //vatPOARegistration.Description = taxType.Description; //TC TODO - Figure out if this now just gets magically loaded in \r\n                vatPOARegistration.CurrentTaxpayer = taxpayer;\r\n\r\n                IRegistrationReturnFrequency returnFrequency = registrationRepository.CreateRegistrationReturnFrequencyForRegistration(vatPOARegistration);\r\n                vatPOARegistration.FrequencyHistory.Add(returnFrequency);\r\n\r\n                taxpayer.TaxTypeRegistrations.Add(vatPOARegistration);\r\n            }\r\n            // POA is paid monthly (2 (or 3) out of 3 per quarter at least)\r\n            string returnFreqCode = \u0022Monthly\u0022;\r\n\r\n            // Make it selected\r\n            vatPOARegistration.Selected = true;\r\n            // Commences and balance month are the same as the VAT (so that can manually add if required. POAStart is used for auto generation only)\r\n            vatPOARegistration.FrequencyHistory[0].CommenceDate = vatRegistration.CurrentCommenceDate;\r\n            vatPOARegistration.FrequencyHistory[0].BalanceMonthNumber = vatRegistration.CurrentRegistrationReturnFrequency.BalanceMonthNumber;\r\n            // Lookup the Monthly Frequency\r\n            vatPOARegistration.FrequencyHistory[0].ReturnFrequencyID = taxReturnDesignRepository.GetReturnFrequenciesForTaxType(vatPOARegistration.TaxTypeID, transaction).FirstOrDefault(rf =\u003E rf.Code == returnFreqCode)?.ID; ;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnDesignRepository",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationQuestion",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationConfigurationRepository",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer TaxTypeRegistrations",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration TaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration Selected",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration Inactive",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnDesignRepository GetReturnFrequenciesForTaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration TaxTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency Code",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency ID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration CurrentRegistrationReturnFrequency",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration Answers",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationConfigurationRepository FindRegistrationQuestion",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer RegistrationQuestionID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationQuestion Code",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer AnswerAsBool",
								"DataTorque.Iho.Interfaces.Repositories.ITaxTypeRepository FindByCode",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationRepository CreateRegistration",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType ID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration CurrentTaxpayer",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationRepository CreateRegistrationReturnFrequencyForRegistration",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration FrequencyHistory",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration CurrentCommenceDate"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.String",
						"Name": "GetReturnFrequencyCodeFromBalanceMonth",
						"Hash": "1E4111704FFB2D3CBB027CDE7AD11C285A2173E8FD3BD571720E09B8D54F5BEE",
						"Parameters": [
							"System.Int32 balanceMonth"
						],
						"Body": {
							"BodyText": "            string returnFrequencyCode = String.Empty;\r\n\r\n            switch (balanceMonth)\r\n            {\r\n                case 1:\r\n                    returnFrequencyCode = \u0022QuarterlyVATINT5\u0022;\r\n                    break;\r\n                case 2:\r\n                    returnFrequencyCode = \u0022QuarterlyVATINT6\u0022;\r\n                    break;\r\n                case 3:\r\n                    returnFrequencyCode = \u0022QuarterlyVATINT7\u0022;\r\n                    break;\r\n                case 4:\r\n                    returnFrequencyCode = \u0022QuarterlyVATINT8\u0022;\r\n                    break;\r\n                case 5:\r\n                    returnFrequencyCode = \u0022QuarterlyVATINT9\u0022;\r\n                    break;\r\n                case 6:\r\n                    returnFrequencyCode = \u0022QuarterlyVATINT10\u0022;\r\n                    break;\r\n                case 7:\r\n                    returnFrequencyCode = \u0022QuarterlyVATINT11\u0022;\r\n                    break;\r\n                case 8:\r\n                    returnFrequencyCode = \u0022QuarterlyVATINT12\u0022;\r\n                    break;\r\n                case 9:\r\n                    returnFrequencyCode = \u0022QuarterlyVATINT1\u0022;\r\n                    break;\r\n                case 10:\r\n                    returnFrequencyCode = \u0022QuarterlyVATINT2\u0022;\r\n                    break;\r\n                case 11:\r\n                    returnFrequencyCode = \u0022QuarterlyVATINT3\u0022;\r\n                    break;\r\n                case 12:\r\n                    returnFrequencyCode = \u0022QuarterlyVATINT4\u0022;\r\n                    break;\r\n            }\r\n\r\n            return returnFrequencyCode;\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Repositories",
				"Name": "TaxReturnRepository",
				"BaseType": "DataTorque.Iho.BusinessObjects.Repositories.TaxReturnRepository",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem",
						"Name": "CreateTaxReturnItem",
						"Hash": "FE6FEA30D60D03E8784B03481631A8AF574E88CDA7FB274AE0573D10E8630A93",
						"Body": {
							"BodyText": "            return new TaxReturnItem(queryBuilder, taxReturnItemValidator, taxReturnUpdater, taxReturnLookupDataCalculator);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnItem",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.Iho.Interfaces.Calculators.ITaxReturnUpdater",
								"DataTorque.Iho.Interfaces.Calculators.ITaxReturnLookupDataCalculator"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "void",
						"Name": "AddAutoRefundMessageQueueEntry",
						"Hash": "4939C0AA79F84EA4A2D32417D8912E784D02A192BE81194E2B89061CEFBDA7C9",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn taxReturn",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            IMessageQueue message = messageQueueRepository.CreateMessage();\r\n            message.MessageType = \u0022AutoRefund\u0022;\r\n            messageQueueRepository.AddMessageParameter(message, \u0022TaxReturnID\u0022, taxReturn.ID);\r\n            messageQueueRepository.AddMessageParameter(message, \u0022TaxpayerID\u0022, taxReturn.TaxpayerID);\r\n            message.DistributedSQLTransaction = transaction;\r\n            message.SaveData();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue",
								"DataTorque.Iho.Interfaces.Repositories.IMessageQueueRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IMessageQueueRepository CreateMessage",
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue MessageType",
								"DataTorque.Iho.Interfaces.Repositories.IMessageQueueRepository AddMessageParameter",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn ID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn TaxpayerID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue DistributedSQLTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue SaveData"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "ReverseTaxReturn",
						"Hash": "E457BF880E181106D16AA3CA3FDD57A26234592F41A00D6BB11A36CD679BCB1C",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn taxReturn",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            INonQuery query = queryFactory.CreateNonQuery(\u0022spf_ReverseTaxReturn\u0022, transaction);\r\n            query.AddParameter(\u0022@TaxReturnID\u0022, SqlDbType.Int, 0, taxReturn.ID == 0 ? taxReturn.PreviousID : taxReturn.ID);\r\n            query.AddParameter(\u0022@PaymentDueDate\u0022, SqlDbType.DateTime, 0, taxReturn.PaymentDueDate);\r\n            query.AddParameter(\u0022@NewTaxPayable\u0022, SqlDbType.Money, 0, taxReturn.TaxPayable);\r\n            query.AddParameter(\u0022@NewReturnIsCorrect\u0022, SqlDbType.Bit, 0, taxReturn.Correct);\r\n            query.AddParameter(\u0022@NewAssessmentReasonID\u0022, SqlDbType.Int, 0, taxReturn.AssessmentReasonID);\r\n            query.ExecuteQuery();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn"
							],
							"ReferencedStoredProcedures": [
								"spf_ReverseTaxReturn"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateNonQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn ID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn PreviousID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn PaymentDueDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn TaxPayable",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn Correct",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn AssessmentReasonID",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "ScheduledProcessIntegration",
				"BaseType": "Unlinked.BaseReadOnlyBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IScheduledProcessIntegration"
				],
				"Properties": [
					"System.String Code",
					"System.String Description",
					"DataTorque.IsleOfMan.Interfaces.Integration.ScheduledProcessIntegrationType IntegrationType",
					"System.String FolderPath",
					"System.String FileName",
					"System.String XsdFilePath",
					"System.String StoredProcedureName",
					"System.String FolderPathSystemConstant",
					"System.String SummaryEmailSystemConstant"
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Search",
				"Name": "TaxpayerIDSearchResult",
				"BaseType": "Unlinked.BaseSearchResult",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.Search.ITaxpayerIDSearchResult"
				],
				"Properties": [
					"System.Int32 TaxpayerID",
					"System.Boolean MatchFound",
					"System.String ErrorMessage"
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Services",
				"Name": "AutoRefundProcessor",
				"BaseType": "System.Object",
				"InterfaceTypes": [
					"DataTorque.Iho.Interfaces.Services.IAutoRefundProcessor"
				],
				"Methods": [
					{
						"Modifiers": "public",
						"ReturnType": "System.String",
						"Name": "ProcessMessage",
						"Hash": "612E97B367A245D2694A4A6B53533BE7AC01703C2A064BB5C23A7C0F455E8C4F",
						"Parameters": [
							"DataTorque.Iho.Interfaces.Services.IApplicationServerAgent applicationServerAgent",
							"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue message",
							"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction transaction"
						],
						"Body": {
							"BodyText": "            string result = string.Empty;\r\n\r\n            message.ErrorMessage = null;\r\n            message.DistributedSQLTransaction = transaction;\r\n\r\n            try\r\n            {\r\n\r\n                // The message MUST contain TaxReturnID and TaxpayerID\r\n\r\n                int taxReturnID = message.GetParameterIntValue(\u0022TaxReturnID\u0022);\r\n                int taxpayerID = message.GetParameterIntValue(\u0022TaxpayerID\u0022);\r\n\r\n                if (taxReturnID \u003C= 0)\r\n                {\r\n                    throw new InvalidOperationException($\u0022The TaxReturn ID ({taxReturnID}) is invalid for message ({message.ID})\u0022);\r\n                }\r\n\r\n                if (taxpayerID \u003C= 0)\r\n                {\r\n                    throw new InvalidOperationException($\u0022The Taxpayer ID ({taxpayerID}) is invalid for message ({message.ID})\u0022);\r\n                }\r\n\r\n                ITaxReturnHeader taxReturnHeader = taxReturnRepository.FindTaxReturnHeaderByTaxReturn(taxReturnID, taxpayerID, transaction);\r\n\r\n                if (taxReturnHeader == null || taxReturnHeader.ID \u003C= 0)\r\n                {\r\n                    throw new InvalidOperationException($\u0022Could not find TaxReturnHeader for TaxReturn ID ({taxReturnID}) for message ({message.ID})\u0022);\r\n                }\r\n\r\n                //Check if there\u0027s already a REFUND case for this taxpayer for the given year, period and tax type\r\n                ICaseSearchCriteria caseSearchCriteria = criteriaFactory.CreateCaseSearchCriteria();\r\n                caseSearchCriteria.TaxpayerID = taxpayerID;\r\n                caseSearchCriteria.TaxTypeID = taxReturnHeader.TaxTypeID;\r\n                caseSearchCriteria.ShowClosed = false;\r\n                caseSearchCriteria.CaseTypeID = caseConfigurationRepository.FindCaseTypeByCode(\u0022REF\u0022).ID;\r\n\r\n                IList\u003CICaseSearchResult\u003E existingRefundCases = caseSearcher.SearchCasesForTaxpayer(caseSearchCriteria, transaction).Where(c =\u003E !c.Closed).ToList();\r\n\r\n                foreach (ICaseSearchResult existingRefundCase in existingRefundCases)\r\n                {\r\n                    ICase refCase = caseRepository.FindCase(existingRefundCase.ID, transaction);\r\n                    ICaseTask task = caseRepository.FindCaseTasksByCase(refCase.CaseInfo, transaction).FirstOrDefault(t =\u003E t is RefundReviewScopeTask);\r\n\r\n                    if (task?.BusinessObject is IRefundRequest rr)\r\n                    {\r\n                        int count = rr.SelectedRefundPeriods.Count(period =\u003E period.YearID == taxReturnHeader.YearID \u0026\u0026 period.PeriodID == taxReturnHeader.PeriodID);\r\n                        if (count \u003E 0)\r\n                        {\r\n                            return string.Empty;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //Check if there\u0027s already an ASSESSMENT case for this taxpayer for the given year, period and tax type\r\n                caseSearchCriteria = criteriaFactory.CreateCaseSearchCriteria();\r\n                caseSearchCriteria.TaxpayerID = taxpayerID;\r\n                caseSearchCriteria.TaxTypeID = taxReturnHeader.TaxTypeID;\r\n                caseSearchCriteria.YearID = taxReturnHeader.YearID;\r\n                caseSearchCriteria.PeriodID = taxReturnHeader.PeriodID;\r\n                caseSearchCriteria.ShowClosed = false;\r\n                caseSearchCriteria.CaseTypeID = caseConfigurationRepository.FindCaseTypeByCode(\u0022ASC\u0022).ID;\r\n\r\n                IList\u003CICaseSearchResult\u003E existingAssessmentCases = caseSearcher.SearchCasesForTaxpayer(caseSearchCriteria, transaction).Where(c =\u003E !c.Closed).ToList();\r\n\r\n                // IMPORTANT: This section contains the exclusive modifications for the Isle of Man version, distinct from the original IHO implementation.\r\n                // The added code ensures that taxpayers with an open or active appeals case are ineligible for automatic refund approvals. \r\n                // This is a temporary workaround necessary until the IHO base version allows for more straightforward overriding.\r\n                // Please pay special attention to this block during refactoring or updates to maintain compatibility with future IHO changes.\r\n\r\n                bool stillInCaseSelection = ((RefundRepository)refundRepository).StillInCaseSelection(taxpayerID, taxReturnHeader.TaxTypeID, taxReturnHeader.YearID, taxReturnHeader.PeriodID, transaction);\r\n\r\n                if (stillInCaseSelection)\r\n                {\r\n                    ((TaxReturnRepository)taxReturnRepository).AddAutoRefundMessageQueueEntry(taxReturnHeader.TaxReturn, transaction); \r\n                }\r\n                else\r\n                {\r\n\r\n                    bool validToSaveToRefund = ((RefundRepository)refundRepository).ValidToSaveToRefund(taxpayerID, taxReturnHeader.TaxTypeID, taxReturnHeader.YearID, taxReturnHeader.PeriodID, transaction);\r\n\r\n                    if (existingAssessmentCases.Count == 0 \u0026\u0026 validToSaveToRefund)\r\n                    {\r\n                        bool res = refundRepository.SaveRefundForTaxReturnHeader(taxReturnHeader, transaction);\r\n\r\n                        if (res)\r\n                        {\r\n                            //Recalculate repayment interest after save the refund.\r\n                            ((RefundRepository)refundRepository).CalculateRefundInterest(taxpayerID, taxReturnHeader.TaxTypeID, taxReturnHeader.YearID, taxReturnHeader.PeriodID, transaction);\r\n                            result = $\u0022Created refund for TaxReturn ID ({taxReturnID}) for message ({message.ID}) if it\u0027s not more than the refund threshold\u0022;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                LogTrace(applicationServerAgent, message, ex);\r\n\r\n                //Save message failure in the queue table\r\n                message.HasFailed = true;\r\n                message.AttemptedDate = executingEnvironment.CurrentDateTime;\r\n                message.ErrorMessage = ex.Message \u002B ex.StackTrace;\r\n                message.SaveData();\r\n\r\n                return ex.Message;\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository",
								"DataTorque.Iho.Interfaces.Criteria.ICaseSearchCriteria",
								"DataTorque.Iho.Interfaces.Factories.ICriteriaFactory",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseType",
								"DataTorque.Iho.Interfaces.Repositories.ICaseConfigurationRepository",
								"DataTorque.Iho.Interfaces.Search.ICaseSearchResult",
								"DataTorque.Iho.Interfaces.Search.ICaseSearcher",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase",
								"DataTorque.Iho.Interfaces.Repositories.ICaseRepository",
								"DataTorque.Iho.Interfaces.CaseManagement.ICaseTask",
								"DataTorque.Iho.BusinessObjects.CaseManagement.Tasks.RefundReviewScopeTask",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRefundRequest",
								"DataTorque.Iho.Interfaces.Search.IRefundEligiblePeriodSearchResult",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.RefundRepository",
								"DataTorque.Iho.Interfaces.Repositories.IRefundRepository",
								"DataTorque.IsleOfMan.BusinessObjects.Repositories.TaxReturnRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.Services.IApplicationServerAgent",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue ErrorMessage",
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue DistributedSQLTransaction",
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue GetParameterIntValue",
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue ID",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnRepository FindTaxReturnHeaderByTaxReturn",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader ID",
								"DataTorque.Iho.Interfaces.Factories.ICriteriaFactory CreateCaseSearchCriteria",
								"DataTorque.Iho.Interfaces.Criteria.ICaseSearchCriteria TaxpayerID",
								"DataTorque.Iho.Interfaces.Criteria.ICaseSearchCriteria TaxTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader TaxTypeID",
								"DataTorque.Iho.Interfaces.Criteria.ICaseSearchCriteria ShowClosed",
								"DataTorque.Iho.Interfaces.Criteria.ICaseSearchCriteria CaseTypeID",
								"DataTorque.Iho.Interfaces.Repositories.ICaseConfigurationRepository FindCaseTypeByCode",
								"DataTorque.Iho.Interfaces.Search.ICaseSearcher SearchCasesForTaxpayer",
								"DataTorque.Iho.Interfaces.Search.ICaseSearchResult Closed",
								"DataTorque.Iho.Interfaces.Repositories.ICaseRepository FindCase",
								"DataTorque.Iho.Interfaces.Search.ICaseSearchResult ID",
								"DataTorque.Iho.Interfaces.Repositories.ICaseRepository FindCaseTasksByCase",
								"DataTorque.Iho.Interfaces.CaseManagement.ICase CaseInfo",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRefundRequest SelectedRefundPeriods",
								"DataTorque.Iho.Interfaces.Search.IRefundEligiblePeriodSearchResult YearID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader YearID",
								"DataTorque.Iho.Interfaces.Search.IRefundEligiblePeriodSearchResult PeriodID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader PeriodID",
								"DataTorque.Iho.Interfaces.Criteria.ICaseSearchCriteria YearID",
								"DataTorque.Iho.Interfaces.Criteria.ICaseSearchCriteria PeriodID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturnHeader TaxReturn",
								"DataTorque.Iho.Interfaces.Repositories.IRefundRepository SaveRefundForTaxReturnHeader",
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue HasFailed",
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue AttemptedDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment CurrentDateTime",
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue SaveData"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "LogTrace",
						"Hash": "D9958475E7C21880A14D5618E7ACAFDD64A466C5092B992C2F1A5A275679CBED",
						"Parameters": [
							"DataTorque.Iho.Interfaces.Services.IApplicationServerAgent applicationServerAgent",
							"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue message",
							"System.Exception ex"
						],
						"Body": {
							"BodyText": "            string log = $\u0022Time: {executingEnvironment.CurrentDateTime:HH:mm:ss.ff}\u0022 \u002B\r\n                         $\u0022 MessageType: {message.MessageType}\u0022 \u002B\r\n                         $\u0022 MessageID: {message.ID}. \u0022 \u002B\r\n                         $\u0022 AgentID: {applicationServerAgent?.ID}\u0022 \u002B\r\n                         $\u0022 AgentGuid: {applicationServerAgent?.Guid}\u0022;\r\n\r\n            if (ex != null)\r\n            {\r\n                loggingFactory.LogExceptionToLogFile(ex, log);\r\n            }\r\n            else\r\n            {\r\n                loggingFactory.LogToLogFile(log);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment",
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue",
								"DataTorque.Iho.Interfaces.Services.IApplicationServerAgent",
								"DataTorque.Iho.Interfaces.Factories.ILoggingFactory"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment CurrentDateTime",
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue MessageType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IMessageQueue ID",
								"DataTorque.Iho.Interfaces.Factories.ILoggingFactory LogExceptionToLogFile",
								"DataTorque.Iho.Interfaces.Factories.ILoggingFactory LogToLogFile"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "StrikeOffDissolutionFileDetail",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail"
				],
				"Properties": [
					"System.Int32 StrikeOffDissolutionFileHeaderID",
					"System.String Record",
					"System.String CompanyNumber",
					"System.String CompanyName",
					"System.String StrikeOffDissolution",
					"System.String DateOfStatusChangeText",
					"System.Nullable DateOfStatusChange",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileDetailStatus StrikeOffDissolutionFileDetailStatus",
					"System.String ErrorMessage",
					"System.Nullable TaxpayerID",
					"System.Nullable CaseID"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return strikeOffDissolutionFileDetailValidator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(strikeOffDissolutionFileDetailValidator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022StrikeOffDissolutionFileHeaderID\u0022, SqlDbType.Int, 0, StrikeOffDissolutionFileHeaderID);\r\n            query.AddParameter(\u0022Record\u0022, SqlDbType.NVarChar, 0, Record);\r\n            query.AddParameter(\u0022CompanyNumber\u0022, SqlDbType.NVarChar, 0, CompanyNumber);\r\n            query.AddParameter(\u0022CompanyName\u0022, SqlDbType.NVarChar, 0, CompanyName);\r\n            query.AddParameter(\u0022StrikeOffDissolution\u0022, SqlDbType.NVarChar, 0, StrikeOffDissolution);\r\n            query.AddParameter(\u0022DateOfStatusChange\u0022, SqlDbType.DateTime, 0, DateOfStatusChange);\r\n            query.AddParameter(\u0022TaxpayerID\u0022, SqlDbType.Int, 0, TaxpayerID);\r\n            query.AddParameter(\u0022CaseID\u0022, SqlDbType.Int, 0, CaseID);\r\n            query.AddParameter(\u0022StrikeOffDissolutionFileDetailStatusID\u0022, SqlDbType.Int, 0, StrikeOffDissolutionFileDetailStatus);\r\n            query.AddParameter(\u0022ErrorMessage\u0022, SqlDbType.NVarChar, 0, ErrorMessage);\r\n\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@StrikeOffDissolutionFileDetailID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "StrikeOffDissolutionFileHeader",
				"BaseType": "Unlinked.BaseMutableBusinessObject",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader"
				],
				"Properties": [
					"System.String FileName",
					"System.String Checksum",
					"System.Nullable FileProcessedDate",
					"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus ImportFileStatus",
					"System.String Notes",
					"System.Collections.Generic.IList StrikeOffDissolutionFileDetails",
					" FileContents",
					"System.Int32 TotalProcessedStrikeOffDissolutionCount",
					"System.String FinalFileName"
				],
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "2D9FED5D4F182B9FAE428D0BF797A78E0B7BD4169E52B7DDC49B1A5A616AE8CB",
						"Body": {
							"BodyText": "            return strikeOffDissolutionFileHeaderValidator.GetValidatedProperties(this);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator GetValidatedProperties"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalValidate",
						"Hash": "D4FA507248D1472A005C1103CD93087EE796B0D9338EC07892FFEBE5CDADF3FB",
						"Body": {
							"BodyText": "            AddValidationResultToValidationErrors(strikeOffDissolutionFileHeaderValidator.Validate(this));\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidator Validate"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            INonQuery query = queryBuilder.BuildSaveQuery(this);\r\n            query.AddParameter(\u0022FileName\u0022, SqlDbType.NVarChar, 0, FileName);\r\n            query.AddParameter(\u0022FinalFileName\u0022, SqlDbType.NVarChar, 0, FinalFileName);\r\n            query.AddParameter(\u0022Checksum\u0022, SqlDbType.NVarChar, 0, Checksum);\r\n            query.AddParameter(\u0022FileProcessedDate\u0022, SqlDbType.DateTime, 0, FileProcessedDate);\r\n            query.AddParameter(\u0022ImportFileStatusID\u0022, SqlDbType.Int, 0, ImportFileStatus);\r\n            query.AddParameter(\u0022Notes\u0022, SqlDbType.NVarChar, 0, Notes);\r\n            query.AddParameter(\u0022TotalProcessedStrikeOffDissolutionCount\u0022, SqlDbType.Int, 0, TotalProcessedStrikeOffDissolutionCount);\r\n            query.ExecuteQuery();\r\n\r\n            if (ID == 0)\r\n            {\r\n                ID = query.GetIntegerParameterValue(\u0022@StrikeOffDissolutionFileHeaderID\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery",
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.BusinessObjects.Calculators.Interfaces.IBusinessObjectQueryBuilder BuildSaveQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery AddParameter",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.INonQuery GetIntegerParameterValue"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDeleteData",
						"Hash": "38BC376D763C8B8B7BF959F3CC855E087EEEF2AF70B456ED05F7149441AAC4FB",
						"Body": {
							"BodyText": "            Inactive = true;\r\n            SaveData();\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "Taxpayer",
				"BaseType": "DataTorque.Iho.BusinessObjects.Taxpayer",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.Interfaces.BusinessObjects.ITaxpayer"
				],
				"Properties": [
					"Unlinked.SmartBindingList FlatRatePeriods",
					"DataTorque.Iho.Interfaces.Common.ISmartBindingList FlatRatePeriodsList"
				],
				"Methods": [
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalDispose",
						"Hash": "1AE3E574370667C567873AE301F7C17BB9A701330F0879FF8EBADF86F9106A2C",
						"Body": {
							"BodyText": "            base.InternalDispose();\r\n            if (FlatRatePeriods == null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            foreach (IFlatRatePeriod flatRatePeriod in FlatRatePeriods)\r\n            {\r\n                flatRatePeriod.Dispose();\r\n            }\r\n\r\n            FlatRatePeriods.Dispose();\r\n            FlatRatePeriods = null;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.Taxpayer",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod Dispose"
							]
						}
					},
					{
						"Modifiers": "protected override",
						"ReturnType": "void",
						"Name": "InternalSaveData",
						"Hash": "64ABEC34D655DBEA8D16EDC0A2768CDE754992220621AB5E8A8EE57C16A5E7E8",
						"Body": {
							"BodyText": "            base.InternalSaveData();\r\n            SaveFlatRatePeriods();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.Taxpayer"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "void",
						"Name": "UpdateInitialValues",
						"Hash": "92D5DCF7AA6F4E78492E0237E617D8F99316F66D5E541D86B70C4ADE7AABEA43",
						"Body": {
							"BodyText": "            base.UpdateInitialValues();\r\n            PopulateFlatRatePeriod();\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.BusinessObjects.Taxpayer"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "PopulateFlatRatePeriod",
						"Hash": "50C88DD5C9784FF28A0C58CE6227999D334EE09297A61F7B86A1C628BA3D320E",
						"Body": {
							"BodyText": "            FlatRatePeriods = new SmartBindingList\u003CIFlatRatePeriod\u003E();\r\n\r\n            if (ID \u003E 0)\r\n            {\r\n                FlatRatePeriods = new SmartBindingList\u003CIFlatRatePeriod\u003E(flatRateRepository.GetFlatRatesByTaxpayer(ID));\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRateRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRateRepository GetFlatRatesByTaxpayer"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "SaveFlatRatePeriods",
						"Hash": "68190E72E697F64662A05602E32904A395DFD2BD5A8465AFC39C44857C2A0352",
						"Body": {
							"BodyText": "            if (FlatRatePeriods != null)\r\n            {\r\n                foreach (IFlatRatePeriod flatRatePeriod in FlatRatePeriods)\r\n                {\r\n                    flatRatePeriod.TaxpayerID = ID;\r\n                    flatRatePeriod.DistributedSQLTransaction = DistributedSQLTransaction;\r\n                    flatRatePeriod.SaveData();\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod TaxpayerID",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod DistributedSQLTransaction",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod SaveData"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "TaxReturnItem",
				"BaseType": "DataTorque.Iho.BusinessObjects.TaxReturnItem",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.String",
						"Name": "GetComparePropertyValues",
						"Hash": "E1968F5D64E44FAAE5FEC1C6BDCB7DB28CA068B8E6F6116AA9290EDE5A41DF2F",
						"Parameters": [
							"System.Guid uniqueID",
							"System.Collections.Generic.HashSet objectsCompared"
						],
						"Body": {
							"BodyText": "            if (TaxReturn == null)\r\n            {\r\n                return String.Empty;\r\n            }\r\n\r\n            if (TaxReturn.UseBulkSave)\r\n            {\r\n                return \u0022|DetailListCount:\u0022 \u002B DetailList?.Count;\r\n            }\r\n\r\n            return base.GetComparePropertyValues(uniqueID, objectsCompared);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.BusinessObjects.TaxReturnItem"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxReturn UseBulkSave"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "UserInterfaceCodes",
				"BaseType": "System.Object",
				"Properties": [
					"System.String IntegrationBankExtractImportDetailsForm",
					"System.String CaseTaskCaseTaskInaccuracyPenaltyDetails"
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "BankStatementFileDetailValidator",
				"BaseType": "Unlinked.GenericValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "F2035FAC4095F619EDAF166FCB388F320CE991BE7F05A761285D0BF1774A6B94",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n            if (result.IsValid)\r\n            {\r\n                ValidateDate(businessObject, result);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ValidateDate",
						"Hash": "6E1A115B7B1220382427BFD1901A238CA3F655CE036C6669DC4ED9D8EC8BC1D6",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail detail",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            if (detail.TransactionDate == DateTime.MinValue)\r\n            {\r\n                result.AddError(\u0022Date\u0022, \u0022Invalid date format for Date. Expected date format is d/MM/yyyy.\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileDetail TransactionDate",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "BankStatementFileHeaderValidator",
				"BaseType": "Unlinked.GenericValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "F75D131160488B1456A95C5032D3FD6770A6B66CBEB1BAC24E52A1912750D151",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader header"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(header);\r\n            if (!result.IsValid || header.ImportFileStatus != ImportFileStatus.PartialImport)\r\n            {\r\n                return result;\r\n            }\r\n\r\n            if (!ValidateFileExtension(header, result))\r\n            {\r\n                return result;\r\n            }\r\n\r\n            if (!ValidateFileName(header, result))\r\n            {\r\n                return result;\r\n            }\r\n\r\n            if (!ValidateChecksum(header, result))\r\n            {\r\n                return result;\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateFileExtension",
						"Hash": "C84D3D87137504B7084DDD86612D96FCFC3733002C9438BB36F8698C04B1B1E0",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader header",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            string fileName = Path.GetFileName(header.FileName);\r\n            string fileExtension = Path.GetExtension(fileName);\r\n\r\n            if (fileExtension != \u0022.csv\u0022)\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Unsupported file format error.\u0022);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateFileName",
						"Hash": "F511ECAF13716E07481C0FA1B9776BC523065B3E15D24384DD58555845F322A1",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader header",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            string fileName = Path.GetFileName(header.FileName);\r\n\r\n            if (!fileName.StartsWith(\u0022BankExtractCED\u0022) \u0026\u0026 !fileName.StartsWith(\u0022BankExtractEPU\u0022))\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Unidentified file name error.\u0022);\r\n                return false;\r\n            }\r\n\r\n            if(!IsFilenameUnique(header, result))\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Identical matching file name error.\u0022);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsFilenameUnique",
						"Hash": "3F4CE55A4B8C7443B7323604DCB6141DF2C986A05DC2121B807293FE9A687663",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader header",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            IQueryFactory queryFactory = CommonServiceLocator.ServiceLocator.Current.GetInstance\u003CIQueryFactory\u003E();\r\n\r\n            IScalarQuery query = queryFactory.CreateScalarQuery(\u0022spf_BankStatementFileHeader_IsFilenameUnique\u0022, header.DistributedSQLTransaction);\r\n            query.AddParameter(\u0022@BankStatementFileHeaderID\u0022, SqlDbType.Int, 0, header.ID);\r\n            query.AddParameter(\u0022@FileName\u0022, SqlDbType.NVarChar, 0, header.FileName);\r\n            query.ExecuteQuery();\r\n\r\n            bool isValid = ParsingHelper.ParseBool(query.ScalarValue);\r\n            if (isValid == false)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader"
							],
							"ReferencedStoredProcedures": [
								"spf_BankStatementFileHeader_IsFilenameUnique"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader DistributedSQLTransaction",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader FileName",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateChecksum",
						"Hash": "83D70F01E7EFA6EC883442A8106E337DD7219C9ADE2412CC11AB97D55B5A1CE2",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader header",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            IQueryFactory queryFactory = CommonServiceLocator.ServiceLocator.Current.GetInstance\u003CIQueryFactory\u003E();\r\n\r\n            // BankStatementFileHeader.Checksum is a computed column in the database, so we can\u0027t just calculate our own checksum, we need to get\r\n            // the database to do it, and then compare against all other checksums to ensure it is unique.\r\n            IScalarQuery checksumQuery = queryFactory.CreateScalarQuery(\u0022spf_BankStatementFileHeader_ValidateContentsChecksum\u0022, header.DistributedSQLTransaction);\r\n            checksumQuery.AddParameter(\u0022@BankStatementFileHeaderID\u0022, SqlDbType.Int, 0, header.ID);\r\n            checksumQuery.AddParameter(\u0022@Contents\u0022, SqlDbType.NVarChar, 0, header.Contents);\r\n            checksumQuery.ExecuteQuery();\r\n\r\n            bool checksumIsValid = ParsingHelper.ParseBool(checksumQuery.ScalarValue);\r\n            if (checksumIsValid == false)\r\n            {\r\n                result.AddError(\u0022Checksum\u0022, \u0022Identical matching imported file error.\u0022);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IDistributedTransaction",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedStoredProcedures": [
								"spf_BankStatementFileHeader_ValidateContentsChecksum"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Factories.IQueryFactory CreateScalarQuery",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader DistributedSQLTransaction",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery AddParameter",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader ID",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IBankStatementFileHeader Contents",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ExecuteQuery",
								"DataTorque.Iho.Interfaces.DataAccessLayer.IScalarQuery ScalarValue",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "ChangeOfCompanyNameFileHeaderValidator",
				"BaseType": "Unlinked.GenericValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "F3932ACF18DA9CA5F75FB32852B6FB41148135135296D998DCFCF55AAE8F0010",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n            if (result.IsValid \u0026\u0026 businessObject.ImportFileStatus == ImportFileStatus.PartialImport)\r\n            {\r\n                if (ValidateFileExtension(businessObject, result))\r\n                {\r\n                    ValidateFileName(businessObject, result);\r\n                }\r\n\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateFileExtension",
						"Hash": "4FA847434A3C73AC6EBE6EF2DBD69AAFA151F3814E326F4F547EDB2EC4BCB741",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader changeOfCompanyNameFileHeader",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            string fileExtension = Path.GetExtension(changeOfCompanyNameFileHeader.FileName);\r\n\r\n            if (fileExtension != \u0022.csv\u0022)\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Expected the file format to be .csv , but it has {fileExtension} format.\u0022);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ValidateFileName",
						"Hash": "793BF5183BA74DAA2110F205E5B7DAD8CE5EC19705FDF46E83674802F81853A2",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader changeOfCompanyNameFileHeader",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            string fileName = Path.GetFileNameWithoutExtension(changeOfCompanyNameFileHeader.FileName);\r\n\r\n            if (!fileName.StartsWith(\u0022ChangeOfCompanyName\u0022))\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Expected the file name to start with ChangeOfCompanyName but the file name is {fileName}.\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfCompanyNameFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "ChangeOfRegisteredOfficeFileHeaderValidator",
				"BaseType": "Unlinked.GenericValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "EA68606A7E18E07B8B4332B0BC1520A848958F53F92E515F5816270D628ED31F",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n            if (result.IsValid \u0026\u0026 businessObject.ImportFileStatus == ImportFileStatus.PartialImport)\r\n            {\r\n                if (ValidateFileExtension(businessObject, result))\r\n                {\r\n                    ValidateFileName(businessObject, result);\r\n                }\r\n\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateFileExtension",
						"Hash": "A7C3AE12B3F0BD2B39CBCB14B0C2DDF228278E10D6A39C85A67FADAB511810D6",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader changeOfRegisteredOfficeFileHeader",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            string fileExtension = Path.GetExtension(changeOfRegisteredOfficeFileHeader.FileName);\r\n\r\n            if (fileExtension != \u0022.csv\u0022)\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Expected the file format to be .csv , but it has {fileExtension} format.\u0022);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ValidateFileName",
						"Hash": "69E62CB0814735DB004C7C4CDD0BCFBBBFEB942809CB6AF68D0B38A4415435AB",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader changeOfRegisteredOfficeFileHeader",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            string fileName = Path.GetFileNameWithoutExtension(changeOfRegisteredOfficeFileHeader.FileName);\r\n\r\n            if (!fileName.StartsWith(\u0022ChangeOfRegisteredOffice\u0022))\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Expected the file name to start with ChangeOfRegisteredOffice but the file name is {fileName}.\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IChangeOfRegisteredOfficeFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "DefermentStatementFileDetailValidator",
				"BaseType": "Unlinked.GenericValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "C490A1E21A058CE79332237B0775B2FAC478FA3B56775BC87C14A8FC272772A6",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n\r\n            if (result.IsValid)\r\n            {\r\n                if (businessObject.TaxTypeID == null || businessObject.TaxTypeID == 0)\r\n                {\r\n                    result.AddError(\u0022TaxType\u0022, \u0022Tax type could not be determined.\u0022);\r\n                }\r\n                if (businessObject.TaxpayerID == null || businessObject.TaxpayerID == 0)\r\n                {\r\n                    result.AddError(\u0022Taxpayer\u0022, \u0022Taxpayer could not be found.\u0022);\r\n                }\r\n\r\n                // Perform additional record validation\r\n                ValidateRecord(businessObject, result);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail TaxTypeID",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail TaxpayerID"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ValidateRecord",
						"Hash": "72C52C023F3734E6FD2A8B79E6752069972EF06967A8BB603E991E97DBDDEBCB",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail businessObject",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            List\u003Cstring\u003E dataRowErrors = new List\u003Cstring\u003E();\r\n            bool isValid = ValidateDataRow(businessObject.Record, out dataRowErrors);\r\n            if (!isValid)\r\n            {\r\n                foreach (string error in dataRowErrors)\r\n                {\r\n                    result.AddError(\u0022Record\u0022, error);\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileDetail Record",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateDataRow",
						"Hash": "DB94FBB25F7FBEF15E724378193C111790BE9460B6B95072524D4AC1AD6928E3",
						"Parameters": [
							"System.String row",
							"System.Collections.Generic.List errors"
						],
						"Body": {
							"BodyText": "            errors = new List\u003Cstring\u003E();\r\n\r\n            // Split the row into columns\r\n            string[] columns = row.Split(\u0027,\u0027);\r\n\r\n            // Check if the number of columns is correct (expecting at least 13 columns)\r\n            if (columns.Length != 13)\r\n            {\r\n                errors.Add(\u0022Row has an insufficient number of columns. Expected at least 13 columns.\u0022);\r\n                return false;\r\n            }\r\n\r\n            // Remove spaces from Importer\u0027s EORI before validation\r\n            string importersEORI = columns[0].Replace(\u0022 \u0022, string.Empty);\r\n            if (string.IsNullOrWhiteSpace(importersEORI) || !Regex.IsMatch(importersEORI, @\u0022^[A-Z]{2}[0-9]{12}$\u0022))\r\n            {\r\n                errors.Add($\u0022{ValidationKeys.InvalidEORI}: Column \u0027Importer\u0027s EORI\u0027\u0022);\r\n            }\r\n\r\n            // Validate Transaction Date (Mandatory)\r\n            string[] dateFormats = new[] { \u0022d/M/yyyy\u0022, \u0022dd/MM/yyyy\u0022, \u0022d/MM/yyyy\u0022, \u0022dd/M/yyyy\u0022 };\r\n\r\n            if (!DateTime.TryParseExact(columns[1], dateFormats, CultureInfo.InvariantCulture, DateTimeStyles.None, out _))\r\n            {\r\n                errors.Add($\u0022{ValidationKeys.InvalidDateFormat}: Column \u0027Transaction date\u0027\u0022);\r\n            }\r\n\r\n            // Validate Movement Reference Number (MRN) - Mandatory and 18 characters alphanumeric\r\n            if (string.IsNullOrWhiteSpace(columns[2]) || columns[2].Length != 18 || !IsAlphanumeric(columns[2]))\r\n            {\r\n                errors.Add($\u0022{ValidationKeys.InvalidMRN}: Column \u0027Movement Reference Number (MRN)\u0027\u0022);\r\n            }\r\n\r\n            // Validate Deferment Account Number (7-digit number, Mandatory)\r\n            if (string.IsNullOrWhiteSpace(columns[3]) || columns[3].Length != 7 || !int.TryParse(columns[3], out _))\r\n            {\r\n                errors.Add($\u0022{ValidationKeys.InvalidDefermentAccountNumber}: Column \u0027Deferment account number\u0027\u0022);\r\n            }\r\n\r\n            // Validate Declarant (Mandatory)\r\n            if (string.IsNullOrWhiteSpace(columns[4]))\r\n            {\r\n                errors.Add($\u0022{ValidationKeys.MissingMandatoryField}: Column \u0027Declarant\u0027\u0022);\r\n            }\r\n\r\n            // Remove spaces from Declarant\u0027s EORI before validation\r\n            string declarantsEORI = columns[5].Replace(\u0022 \u0022, string.Empty);\r\n            if (string.IsNullOrWhiteSpace(declarantsEORI) || !Regex.IsMatch(declarantsEORI, @\u0022^[A-Z]{2}[0-9]{12}$\u0022))\r\n            {\r\n                errors.Add($\u0022{ValidationKeys.InvalidEORI}: Column \u0027Declarant\u0027s EORI\u0027\u0022);\r\n            }\r\n\r\n            // Validate Declarant\u0027s Reference (Optional, 23 characters alphanumeric)\r\n            if (!string.IsNullOrWhiteSpace(columns[6]) \u0026\u0026 (columns[6].Length != 23 || !IsAlphanumeric(columns[6])))\r\n            {\r\n                errors.Add($\u0022{ValidationKeys.InvalidDeclarantReference}: Column \u0027Declarant\u0027s reference\u0027\u0022);\r\n            }\r\n\r\n            // Validate Duty Due (Decimal, Mandatory)\r\n            if (!decimal.TryParse(columns[9], out decimal dutyDue))\r\n            {\r\n                errors.Add($\u0022{ValidationKeys.InvalidDecimalFormat}: Column \u0027Duty due\u0027\u0022);\r\n            }\r\n\r\n            // Validate VAT Due (Decimal, Mandatory)\r\n            if (!decimal.TryParse(columns[10], out decimal vatDue))\r\n            {\r\n                errors.Add($\u0022{ValidationKeys.InvalidDecimalFormat}: Column \u0027VAT due\u0027\u0022);\r\n            }\r\n\r\n            // Validate Excise Due (Decimal, Mandatory)\r\n            if (!decimal.TryParse(columns[11], out decimal exciseDue))\r\n            {\r\n                errors.Add($\u0022{ValidationKeys.InvalidDecimalFormat}: Column \u0027Excise due\u0027\u0022);\r\n            }\r\n\r\n            // Validate Due or Credit Amount (Decimal, Mandatory)\r\n            if (!decimal.TryParse(columns[11], out decimal dueOrCrAmt))\r\n            {\r\n                errors.Add($\u0022{ValidationKeys.InvalidDecimalFormat}: Column \u0027Due or Cr Amt\u0027\u0022);\r\n            }\r\n\r\n            return !errors.Any();\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Validators.ValidationKeys"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Validators.ValidationKeys InvalidEORI",
								"DataTorque.IsleOfMan.BusinessObjects.Validators.ValidationKeys InvalidDateFormat",
								"DataTorque.IsleOfMan.BusinessObjects.Validators.ValidationKeys InvalidMRN",
								"DataTorque.IsleOfMan.BusinessObjects.Validators.ValidationKeys InvalidDefermentAccountNumber",
								"DataTorque.IsleOfMan.BusinessObjects.Validators.ValidationKeys MissingMandatoryField",
								"DataTorque.IsleOfMan.BusinessObjects.Validators.ValidationKeys InvalidDeclarantReference",
								"DataTorque.IsleOfMan.BusinessObjects.Validators.ValidationKeys InvalidDecimalFormat"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsAlphanumeric",
						"Hash": "9B857675902889C67BE46E950C4059973327D0BC71375335E442315E9ACD542A",
						"Parameters": [
							"System.String value"
						],
						"Body": {
							"BodyText": "            return Regex.IsMatch(value, \u0022^[a-zA-Z0-9]*$\u0022);\r\n"
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "ValidationKeys",
				"BaseType": "System.Object"
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "DefermentStatementFileHeaderValidator",
				"BaseType": "Unlinked.GenericValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "1D19A074D50BA82796B3AD47A22E58C6DB06E75EF1D83C0BF973DC87DCD3D798",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n\r\n            if (!ValidateFileExtension(businessObject, result))\r\n            {\r\n                return result;\r\n            }\r\n            if (result.IsValid)\r\n            {\r\n                // Perform additional header validation\r\n                ValidateHeader(businessObject, result);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ValidateHeader",
						"Hash": "A3039FB6E54CD66548E8BEC412B040313E6B9EA1DA341ADFB97BDEF221FF4DD6",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader businessObject",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            // Read file content and validate minimum lines for header/statement rows\r\n            string[] lines = businessObject.FileContents;\r\n\r\n            if (lines == null)\r\n            {\r\n                result.AddError(\u0022MinimumLines\u0022, \u0022File content is missing.\u0022);\r\n                return;\r\n            }\r\n\r\n            if (lines.Length \u003C 6)\r\n            {\r\n                result.AddError(\u0022MinimumLines\u0022, \u0022Insufficient rows in the CSV file. Expected at least header and data rows.\u0022);\r\n            }\r\n\r\n            // Check if statement number exists and is within the valid range\r\n            int statementNumber = parser.GetStatementNumber(lines);\r\n            if (statementNumber == 0 || !IsStatementNumberValid(statementNumber))\r\n            {\r\n                result.AddError(\u0022StatementNumber\u0022, \u0022Statement number out of range error.\u0022);\r\n            }\r\n\r\n            // Validate the period\r\n            string period = parser.GetPeriod(lines);\r\n            if (string.IsNullOrEmpty(period) || !IsValidPeriodFormat(period))\r\n            {\r\n                result.AddError(\u0022PeriodFormat\u0022, \u0022Invalid or missing period format.\u0022);\r\n            }\r\n\r\n            if (lines.Length \u003E 4)\r\n            {\r\n                string[] expectedHeaders = new[]\r\n                {\r\n                    \u0022Importer\u0027s EORI\u0022,\r\n                    \u0022Transaction date\u0022,\r\n                    \u0022Movement Reference Number (MRN) or Credit Reference Number\u0022,\r\n                    \u0022Deferment account number\u0022,\r\n                    \u0022Declarant\u0022,\r\n                    \u0022Declarant\u0027s EORI\u0022,\r\n                    \u0022Declarant\u0027s reference\u0022,\r\n                    \u0022Deferred deposit reference\u0022,\r\n                    \u0022Duty due\u0022,\r\n                    \u0022VAT due\u0022,\r\n                    \u0022Excise due\u0022,\r\n                    \u0022Due or Cr Amt\u0022,\r\n                    \u0022Unconsumed Credit\u0022\r\n                };\r\n                string[] actualHeaders = lines[4].Split(\u0027,\u0027);\r\n                if (!expectedHeaders.SequenceEqual(actualHeaders))\r\n                {\r\n                    result.AddError(\u0022Headers\u0022, \u0022Invalid header row.\u0022);\r\n                }\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader FileContents",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser GetStatementNumber",
								"DataTorque.IsleOfMan.Interfaces.Calculators.IDefermentStatementParser GetPeriod"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsStatementNumberValid",
						"Hash": "BA105794F80B0944D4DAB209805B8BD9E50FD3080BC8D242307A29F7CB0CC406",
						"Parameters": [
							"System.Int32 statementNumber"
						],
						"Body": {
							"BodyText": "            return statementNumber \u003E= 1 \u0026\u0026 statementNumber \u003C= 5;\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "IsValidPeriodFormat",
						"Hash": "9226B2336419DB9C8CD3029616B4C680CE8F6E2AB485017E5EB912E0CE66C9EB",
						"Parameters": [
							"System.String period"
						],
						"Body": {
							"BodyText": "            // Regular expression pattern to match a month name and a four-digit year\r\n            var pattern = @\u0022\\b(January|February|March|April|May|June|July|August|September|October|November|December)\\b\\s\u002B\\d{4}$\u0022;\r\n            return Regex.IsMatch(period, pattern, RegexOptions.IgnoreCase);\r\n"
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateFileExtension",
						"Hash": "3D08B846F3C4F0DCF0EDB2F86714D5603E4A6E22404AC92B2E9B8066DBA7E4EE",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader header",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            string fileExtension = Path.GetExtension(header.FileName);\r\n\r\n            if (fileExtension != \u0022.csv\u0022)\r\n            {\r\n                result.AddError(\u0022FileName\u0022, \u0022Unsupported file format error\u0022);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDefermentStatementFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "DisbursedChequesFileDetailValidator",
				"BaseType": "Unlinked.GenericValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "6F0870B200053124BBA39BEB4F2D310B3276FDF936246D22F52066B782E72F26",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n            if (result.IsValid)\r\n            {\r\n                ValidateDate(businessObject, result);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ValidateDate",
						"Hash": "6B8A695AB285A02B00A1729ACB7CA45A9F93187801A0F507DBF115E0A5E8B57B",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail disbursedChequesFileDetail",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            if (!disbursedChequesFileDetail.Date.HasValue)\r\n            {\r\n                result.AddError(\u0022Date\u0022, \u0022Invalid date format for Date. Expected date format is d/MM/yyyy.\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileDetail Date",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "DisbursedChequesFileHeaderValidator",
				"BaseType": "Unlinked.GenericValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "7593DA89C8DC78BF05BC1B6BAA85860FBA1A5A481B7D6DFAF60F9D0ED6C143DB",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n            if (result.IsValid \u0026\u0026 businessObject.ImportFileStatus == ImportFileStatus.PartialImport)\r\n            {\r\n                if (ValidateFileExtension(businessObject, result))\r\n                {\r\n                    ValidateFileName(businessObject, result);\r\n                }\r\n\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateFileExtension",
						"Hash": "3ECD3B65101E6A76142927EABCAA3ABB0C3517B4689D16920CE2975EFB99832B",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader strikeOffDissolutionFileHeader",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            string fileExtension = Path.GetExtension(strikeOffDissolutionFileHeader.FileName);\r\n\r\n            if (fileExtension != \u0022.csv\u0022)\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Expected the file format to be .csv , but it has {fileExtension} format.\u0022);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ValidateFileName",
						"Hash": "6A611AB797E61DE9BC4621888ABAE1671654762D8356AA4926AE80AD89D7ACE5",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader strikeOffDissolutionFileHeader",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            string fileName = Path.GetFileNameWithoutExtension(strikeOffDissolutionFileHeader.FileName);\r\n\r\n            if (!fileName.StartsWith(\u0022DisbursedCheques\u0022))\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Expected the file name to start with DisbursedCheques but the file name is {fileName}.\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IDisbursedChequesFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "FlatRatePeriodValidator",
				"BaseType": "Unlinked.GenericValidator",
				"InterfaceTypes": [
					"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IListFlatRatePeriodValidator"
				],
				"Methods": [
					{
						"Modifiers": "public",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "ValidateListOfFlatRatePeriods",
						"Hash": "1D65E1CFABF71FC1C5915045FED1A6F818B5D04A20000A694BFD75EC8BD4AD35",
						"Parameters": [
							"System.Collections.Generic.IList list"
						],
						"Body": {
							"BodyText": "            IValidationResult result = new ValidationResult();\r\n            if (list.IsEmpty())\r\n            {\r\n                result.AddError(\u0022Missing Period\u0022, new ValidationHelper.ResourceParameters(\u0022ValidationErrorMessage_Trade\u0022, null));\r\n            }\r\n\r\n            foreach (IFlatRatePeriod flatRatePeriodOne in list)\r\n            {\r\n                if (list.Any(flatRatePeriodTwo =\u003E flatRatePeriodTwo != flatRatePeriodOne \u0026\u0026 flatRatePeriodOne.CommenceDate \u003C= flatRatePeriodTwo.CommenceDate\r\n                                                                                         \u0026\u0026 flatRatePeriodOne.CeasedDate \u003E= flatRatePeriodTwo.CeasedDate))\r\n                {\r\n                    result.AddError(\u0022Commence Date\u0022, new ValidationHelper.ResourceParameters(\u0022ValidationErrorMessage_ListCommenceDate\u0022, null)); //\u0022Overlapping Period. Period Cannot be Overlapping another period\u0022));\r\n                }\r\n\r\n                if (list.Any(flatRatePeriodTwo =\u003E flatRatePeriodTwo != flatRatePeriodOne \u0026\u0026 flatRatePeriodOne.CommenceDate \u003C= flatRatePeriodTwo.CommenceDate\r\n                                                                                         \u0026\u0026 flatRatePeriodOne.CeasedDate \u003C= flatRatePeriodTwo.CeasedDate\r\n                                                                                         \u0026\u0026 flatRatePeriodOne.CeasedDate \u003E= flatRatePeriodTwo.CommenceDate\r\n                            ))\r\n                {\r\n                    result.AddError(\u0022Ceased Date\u0022, new ValidationHelper.ResourceParameters(\u0022ValidationErrorMessage_ListCeasedDate\u0022, null)); //\u0022Overlapping Lapping Period. The period cannot be Overlapping another period\u0022);\r\n                }\r\n            }\r\n\r\n            if (list.Count(f =\u003E f.CeasedDate == null) \u003E 1)\r\n            {\r\n                result.AddError(\u0022Two active periods\u0022, new ValidationHelper.ResourceParameters(\u0022ValidationErrorMessage_TwoActivePeriods\u0022, null));\r\n            }\r\n\r\n            IFlatRatePeriod openPeriod = list.FirstOrDefault(f =\u003E f.CeasedDate == null);\r\n            if (openPeriod != null)\r\n            {\r\n                if (list.Any(f =\u003E f != openPeriod \u0026\u0026 f.CommenceDate \u003E= openPeriod.CommenceDate))\r\n                {\r\n                    result.AddError(\u0022Over Lapping Open Period\u0022, new ValidationHelper.ResourceParameters(\u0022ValidationErrorMessage_ListCommenceDate\u0022, null));\r\n                }\r\n\r\n                if (list.Any(f =\u003E f != openPeriod \u0026\u0026 f.CeasedDate \u003E= openPeriod.CommenceDate))\r\n                {\r\n                    result.AddError(\u0022Over Lapping Open Period\u0022, new ValidationHelper.ResourceParameters(\u0022ValidationErrorMessage_ListCeasedDate\u0022, null));\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod CommenceDate",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod CeasedDate"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "System.Collections.Generic.Dictionary",
						"Name": "GetValidatedProperties",
						"Hash": "9AE20E62F3F4297478EB8046AF87BF968DE7DD851116A6A610950E74FBD8C450",
						"Parameters": [
							"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod businessObject"
						],
						"Body": {
							"BodyText": "            Dictionary\u003Cstring, IValidatedPropertyDescription\u003E properties = base.GetValidatedProperties(businessObject);\r\n\r\n            return properties;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IValidatedPropertyDescription",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "D7FE5B760DAABFF7919AD9D9616A0FB5281D3ACD2D175C6DF7ADFB69C8A5B340",
						"Parameters": [
							"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n\r\n            if (businessObject.CeasedDate != null \u0026\u0026 businessObject.CommenceDate \u003E businessObject.CeasedDate)\r\n            {\r\n                result.AddError(\u0022Commence Date\u0022, new ValidationHelper.ResourceParameters(\u0022ValidationErrorMessage_CommenceDatedAndCeasedDate\u0022, null)); //\u0022Commence Date Has to be before Cease Date.\u0022);\r\n            }\r\n\r\n            if (!(businessObject.FlatRateSchemeID \u003E 0))\r\n            {\r\n                result.AddError(\u0022Trade\u0022, new ValidationHelper.ResourceParameters(\u0022ValidationErrorMessage_Trade\u0022, null)); //\u0022Select A Trade.\u0022);\r\n            }\r\n\r\n            if (businessObject.CommenceDate == null)\r\n            {\r\n                result.AddError(\u0022Commence Date\u0022, new ValidationHelper.ResourceParameters(\u0022ValidationErrorMessage_CommenceDated\u0022, null)); //\u0022Trade has to have a Commencement Date.\u0022);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod CeasedDate",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod CommenceDate",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError",
								"DataTorque.IsleOfMan.BusinessObjects.Interfaces.IFlatRatePeriod FlatRateSchemeID"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "IntegrationBankExtractFileDetailValidator",
				"BaseType": "Unlinked.GenericValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "5387F3577B9C3EFDBBD6F51900659DDE0EA2B595FDF6146D9DEABD9C97DD8B67",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n            if (result.IsValid)\r\n            {\r\n                ValidateDate(businessObject, result);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ValidateDate",
						"Hash": "E853ADDA1104896D295CB99DCEC71059D0B569A3EEF26D1778CD013033FE25A5",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail integrationBankExtractFileDetail",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            if (!integrationBankExtractFileDetail.Date.HasValue)\r\n            {\r\n                result.AddError(\u0022Date\u0022, \u0022Invalid date format for Date. Expected date format is d/MM/yyyy.\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileDetail Date",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "IntegrationBankExtractFileHeaderValidator",
				"BaseType": "Unlinked.GenericValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "772A692B3BF9C3C72F486BC7D0936BECA8464E48E30A7A6FC3B91C8B60790EA1",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n            if (result.IsValid \u0026\u0026 businessObject.ImportFileStatus == ImportFileStatus.PartialImport)\r\n            {\r\n                if (ValidateFileExtension(businessObject, result))\r\n                {\r\n                    ValidateFileName(businessObject, result);\r\n                }\r\n                \r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateFileExtension",
						"Hash": "14DC63CEF2746F75EF5305B66B81CB5ADB42967AE45AE800A29D79C20707FB43",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader integrationBankExtractFileHeader",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            string fileExtension = Path.GetExtension(integrationBankExtractFileHeader.FileName);\r\n\r\n            if (fileExtension != \u0022.csv\u0022)\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Expected the file format to be .csv , but it has {fileExtension} format.\u0022);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ValidateFileName",
						"Hash": "51E9C7F1F222DD8C1E8231B6C04E4F3A3BA28C8015107FACDAC8B7F959973FEE",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader integrationBankExtractFileHeader",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            string fileName = Path.GetFileNameWithoutExtension(integrationBankExtractFileHeader.FileName);\r\n\r\n            if(!fileName.StartsWith(\u0022BankExtract\u0022))\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Expected the file name to start with BankExtract but the file name is {fileName}.\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IIntegrationBankExtractFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "RegistrationAnswerValidator",
				"BaseType": "DataTorque.Iho.BusinessObjects.Validators.RegistrationAnswerValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "9AD91A5DD24BE29593DBEA054ED649131F9B2CB1AB1422AB12DA8BE33FC5DA98",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n\r\n            if (result.IsValid)\r\n            {\r\n                IRegistrationQuestion question = registrationConfigurationRepository.FindRegistrationQuestion(businessObject.RegistrationQuestionID);\r\n                IRegistrationDesign design = registrationConfigurationRepository.FindRegistrationDesign(question.RegistrationDesignID);\r\n                string controlName = \u0022RegistrationAnswer\u0022 \u002B businessObject.RegistrationQuestionID;\r\n\r\n                if (question.Code == \u0022AnnInterim\u0022 \u0026\u0026 businessObject.AnswerAsBool)\r\n                {\r\n                    IRegistrationReturnFrequency registrationReturnFrequency = businessObject.Taxpayer.TaxTypeRegistrations.FirstOrDefault(x =\u003E x.ID == businessObject.RegistrationID \u0026\u0026 x.TaxTypeID == design.TaxTypeID)?.CurrentRegistrationReturnFrequency;\r\n\r\n                    IReturnFrequency returnFrequency = null;\r\n\r\n                    if (registrationReturnFrequency != null \u0026\u0026 registrationReturnFrequency.ReturnFrequencyID.HasValue)\r\n                    {\r\n                        returnFrequency = taxReturnDesignRepository.FindReturnFrequency(registrationReturnFrequency.ReturnFrequencyID.Value);\r\n                    }\r\n\r\n                    if (returnFrequency?.Code != \u0022Annual\u0022)\r\n                    {\r\n                        result.AddError(controlName, ResourceHelper.GetApplicationResource(\u0022Validation_AnnualReturnInterim_IncorrectFilingFrequency\u0022));\r\n                    }\r\n                }\r\n\r\n                if (question.Code == \u0022AnnInterimBalMo\u0022 \u0026\u0026 businessObject.AnswerAsInt \u003E 0)\r\n                {\r\n                    IRegistrationReturnFrequency registrationReturnFrequency = businessObject.Taxpayer.TaxTypeRegistrations.FirstOrDefault(x =\u003E x.ID == businessObject.RegistrationID \u0026\u0026 x.TaxTypeID == design.TaxTypeID)?.CurrentRegistrationReturnFrequency;\r\n\r\n                    if (registrationReturnFrequency != null \u0026\u0026 registrationReturnFrequency.BalanceMonthNumber.HasValue \u0026\u0026 registrationReturnFrequency.BalanceMonthNumber.Value != businessObject.AnswerAsInt)\r\n                    {\r\n                        result.AddError(controlName, ResourceHelper.GetApplicationResource(\u0022Validation_AnnualReturnInterim_BalanceMonthDiscrepancy\u0022));\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.BusinessObjects.Validators.RegistrationAnswerValidator",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationQuestion",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationConfigurationRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationDesign",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnDesignRepository"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationConfigurationRepository FindRegistrationQuestion",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer RegistrationQuestionID",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationConfigurationRepository FindRegistrationDesign",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationQuestion RegistrationDesignID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationQuestion Code",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer AnswerAsBool",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer Taxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration ID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer RegistrationID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration TaxTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationDesign TaxTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency ReturnFrequencyID",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnDesignRepository FindReturnFrequency",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer AnswerAsInt",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency BalanceMonthNumber"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "RegistrationValidator",
				"BaseType": "DataTorque.Iho.BusinessObjects.Validators.RegistrationValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "FF0E2937F6433423D6D87265A6A0B0A98A0F7E31EB630B00791C027F849D132A",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n\r\n\r\n            if (result.IsValid)\r\n            {\r\n                result = ValidateVATRegistrationQuestions(businessObject, result);\r\n            }\r\n\r\n            if (result.IsValid)\r\n            {\r\n                result = ValidateVATGroupRelatedContacts(businessObject, result);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.BusinessObjects.Validators.RegistrationValidator",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid"
							]
						}
					},
					{
						"Modifiers": "protected virtual",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "ValidateVATGroupRelatedContacts",
						"Hash": "5FB4B26390F0C9C2BF58EBF86E21B5C3B5D59BAA4D5F121932A90C479863AFA6",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration registration",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            if (registration.TaxType != null \u0026\u0026 registration.Selected \u0026\u0026 registration.TaxType.Code == \u0022VAT\u0022)\r\n            {\r\n                IList\u003CITaxpayerRelationship\u003E VATGroupRelationships = registration.CurrentTaxpayer?.RelatedContacts?.Where(r =\u003E r.RelationshipType.Code == \u0022VATGroupMemberOf\u0022).ToList();\r\n                if (VATGroupRelationships != null \u0026\u0026 VATGroupRelationships.Count \u003E 0)\r\n                {\r\n                    foreach (IRegistrationReturnFrequency frequency in registration.FrequencyHistory)\r\n                    {\r\n                        if (taxpayerRelationshipCalculator.CalculateIfAnyRelationsOverlapWithCommenceAndCeaseDates(frequency.CommenceDate.GetValueOrDefault(), frequency.CeasedDate, VATGroupRelationships))\r\n                        {\r\n                            result.AddError(\u0022ReturnFrequency\u0022, ResourceHelper.GetApplicationResource(\u0022Validation_TaxpayerRelationship_RelatedTaxpayerHasVATRegistration\u0022));\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationshipType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration TaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration Selected",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration CurrentTaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelationshipType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration FrequencyHistory",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator CalculateIfAnyRelationsOverlapWithCommenceAndCeaseDates",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency CommenceDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationReturnFrequency CeasedDate",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					},
					{
						"Modifiers": "protected virtual",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "ValidateVATRegistrationQuestions",
						"Hash": "BAAEE9B92C7A6248D108044B3623D1ABA97CFC920FE40051BC3C9508E44786AD",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration registration",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            if (registration.TaxType != null \u0026\u0026 registration.Selected \u0026\u0026 registration.TaxType.Code == \u0022VAT\u0022)\r\n            {\r\n                bool paymentOnAccount = false;\r\n                bool poaQuestionIsDirty = false;\r\n                int poaQuestionCount = 0;\r\n                DateTime? paymentOnAccountStart = null;\r\n\r\n                foreach (IRegistrationAnswer registrationAnswer in registration.Answers)\r\n                {\r\n                    IRegistrationQuestion question = registrationConfigurationRepository.FindRegistrationQuestion(registrationAnswer.RegistrationQuestionID);\r\n                    \r\n                    switch (question?.Code)\r\n                    {\r\n                        case \u0022POA\u0022:\r\n                            paymentOnAccount = registrationAnswer.AnswerAsBool;\r\n                            if (!paymentOnAccount)\r\n                            {\r\n                                return result; // return early once we know it\u0027s not POA.\r\n                            }\r\n                            poaQuestionIsDirty |= registrationAnswer.IsDirty();\r\n                            poaQuestionCount\u002B\u002B;\r\n                            break;\r\n\r\n                        case \u0022POAStart\u0022:\r\n                            paymentOnAccountStart = registrationAnswer.AnswerAsDateTime;\r\n                            poaQuestionIsDirty |= registrationAnswer.IsDirty();\r\n                            poaQuestionCount\u002B\u002B;\r\n                            break;\r\n                    }\r\n\r\n                    if (poaQuestionCount \u003E= 2)\r\n                    {\r\n                        break; //We\u0027ve got what we need...\r\n                    }\r\n                }\r\n\r\n                if (paymentOnAccount)\r\n                {\r\n                    IList\u003CIReturnFrequency\u003E vatQuarterlyReturnFrequencyList = taxReturnDesignRepository.GetReturnFrequenciesForTaxType(registration.TaxTypeID).Where(rf =\u003E rf.MonthsToNextPeriod == 3).ToList();\r\n                    if (!vatQuarterlyReturnFrequencyList.Any(r =\u003E r.ID == registration.CurrentReturnFrequencyID))\r\n                    {\r\n                        result.AddError(\u0022ReturnFrequency\u0022, ResourceHelper.GetApplicationResource(\u0022ValidationErrorMessage_PaymentOnAccountMustHaveQuarterlyFilingFrequency\u0022));\r\n                    }\r\n\r\n                    // Only apply date validation if a POA answer has been changed, otherwise an un-related trivial change may cause the POAStart future date validation to fail when it has not been changed.\r\n                    if (poaQuestionIsDirty \u0026\u0026 (!paymentOnAccountStart.HasValue || paymentOnAccountStart.GetValueOrDefault().Date \u003C= executingEnvironment.TodayDate))\r\n                    {\r\n                        result.AddError(\u0022POAStart\u0022, ResourceHelper.GetApplicationResource(\u0022ValidationErrorMessage_PaymentOnAccountFutureStartDate\u0022));\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationQuestion",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationConfigurationRepository",
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnDesignRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration TaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration Selected",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration Answers",
								"DataTorque.Iho.Interfaces.Repositories.IRegistrationConfigurationRepository FindRegistrationQuestion",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer RegistrationQuestionID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer AnswerAsBool",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer IsDirty",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistrationAnswer AnswerAsDateTime",
								"DataTorque.Iho.Interfaces.Repositories.ITaxReturnDesignRepository GetReturnFrequenciesForTaxType",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration TaxTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency MonthsToNextPeriod",
								"DataTorque.Iho.Interfaces.BusinessObjects.IReturnFrequency ID",
								"DataTorque.Iho.Interfaces.BusinessObjects.IRegistration CurrentReturnFrequencyID",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment TodayDate"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "StrikeOffDissolutionFileDetailValidator",
				"BaseType": "Unlinked.GenericValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "3D74DF6E88674D7026BF0926F9B95D1EC6CB0E0779FD3F291068462453C3CDF5",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n            if (result.IsValid)\r\n            {\r\n                ValidateDateOfStatusChange(businessObject, result);\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ValidateDateOfStatusChange",
						"Hash": "813F6D5D33A190A562CFA02EB4A40D26BA9991145E317CCCD0FE003F6BCEAD98",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail strikeOffDissolutionFileDetail",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            if (!strikeOffDissolutionFileDetail.DateOfStatusChange.HasValue)\r\n            {\r\n                result.AddError(\u0022DateOfStatusChange\u0022, \u0022Invalid date format for Date of Status Change. Expected date format is d/MM/yyyy.\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileDetail DateOfStatusChange",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "StrikeOffDissolutionFileHeaderValidator",
				"BaseType": "Unlinked.GenericValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "007CACDE00C9E93581006148E4F2BDDE9965C5EAC8C652FE648B62B089E7FD93",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader businessObject"
						],
						"Body": {
							"BodyText": "            IValidationResult result = base.Validate(businessObject);\r\n            if (result.IsValid \u0026\u0026 businessObject.ImportFileStatus == ImportFileStatus.PartialImport)\r\n            {\r\n                if (ValidateFileExtension(businessObject, result))\r\n                {\r\n                    ValidateFileName(businessObject, result);\r\n                }\r\n\r\n            }\r\n\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid",
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader ImportFileStatus",
								"DataTorque.IsleOfMan.Interfaces.Integration.ImportFileStatus PartialImport"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "ValidateFileExtension",
						"Hash": "39AF5326E4B6B31EC461FB7246CA3D5E71DC7F73C987D1D6FA4980A0A9325E99",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader strikeOffDissolutionFileHeader",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            bool isValid = true;\r\n            string fileExtension = Path.GetExtension(strikeOffDissolutionFileHeader.FileName);\r\n\r\n            if (fileExtension != \u0022.csv\u0022)\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Expected the file format to be .csv , but it has {fileExtension} format.\u0022);\r\n                isValid = false;\r\n            }\r\n\r\n            return isValid;\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "void",
						"Name": "ValidateFileName",
						"Hash": "2E10867B3DCDF04379DFC12CFFCFFAFC021D435FD11CB099CE258422F74E3D45",
						"Parameters": [
							"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader strikeOffDissolutionFileHeader",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            string fileName = Path.GetFileNameWithoutExtension(strikeOffDissolutionFileHeader.FileName);\r\n\r\n            if (!fileName.StartsWith(\u0022StrikeOffDissolution\u0022))\r\n            {\r\n                result.AddError(\u0022FileName\u0022, $\u0022Expected the file name to start with StrikeOffDissolution but the file name is {fileName}.\u0022);\r\n            }\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader",
								"DataTorque.Iho.Interfaces.Common.IValidationResult"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.BusinessObjects.IStrikeOffDissolutionFileHeader FileName",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "TaxpayerIdentificationNumberValidator",
				"BaseType": "DataTorque.Iho.BusinessObjects.Validators.TaxpayerIdentificationNumberValidator",
				"Methods": [
					{
						"Modifiers": "protected override",
						"ReturnType": "System.Boolean",
						"Name": "ValidateNumber",
						"Hash": "B85175AE0E714886779B4C5799CF17981E7BDF634E19C1FDF055978EF1747F0A",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber taxpayerIdentificationNumber"
						],
						"Body": {
							"BodyText": "            // for the default identification types use the product implementation\r\n            if (!IdentityTypePatternMapping.ContainsKey(taxpayerIdentificationNumber.IdentificationType.Code))\r\n            {\r\n                return base.ValidateNumber(taxpayerIdentificationNumber);\r\n            }\r\n            taxpayerIdentificationNumber.ValidationErrorMessage = string.Empty;\r\n\r\n            if (taxpayerIdentificationNumber.IdentificationType.IsValidationRequired || !string.IsNullOrEmpty(taxpayerIdentificationNumber.IdentificationNumber))\r\n            {\r\n                bool isValid = true;\r\n                if (taxpayerIdentificationNumber.IdentificationType.IsInternalValidationRequired)\r\n                {\r\n                    isValid = ValidateNumberUniqueness(taxpayerIdentificationNumber);\r\n                }\r\n                if (isValid)\r\n                {\r\n                    var result = ValidateIdentity(taxpayerIdentificationNumber.IdentificationType.Code,\r\n                        taxpayerIdentificationNumber.IdentificationNumber);\r\n                    if (!result.Item1)\r\n                    {\r\n                        taxpayerIdentificationNumber.IsValidated = false;\r\n                        taxpayerIdentificationNumber.ValidationErrorMessage = result.Item2;\r\n                    }\r\n                    else\r\n                    {\r\n                        taxpayerIdentificationNumber.IsValidated = true;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                taxpayerIdentificationNumber.IsValidated = true;\r\n            }\r\n\r\n            return taxpayerIdentificationNumber.IsValidated;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber",
								"DataTorque.Iho.BusinessObjects.Validators.TaxpayerIdentificationNumberValidator"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber IdentificationType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber ValidationErrorMessage",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber IdentificationNumber",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerIdentificationNumber IsValidated"
							]
						}
					},
					{
						"Modifiers": "public",
						"ReturnType": "System.ValueTuple",
						"Name": "ValidateIdentity",
						"Hash": "718DBAD1911F7D79E7CC81CA7F241915BD0E777AA4D406B27CA2AF16DB93A8EA",
						"Parameters": [
							"System.String identityType",
							"System.String identityValue"
						],
						"Body": {
							"BodyText": "            if (identityType == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(identityType));\r\n            }\r\n\r\n            if (identityValue == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(identityValue));\r\n            }\r\n\r\n            if (!IdentityTypePatternMapping.TryGetValue(identityType, out IdentityInfo identityInfo))\r\n            {\r\n                return (false, \u0022Not a valid identity type\u0022);\r\n            }\r\n\r\n            if (string.IsNullOrEmpty(identityInfo.Pattern))\r\n            {\r\n                return (true, identityInfo.Description);\r\n            }\r\n            return Regex.IsMatch(identityValue, identityInfo.Pattern)\r\n                ? (true, \u0022Valid\u0022)\r\n                : (false, identityInfo.Description);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.BusinessObjects.Validators.IdentityInfo"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.BusinessObjects.Validators.IdentityInfo Pattern",
								"DataTorque.IsleOfMan.BusinessObjects.Validators.IdentityInfo Description"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "IdentityInfo",
				"BaseType": "System.Object",
				"Properties": [
					"System.String Pattern",
					"System.String Description"
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects.Validators",
				"Name": "TaxpayerValidator",
				"BaseType": "DataTorque.Iho.BusinessObjects.Validators.TaxpayerValidator",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "Validate",
						"Hash": "5358F00984E4A19FFFB9608CFE331747862CA0CF08808703A4F16B9B348FB1C4",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer taxpayer"
						],
						"Body": {
							"BodyText": "            IValidationResult validationResult = base.Validate(taxpayer);\r\n\r\n            // don\u0027t validate further as the basic data is invalid. i.e. no CommenceDate\r\n            if (!validationResult.IsValid)\r\n            {\r\n                return validationResult;\r\n            }\r\n\r\n            return validationResult;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.BusinessObjects.Validators.TaxpayerValidator",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult IsValid"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "ValidateRelatedContacts",
						"Hash": "1EEAEBE8A395252DC9F708CA05A7B3BAB54AAAC8FBB77C22FE264BAA60A4F5C5",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer taxpayer",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            IValidationResult validationResult = base.ValidateRelatedContacts(taxpayer, result);\r\n\r\n            string organisationTypeCode = standardLookupRepository.FindItemByID(\u0022OrganisationType\u0022, taxpayer.OrganisationTypeID)?.Code;\r\n\r\n            if (taxpayer.ValidateRelatedContacts)\r\n            {\r\n                if (organisationTypeCode == PartnershipOrganisationTypeCode)\r\n                {\r\n                    if (taxpayer.RelatedContacts.Count(c =\u003E c.IsActive \u0026\u0026 c.RelationshipType.Code == PartnershipRelationshipTypeCode) \u003C 2)\r\n                    {\r\n                        validationResult.AddError(\u0022RelatedContacts\u0022, ResourceHelper.GetApplicationResource(\u0022Validation_PartnershipOrganisationMustHavePartners\u0022));\r\n                    }\r\n                    else\r\n                    {\r\n                        ITaxpayerRepository taxpayerRepository = ServiceLocator.Current.GetInstance\u003CITaxpayerRepository\u003E();\r\n                        foreach (ITaxpayerRelationship taxpayerRelationship in taxpayer.RelatedContacts)\r\n                        {\r\n                            if (taxpayerRelationship.RelatedTaxpayerID != null)\r\n                            {\r\n                                ITaxpayer tmpTaxpayer = taxpayerRepository.FindTaxpayer((int)taxpayerRelationship.RelatedTaxpayerID);\r\n                                if (tmpTaxpayer.TaxpayerTypeID != (int)RegisterableTaxpayerTypeCategory.Individual)\r\n                                {\r\n                                    validationResult.AddError(\u0022RelatedContacts\u0022, ResourceHelper.GetApplicationResource(\u0022Validation_PartnershipPartnersMustBeIndividuals\u0022));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if (organisationTypeCode == VATGroupOrganisationTypeCode)\r\n                {\r\n                    if (taxpayer.RelatedContacts.Count(c =\u003E c.IsActive \u0026\u0026 !c.CeasedDate.HasValue \u0026\u0026 c.RelationshipType.Code.ToLower() == \u0022vatgrouptaxrepresentative\u0022) \u003C 1)\r\n                    {\r\n                        validationResult.AddError(\u0022RelatedContacts\u0022, ResourceHelper.GetApplicationResource(\u0022Validation_TaxpayerRelationship_VATGroupMustHaveVATGroupTaxRepresentative\u0022));\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if (taxpayer.RelatedContacts.Any(c =\u003E c.RelationshipType.Code.ToLower() == \u0022vatgrouptaxrepresentativeof\u0022))\r\n                    {\r\n                        foreach (ITaxpayerRelationship taxpayerRelationship in taxpayer.RelatedContacts.Where(r =\u003E r.RelationshipType.Code.ToLower() == \u0022vatgrouptaxrepresentativeof\u0022))\r\n                        {\r\n                            if (taxpayerRelationship.IsActive \u0026\u0026 taxpayerRelationship.CeasedDate.HasValue)\r\n                            {\r\n                                validationResult.AddError(\u0022RelatedContacts\u0022, ResourceHelper.GetApplicationResource(\u0022Validation_TaxpayerRelationship_VATGroupMustHaveVATGroupTaxRepresentative\u0022));\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (taxpayer.DeletedObjects != null)\r\n                    {\r\n                        foreach (IBaseMutableBusinessObject deletedObject in taxpayer.DeletedObjects)\r\n                        {\r\n                            if (deletedObject is ITaxpayerRelationship relationship)\r\n                            {\r\n                                // check to see if the current state of the taxpayer has 2 group members or a rep if i remove this one\r\n                                if (relationship.RelationshipType.Code.ToLower() == \u0022vatgroupmemberof\u0022 || relationship.RelationshipType.Code.ToLower() == \u0022vatgroupTtaxrepresentativeof\u0022)\r\n                                {\r\n                                    ITaxpayerRepository taxpayerRepository = ServiceLocator.Current.GetInstance\u003CITaxpayerRepository\u003E();\r\n                                    ITaxpayer groupVATaxpayer = taxpayerRepository.FindTaxpayer(relationship.RelatedTaxpayerID.GetValueOrDefault());\r\n\r\n                                    if (groupVATaxpayer?.ID \u003E 0)\r\n                                    {\r\n                                        if (groupVATaxpayer.RelatedContacts.Count(c =\u003E c.RelatedTaxpayerID != taxpayer.ID \u0026\u0026 c.IsActive \u0026\u0026 !c.CeasedDate.HasValue \u0026\u0026 c.RelationshipType.Code.ToLower() == \u0022vatgrouptaxrepresentative\u0022) \u003C 1)\r\n                                        {\r\n                                            validationResult.AddError(\u0022RelatedContacts\u0022, ResourceHelper.GetApplicationResource(\u0022Validation_TaxpayerRelationship_CannotRemoveAsVATGroupMustHaveVATGroupTaxRepresentative\u0022));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            return validationResult;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.BusinessObjects.Validators.TaxpayerValidator",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IStandardLookupItem",
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationshipType",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository",
								"DataTorque.Iho.Interfaces.Common.ISmartBindingList",
								"DataTorque.Iho.BusinessObjects.RegisterableTaxpayerTypeCategory",
								"DataTorque.Iho.Interfaces.BusinessLayerFramework.IBaseMutableBusinessObject"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.Repositories.IStandardLookupRepository FindItemByID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer OrganisationTypeID",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer ValidateRelatedContacts",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer RelatedContacts",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship IsActive",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelationshipType",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelatedTaxpayerID",
								"DataTorque.Iho.Interfaces.Repositories.ITaxpayerRepository FindTaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer TaxpayerTypeID",
								"DataTorque.Iho.BusinessObjects.RegisterableTaxpayerTypeCategory Individual",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CeasedDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer DeletedObjects",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer ID"
							]
						}
					},
					{
						"Modifiers": "public override",
						"ReturnType": "DataTorque.Iho.Interfaces.Common.IValidationResult",
						"Name": "ValidateDateOfBirth",
						"Hash": "5E3A63297C52C2D70AF09EB1F588209EC2C1324B64658BB75C0BCFDDC30B4C9D",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer taxpayer",
							"DataTorque.Iho.Interfaces.Common.IValidationResult result"
						],
						"Body": {
							"BodyText": "            // iho have changed the default for individuals so that they require a date of birth, which is not what\r\n            // IOM want, so we need to work around this by copying all of the old iho logic.\r\n            if (taxpayer.IsIndividual \u0026\u0026 taxpayer.DateOfBirth.HasValue)\r\n            {\r\n                // taxpayer is an individual, and they have a date of birth, we need to ensure the date of birth is valid\r\n                IExecutingEnvironment executingEnvironment = ServiceLocator.Current.GetInstance\u003CIExecutingEnvironment\u003E();\r\n\r\n                if (taxpayer.DateOfBirth.Value \u003E executingEnvironment.CurrentDateTime.Date)\r\n                {\r\n                    result.AddError(\u0022DateOfBirth\u0022, ResourceHelper.GetApplicationResource(\u0022Validation_FutureDateOfBirth\u0022));\r\n                }\r\n                else\r\n                {\r\n                    ISystemConstantRepository systemConstantRepository = ServiceLocator.Current.GetInstance\u003CISystemConstantRepository\u003E();\r\n                    IAgeCalculator ageCalculator = ServiceLocator.Current.GetInstance\u003CIAgeCalculator\u003E();\r\n\r\n                    int taxpayerAge = ageCalculator.CalculateAge(taxpayer.DateOfBirth.Value);\r\n\r\n                    if (taxpayerAge \u003C systemConstantRepository.GetInteger(\u0022MinAgeForTaxpayer\u0022, 18))\r\n                    {\r\n                        result.AddError(\u0022DateOfBirth\u0022,\r\n                                        string.Format(ResourceHelper.GetApplicationResource(\u0022Validation_TaxpayerLegalAge\u0022), taxpayerAge,\r\n                                        systemConstantRepository.GetInteger(\u0022MinAgeForTaxpayer\u0022, 18)));\r\n                    }\r\n                    else if (taxpayerAge \u003E systemConstantRepository.GetInteger(\u0022MaxAgeForTaxpayer\u0022, 150))\r\n                    {\r\n                        result.AddError(\u0022DateOfBirth\u0022,\r\n                                        string.Format(ResourceHelper.GetApplicationResource(\u0022Validation_TaxpayerTooOld\u0022), taxpayerAge,\r\n                                        systemConstantRepository.GetInteger(\u0022MaxAgeForTaxpayer\u0022, 150)));\r\n                    }\r\n                }\r\n            }\r\n\r\n            // do NOT call base.ValidateDateOfBirth, or we end up applying the iho validation.\r\n            return result;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment",
								"DataTorque.Iho.Interfaces.Common.IValidationResult",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository",
								"DataTorque.Iho.Interfaces.Calculators.IAgeCalculator"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer IsIndividual",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer DateOfBirth",
								"DataTorque.Iho.Interfaces.BusinessObjects.IExecutingEnvironment CurrentDateTime",
								"DataTorque.Iho.Interfaces.Common.IValidationResult AddError",
								"DataTorque.Iho.Interfaces.Calculators.IAgeCalculator CalculateAge",
								"DataTorque.Iho.Interfaces.Repositories.ISystemConstantRepository GetInteger"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "VATGroupMemberOfRelationshipType",
				"BaseType": "DataTorque.Iho.BusinessObjects.TaxpayerRelationshipType",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "ValidateRelationshipType",
						"Hash": "403D18FDE2DA63543ED1615B19A1D1F7A6DC2E864218434F3977A7620AA44CE9",
						"Parameters": [
							"System.Collections.Generic.IList taxpayerRelationships"
						],
						"Body": {
							"BodyText": "            foreach (ITaxpayerRelationship taxpayerRelationship in taxpayerRelationships.Where(r =\u003E r.RelationshipType.Code == \u0022VATGroupMemberOf\u0022))\r\n            {\r\n                if (taxpayerRelationship.IsActive)\r\n                {\r\n                    ITaxpayer currentTaxpayer = taxpayerRelationship.CurrentTaxpayer;\r\n\r\n                    if (taxpayerRelationshipCalculator.GroupVATRelationshipOverlapsWithVATTaxTypesRegistration(currentTaxpayer, taxpayerRelationship))\r\n                    {\r\n                        AddValidationError(\u0022TaxpayerRelationship\u0022, string.Format(ResourceHelper.GetApplicationResource(\u0022Validation_TaxpayerRelationship_ThisTaxpayerCannotJoinVATGroupAsTheyHaveAnActiveVATRegistration\u0022) \u002B \u0022: {0}\u0022, taxpayerRelationship.FullName));\r\n                        return false;\r\n                    }\r\n\r\n                    if (taxpayerRelationshipCalculator.TaxpayerAlreadyHasRelationshipWithVATGroup(currentTaxpayer, taxpayerRelationship))\r\n                    {\r\n                        AddValidationError(\u0022TaxpayerRelationship\u0022, string.Format(ResourceHelper.GetApplicationResource(\u0022Validation_TaxpayerRelationship_ThisTaxpayerIsActiveInAnotherVATGroup\u0022) \u002B \u0022: {0}\u0022, taxpayerRelationship.FullName));\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationshipType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelationshipType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship IsActive",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CurrentTaxpayer",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator GroupVATRelationshipOverlapsWithVATTaxTypesRegistration",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship FullName",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator TaxpayerAlreadyHasRelationshipWithVATGroup"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "VATGroupMemberRelationshipType",
				"BaseType": "DataTorque.Iho.BusinessObjects.TaxpayerRelationshipType",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "ValidateRelationshipType",
						"Hash": "403D18FDE2DA63543ED1615B19A1D1F7A6DC2E864218434F3977A7620AA44CE9",
						"Parameters": [
							"System.Collections.Generic.IList taxpayerRelationships"
						],
						"Body": {
							"BodyText": "            foreach (ITaxpayerRelationship taxpayerRelationship in taxpayerRelationships.Where(r =\u003E r.IsActive \u0026\u0026 r.RelationshipType.Code == \u0022VATGroupMember\u0022))\r\n            {\r\n                if (taxpayerRelationshipCalculator.RelatedTaxpayerIsRegisteredForVAT(taxpayerRelationship))\r\n                {\r\n                    AddValidationError(\u0022TaxpayerRelationship\u0022, string.Format(ResourceHelper.GetApplicationResource(\u0022Validation_TaxpayerRelationship_ThisTaxpayerCannotJoinVATGroupAsTheyHaveAnActiveVATRegistration\u0022) \u002B \u0022: {0}\u0022, taxpayerRelationship.FullName));\r\n                    return false;\r\n                }\r\n\r\n                if (taxpayerRelationshipCalculator.RelatedTaxpayerAlreadyHasVATGroupRelationship(taxpayerRelationship, \u0022VATGroupMemberof\u0022))\r\n                {\r\n                    AddValidationError(\u0022TaxpayerRelationship\u0022, string.Format(ResourceHelper.GetApplicationResource(\u0022Validation_TaxpayerRelationship_ThisTaxpayerIsActiveInAnotherVATGroup\u0022) \u002B \u0022: {0}\u0022, taxpayerRelationship.FullName));\r\n                    return false;\r\n                }\r\n\r\n            }\r\n\r\n            return true;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationshipType",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship IsActive",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelationshipType",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator RelatedTaxpayerIsRegisteredForVAT",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship FullName",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator RelatedTaxpayerAlreadyHasVATGroupRelationship"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "VATGroupTaxRepresentativeOfRelationshipType",
				"BaseType": "DataTorque.Iho.BusinessObjects.TaxpayerRelationshipType",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "ValidateRelationshipType",
						"Hash": "403D18FDE2DA63543ED1615B19A1D1F7A6DC2E864218434F3977A7620AA44CE9",
						"Parameters": [
							"System.Collections.Generic.IList taxpayerRelationships"
						],
						"Body": {
							"BodyText": "            foreach (ITaxpayerRelationship taxpayerRelationship in taxpayerRelationships.Where(r =\u003E r.IsActive \u0026\u0026 r.RelationshipType.Code == \u0022VATGroupTaxRepresentativeOf\u0022))\r\n            {\r\n                ITaxpayer currentTaxpayer = taxpayerRelationship.CurrentTaxpayer;\r\n\r\n                if (VATGroupAlreadyHasRepresantentative(taxpayerRelationship))\r\n                {\r\n                    AddValidationError(\u0022TaxpayerRelationship\u0022, string.Format(ResourceHelper.GetApplicationResource(\u0022Validation_TaxpayerRelationship_VATGroupCantHaveMultipleRepresentatives\u0022) \u002B \u0022: {0}\u0022, taxpayerRelationship.FullName));\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationshipType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship IsActive",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelationshipType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CurrentTaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship FullName"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "VATGroupAlreadyHasRepresantentative",
						"Hash": "82D81873B718F138D570937776C63BB942BE9FAD65976AE862E195BF66F9875C",
						"Parameters": [
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship taxpayerRelationship"
						],
						"Body": {
							"BodyText": "            return taxpayerRelationshipCalculator.RelatedTaxpayerAlreadyHasVATGroupRelationship(taxpayerRelationship, \u0022VATGroupTaxRepresentative\u0022);\r\n",
							"ReferencedTypes": [
								"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship"
							],
							"ReferencedExpressions": [
								"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator RelatedTaxpayerAlreadyHasVATGroupRelationship"
							]
						}
					}
				]
			},
			{
				"Namespace": "DataTorque.IsleOfMan.BusinessObjects",
				"Name": "VATGroupTaxRepresentativeRelationshipType",
				"BaseType": "DataTorque.Iho.BusinessObjects.TaxpayerRelationshipType",
				"Methods": [
					{
						"Modifiers": "public override",
						"ReturnType": "System.Boolean",
						"Name": "ValidateRelationshipType",
						"Hash": "403D18FDE2DA63543ED1615B19A1D1F7A6DC2E864218434F3977A7620AA44CE9",
						"Parameters": [
							"System.Collections.Generic.IList taxpayerRelationships"
						],
						"Body": {
							"BodyText": "            foreach (ITaxpayerRelationship taxpayerRelationship in taxpayerRelationships.Where(r =\u003E r.IsActive \u0026\u0026 r.RelationshipType.Code == \u0022VATGroupTaxRepresentative\u0022))\r\n            {\r\n                ITaxpayer currentTaxpayer = taxpayerRelationship.CurrentTaxpayer;\r\n\r\n                if (TaxpayerHasOverlappingRelationshipTypeOf(\u0022VATGroupTaxRepresentative\u0022, currentTaxpayer, taxpayerRelationship))\r\n                {\r\n                    AddValidationError(\u0022TaxpayerRelationship\u0022, ResourceHelper.GetApplicationResource(\u0022Validation_TaxpayerRelationship_VATGroupCantHaveMultipleRepresentatives\u0022));\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationshipType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship IsActive",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelationshipType",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CurrentTaxpayer"
							]
						}
					},
					{
						"Modifiers": "private",
						"ReturnType": "System.Boolean",
						"Name": "TaxpayerHasOverlappingRelationshipTypeOf",
						"Hash": "8CCFA4647377EF7C84C62C452BC12F1DBA669CC94F8227C96836BEA4D954D91D",
						"Parameters": [
							"System.String relationshipTypeCode",
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer currentTaxpayer",
							"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship taxpayerRelationship"
						],
						"Body": {
							"BodyText": "            IList\u003CITaxpayerRelationship\u003E VATGroupRelatedContacts = currentTaxpayer.RelatedContacts.Where(rc =\u003E\r\n                                                                                                         rc != taxpayerRelationship\r\n                                                                                                         \u0026\u0026 rc.RelationshipType.Code == relationshipTypeCode).ToList();\r\n            return taxpayerRelationshipCalculator.CalculateIfAnyRelationsOverlapWithCommenceAndCeaseDates(taxpayerRelationship.CommenceDate, taxpayerRelationship.CeasedDate, VATGroupRelatedContacts);\r\n",
							"ReferencedTypes": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationshipType",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator"
							],
							"ReferencedExpressions": [
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayer RelatedContacts",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship RelationshipType",
								"DataTorque.IsleOfMan.Interfaces.Calculators.ITaxpayerRelationshipCalculator CalculateIfAnyRelationsOverlapWithCommenceAndCeaseDates",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CommenceDate",
								"DataTorque.Iho.Interfaces.BusinessObjects.ITaxpayerRelationship CeasedDate"
							]
						}
					}
				]
			}
		]
	}
]